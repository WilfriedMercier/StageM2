%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 39 519 290 767
%%Creator: dvips(k) 5.98 Copyright 2009 Radical Eye Software
%%Title: temp-figure10.dvi
%%CreationDate: Mon Feb 27 14:37:22 2012
%%PageOrder: Ascend
%%DocumentPaperSizes: a4
%%EndComments
% EPSF created by ps2eps 1.64
%%BeginProlog
save
countdictstack
mark
newpath
/showpage {} def
/setpagedevice {pop} def
%%EndProlog
%%Page 1 1
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: /usr/bin/dvips -o temp-figure10.ps -q
%+ temp-figure10.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2012.02.27:1437
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/p{show}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0 N/Ry 0 N/V{}B/RV/v{
/Ry X/Rx X V}B statusdict begin/product where{pop false[(Display)(NeXT)
(LaserWriter 16/600)]{A length product length le{A length product exch 0
exch getinterval eq{pop true exit}if}{pop}ifelse}forall}{false}ifelse
end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{BDot}imagemask
grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat{BDot}
imagemask grestore}}ifelse B/QV{gsave newpath transform round exch round
exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0 rlineto
fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B/M{S p
delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}B/g{0 M}
B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p -3 w}B/n{
p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{0 S
rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end
%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/setpagedevice{pop}N/copypage{}N/p 3 def
@MacSetUp}N/doclip{psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll
newpath 4 copy 4 2 roll moveto 6 -1 roll S lineto S lineto S lineto
closepath clip newpath moveto}N/endTexFig{end psf$SavedState restore}N
/@beginspecial{SDict begin/SpecialSave save N gsave normalscale
currentpoint TR @SpecialDefaults count/ocount X/dcount countdictstack N}
N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs
neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale ang rotate
rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}ifelse
scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale llx neg
lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly lineto urx
ury lineto llx ury lineto closepath clip}if/showpage{}N/erasepage{}N
/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{count ocount sub{
pop}repeat countdictstack dcount sub{end}repeat grestore SpecialSave
restore end}N/@defspecial{SDict begin}N/@fedspecial{end}B/li{lineto}B
/rl{rlineto}B/rc{rcurveto}B/np{/SaveX currentpoint/SaveY X N 1
setlinecap newpath}N/st{stroke SaveX SaveY moveto}N/fil{fill SaveX SaveY
moveto}N/ellipse{/endangle X/startangle X/yrad X/xrad X/savematrix
matrix currentmatrix N TR xrad yrad scale 0 0 1 startangle endangle arc
savematrix setmatrix}N end
%%EndProcSet
TeXDict begin @defspecial
 /DvipsToPDF { 72.27 mul Resolution div } def /PDFToDvips { 72.27 div
Resolution mul } def /HyperBorder { 1 PDFToDvips } def /H.V {pdf@hoff
pdf@voff null} def /H.B {/Rect[pdf@llx pdf@lly pdf@urx pdf@ury]} def
/H.S { currentpoint HyperBorder add /pdf@lly exch def dup DvipsToPDF
/pdf@hoff exch def HyperBorder sub /pdf@llx exch def } def /H.L { 2
sub dup /HyperBasePt exch def PDFToDvips /HyperBaseDvips exch def currentpoint
HyperBaseDvips sub /pdf@ury exch def /pdf@urx exch def } def /H.A {
H.L currentpoint exch pop vsize 72 sub exch DvipsToPDF HyperBasePt
sub sub /pdf@voff exch def } def /H.R { currentpoint HyperBorder sub
/pdf@ury exch def HyperBorder add /pdf@urx exch def currentpoint exch
pop vsize 72 sub exch DvipsToPDF sub /pdf@voff exch def } def systemdict
/pdfmark known { userdict /?pdfmark systemdict /exec get put }{ userdict
/?pdfmark systemdict /pop get put userdict /pdfmark systemdict /cleartomark
get put } ifelse
 /burl@stx null def /BU.S { /burl@stx null def } def /BU.SS { currentpoint
/burl@lly exch def /burl@llx exch def burl@stx null ne {burl@endx burl@llx
ne {BU.FL BU.S} if} if burl@stx null eq { burl@llx dup /burl@stx exch
def /burl@endx exch def burl@lly dup /burl@boty exch def /burl@topy
exch def } if burl@lly burl@boty gt {/burl@boty burl@lly def} if }
def /BU.SE { currentpoint /burl@ury exch def dup /burl@urx exch def
/burl@endx exch def burl@ury burl@topy lt {/burl@topy burl@ury def}
if } def /BU.E { BU.FL } def /BU.FL { burl@stx null ne {BU.DF} if }
def /BU.DF { BU.BB [ /H /I /Border [burl@border] /Color [burl@bordercolor]
/Action << /Subtype /URI /URI BU.L >> /Subtype /Link BU.B /ANN pdfmark
/burl@stx null def } def /BU.BB { burl@stx HyperBorder sub /burl@stx
exch def burl@endx HyperBorder add /burl@endx exch def burl@boty HyperBorder
add /burl@boty exch def burl@topy HyperBorder sub /burl@topy exch def
} def /BU.B { /Rect[burl@stx burl@boty burl@endx burl@topy] } def /eop
where { begin /@ldeopburl /eop load def /eop { SDict begin BU.FL end
@ldeopburl } def end } { /eop { SDict begin BU.FL end } def } ifelse
 
@fedspecial end TeXDict begin
39158274 55380987 1000 600 600 (temp-figure10.dvi) @start
end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: a4
/setpagedevice where
{ pop << /PageSize [595 842] >> setpagedevice }
{ /a4 where { pop a4 } if }
ifelse
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 71 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 71 0 a 71 0 a
SDict begin [ /Producer (dvips + Distiller) /Title () /Subject () /Creator
(LaTeX with hyperref package) /Author () /Keywords () /DOCINFO pdfmark
end
 71 0 a -286
-66 a
SDict begin H.S end
 -286 -66 a -286 -66 a
SDict begin H.R end
 -286 -66 a -286 -66 a
SDict begin [ /View [/XYZ H.V] /Dest (page.1) cvn H.B /DEST pdfmark
end
 -286
-66 a -264 2082 a @beginspecial 0 @llx 0 @lly 554 @urx
546 @ury 2494 @rwi @clip @setspecial
%%BeginDocument: zhist_comp_litt_images.eps
%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: zhist_comp_litt_images.eps
%%Creator: Adobe Illustrator(R) 12
%%AI8_CreatorVersion: 12.0.0
%AI9_PrintingDataBegin
%%For: epress
%%CreationDate: 12/20/2011
%%BoundingBox: 0 0 554 546
%%HiResBoundingBox: 0 0 553.8130 545.1724
%%CropBox: 0 0 553.8130 545.1724
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.19 0
%%+ procset Adobe_CoolType_Core 2.23 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%ADO_BuildNumber: Adobe Illustrator(R) 12.0.0 x198 R agm 4.3861 ct 5.530
%ADO_ContainsXMP: MainFirst
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Utils 70 dict dup begin put
/bdf
{
	bind def
} bind def
/nd{
	null def
}bdf
/xdf
{
	exch def
}bdf
/ldf 
{
	load def
}bdf
/ddf
{
	put
}bdf	
/xddf
{
	3 -1 roll put
}bdf	
/xpt
{
	exch put
}bdf
/ndf
{ 
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/ps_level
	/languagelevel where{
		pop systemdict /languagelevel get exec
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr} stopped {
		-1
	}if
def
/set_gvm
{
	currentglobal exch setglobal
}bdf
/reset_gvm
{
	setglobal
}bdf
/makereadonlyarray
{
	/packedarray where{
		pop packedarray
	}{
		array astore readonly
	}ifelse
}bdf
/map_reserved_ink_name
{
	dup type /stringtype eq{
		dup /Red eq{
			pop (_Red_)
		}{
			dup /Green eq{
				pop (_Green_)
			}{
				dup /Blue eq{
					pop (_Blue_)
				}{
					dup () cvn eq{
						pop (Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def} repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash /AGMUTIL_GSTATE_do xdf /AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit /AGMUTIL_GSTATE_gy_xfer xdf cvlit /AGMUTIL_GSTATE_b_xfer xdf
		cvlit /AGMUTIL_GSTATE_g_xfer xdf cvlit /AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx {AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def} repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht /HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone /HalftoneType get AGMUTIL_GSTATE_ht /HalftoneType get ne
			{
			  mark AGMUTIL_GSTATE_ht {sethalftone} stopped cleartomark
			} if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		} ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/thold_halftone
{ 
	level3
		{sethalftone currenthalftone}
		{
			dup /HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}
			{
				begin
				Width Height mul {
					Thresholds read {pop} if
				} repeat
				end
				currenthalftone
			} ifelse
		}ifelse
} def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%) anchorsearch {pop} if
} bdf
/filter_cmyk
{	
	dup type /filetype ne{
		exch () /SubFileDecode filter
	}
	{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length /AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	] cvx
} bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
} bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type /filetype ne{
		0 () /SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict /AGMCORE_gget cvx /begin cvx
			currentdict /srcStr get /readstring cvx /pop cvx
			/dup cvx /length cvx 0 /gt cvx [
				Adobe_AGM_Utils /AGMUTIL_ndx 0 /ddf cvx
				names_index Names length currentdict /srcStr get length 1 sub {
					1 /index cvx /exch cvx /get cvx
					currentdict /dstStr get /AGMUTIL_ndx /load cvx 3 -1 /roll cvx /put cvx
					Adobe_AGM_Utils /AGMUTIL_ndx /AGMUTIL_ndx /load cvx 1 /add cvx /ddf cvx
				} for
				currentdict /dstStr get 0 /AGMUTIL_ndx /load cvx /getinterval cvx
			] cvx /if cvx
			/end cvx
		] cvx
		bind
		/exec cvx
	] cvx
	end
} bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict /DataSource get def
	/origMultipleDataSources imageDict /MultipleDataSources get def
	/origDecode imageDict /Decode get def
	/dstDataStr imageDict /Width get colorSpaceElemCnt mul string def
	imageDict /MultipleDataSources known {MultipleDataSources}{false} ifelse
	{
		/imbufCnt imageDict /DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub {
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict /DataSource get imbufIdx [ AGMUTIL_imagefile imbufs imbufIdx get /readstring cvx /pop cvx ] cvx put
		} for
		DeviceN_PS2 {
			imageDict begin
		 	/DataSource [ DataSource /devn_sep_datasource cvx ] cvx def
			/MultipleDataSources false def
			/Decode [0 1] def
			end
		} if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or {
			/srcDataStrs [ imageDict begin
				currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse
				{
					Width Decode length 2 div mul cvi string
				} repeat
				end ] def		
			imageDict begin
		 	/DataSource [AGMUTIL_imagefile Decode BitsPerComponent false 1 /filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource /exec cvx] cvx def
			/Decode [0 1] def
			end
		}{
			imageDict /DataSource [1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx /pop cvx names_index /get cvx /put cvx] cvx put
			imageDict /Decode [0 1] put
		} ifelse
	} ifelse
	imageDict exch
	load exec
	imageDict /DataSource origDataSource put
	imageDict /MultipleDataSources origMultipleDataSources put
	imageDict /Decode origDecode put	
	end
} bdf
/write_image_file
{
	begin
	{ (AGMUTIL_imagefile) (w+) file } stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources {DataSource 0 get}{DataSource}ifelse type /filetype eq {
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{ 
			pop
			MultipleDataSources {
			 	0 1 DataSource length 1 sub {
					DataSource type dup
					/arraytype eq {
						pop DataSource exch get exec
					}{
						/filetype eq {
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						} ifelse
					} ifelse
					AGMUTIL_imagefile exch writestring
				} for
			}{
				DataSource type dup
				/arraytype eq {
					pop DataSource exec
				}{
					/filetype eq {
						DataSource imbuf readstring pop
					}{
						DataSource
					} ifelse
				} ifelse
				AGMUTIL_imagefile exch writestring
			} ifelse
		}for
		end
		true
	}ifelse
	end
} bdf
/close_image_file
{
	AGMUTIL_imagefile closefile (AGMUTIL_imagefile) deletefile
}def
statusdict /product known userdict /AGMP_current_show known not and{
	/pstr statusdict /product get def
	pstr (HP LaserJet 2200) eq 	
	pstr (HP LaserJet 4000 Series) eq or
	pstr (HP LaserJet 4050 Series ) eq or
	pstr (HP LaserJet 8000 Series) eq or
	pstr (HP LaserJet 8100 Series) eq or
	pstr (HP LaserJet 8150 Series) eq or
	pstr (HP LaserJet 5000 Series) eq or
	pstr (HP LaserJet 5100 Series) eq or
	pstr (HP Color LaserJet 4500) eq or
	pstr (HP Color LaserJet 4600) eq or
	pstr (HP LaserJet 5Si) eq or
	pstr (HP LaserJet 1200 Series) eq or
	pstr (HP LaserJet 1300 Series) eq or
	pstr (HP LaserJet 4100 Series) eq or 
	{
 		userdict /AGMP_current_show /show load put
		userdict /show {
		  currentcolorspace 0 get
		  /Pattern eq
		  {false charpath f}
		  {AGMP_current_show} ifelse
		} put
	}if
	currentdict /pstr undef
} if
/consumeimagedata
{
	begin
	currentdict /MultipleDataSources known not
		{/MultipleDataSources false def} if
	MultipleDataSources
		{
		DataSource 0 get type
		dup /filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup /arraytype eq exch /packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch get exec length exch 0 ne {pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup /filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height { pop DataSource flushbuffer readstring pop pop} for
			end
			}if
		dup /arraytype eq exch /packedarraytype eq or /DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	  2{/exec load}repeat
	  3 1 roll
	  [ 5 1 roll ] bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs /TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{ 
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs /TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type /dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		} if
	dup type /arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		} if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch {cvx} if
}bdf
/clonedict
{
	dup length dict
	begin
		{
		dup type /dicttype eq
			{
				clonedict
			} if
		dup type /arraytype eq
			{
				clonearray
			} if
		def
		}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get /DeviceN eq level3 not and
} bdf
/Indexed_DeviceN
{ 
	/indexed_colorspace_dict AGMCORE_gget dup null ne {
		dup /CSDBase known {
			/CSDBase get /CSD get_res /Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	} ifelse
} bdf
/DeviceN_NoneName
{	
	/Names where {
		pop
		false Names
		{
			(None) eq or
		} forall
	}{
		false
	}ifelse
} bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup /arraytype eq exch /packedarraytype eq or
		{
			dup 0 get /DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}
			{
				true
			}ifelse
		}
		{
			true
		} ifelse
	}
	{
		true
	} ifelse
} bdf
/base_colorspace_type
{
	dup type /arraytype eq {0 get} if
} bdf
/currentdistillerparams where { pop currentdistillerparams /CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5 {cleartomark} bind def
}{
	/pdfmark_5 {pdfmark} bind def
}ifelse
/ReadBypdfmark_5
{
	2 dict begin
	/makerString exch def string /tmpString exch def
	{
		currentfile tmpString readline pop
		makerString anchorsearch
		{
		pop pop cleartomark exit
		}{
			3 copy /PUT pdfmark_5 pop 2 copy (\n) /PUT pdfmark_5
		} ifelse
	}loop
	end
} bdf
/doc_setup{
	Adobe_AGM_Utils begin
}bdf
/doc_trailer{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright (C) 1997-2005 Adobe Systems, Inc.  All Rights Reserved.
%% Note: This procset assumes Adobe_AGM_Utils is opened on the stack below it, for
%% definitions of some fundamental procedures.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Core 201 dict dup begin put
/Adobe_AGM_Core_Id /Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen [currentscreen] cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_in_pattern false def
/AGMCORE_currentpagedevice nd
/knockout_unitsq nd
currentglobal true setglobal
[/CSA /Gradient /Procedure]
{
	/Generic /Category findresource dup length dict copy /Category defineresource pop
} forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer {readline} stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type /dicttype eq{
		dup /HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup /HalftoneType get 2 eq{
				/GraySpotFunction get
			}{ 
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
} def
/clp_npth
{
	clip newpath
} def
/eoclp_npth
{
	eoclip newpath
} def
/npth_clp
{
	newpath clip
} def
/graphic_setup
{
	/AGMCORE_graphicsave save def
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[] 0 setdash
	10 setmiterlimit
	newpath
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias get exec
	/Adobe_AGM_Image where {
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			get exec
		}{
			pop pop
		}ifelse
	} if
	100 dict begin
	/dictstackcount countdictstack def
	/showpage {} def
	mark
} def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub {end}for
	end
	AGMCORE_graphicsave restore
} def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox newpath pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				} if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show ( ) show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}
			{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			} ifelse
		} forall
} bdf
/doc_setup{
	Adobe_AGM_Core begin
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict /AGM_handleerror known not{
		errordict /AGM_handleerror errordict /handleerror get put
		errordict /handleerror {
			Adobe_AGM_Core begin
			$error /newerror get AGMCORE_cur_err null ne and{
				$error /newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error /newerror true put
			end
			errordict /AGM_handleerror get exec
			} bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err /AGMCORE_bad_environ def} if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 10 def
		/AGMCORE_&gsave /gsave ldf
		/AGMCORE_&grestore /grestore ldf
		/AGMCORE_&grestoreall /grestoreall ldf
		/AGMCORE_&save /save ldf
		/AGMCORE_&setoverprint /setoverprint ldf
		/AGMCORE_gdictcopy {
			begin
			{ def } forall
			end
		}def
		/AGMCORE_gput {
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget {
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave {
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge {limitcheck} if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore {
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt {1 add} if
			dup AGMCORE_gstack exch get dup /AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall {
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save {
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge {limitcheck} if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup /AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub {
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		} for
	}if
	level3 /AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern /makepattern load def
	}if
	/currentcmykcolor [0 0 0 0] AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace [/DeviceGray] AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0] AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent () AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	<<
	/MaxPatternItem currentsystemparams /MaxPatternCache get
	>>
	setuserparams
	end
}def
/page_setup
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor /setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore /currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3 {
			3 index add neg dup 0 lt {
				pop 0
			} if
			3 1 roll
		} repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{
		pop
	}ndf
	/currentoverprint
	{
		false
	}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{ 
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.) ==
			Adobe_AGM_Core /AGMCORE_have_reported_unsupported_color_space true ddf
		} if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where {pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias {
				/Name get exch pop
			} if
			dup dup (None) eq exch (All) eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{ 
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_in_pattern known {//Adobe_AGM_Core/AGMCORE_in_pattern get}{false} ifelse
						not AGMCORE_currentpagedevice/OverrideSeparations known and
						{
							AGMCORE_currentpagedevice/OverrideSeparations get
							{
								/HqnSpots /ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name /HqnSpots /ProcSet findresource /TestSpot get exec not
						}{
							gsave
							[/Separation AGMCORE_name /DeviceGray {}]AGMCORE_&setcolorspace
							false
							AGMCORE_currentpagedevice/SeparationColorNames 2 copy known
							{
								get
								{ AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where {pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{ 
				dup true exch
					{
					dup (Cyan) eq exch
					dup (Magenta) eq 3 -1 roll or exch
					dup (Yellow) eq 3 -1 roll or exch
					dup (Black) eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup (Cyan) eq exch
						dup (Magenta) eq 3 -1 roll or exch
						dup (Yellow) eq 3 -1 roll or exch
						(Black) eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					dup (Cyan) eq exch
					dup (Magenta) eq 3 -1 roll or exch
					dup (Yellow) eq 3 -1 roll or exch
					dup (Black) eq 3 -1 roll or
					{pop}
					{convert_spot_to_process or}ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space  
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup (Cyan) eq exch dup (Magenta) eq exch dup (Yellow) eq exch (Black) eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{ 
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			  	AGMCORE_magenta_plate{
			  		4 3 roll pop pop pop
			  	}{
			  		AGMCORE_yellow_plate{
			  			4 2 roll pop pop pop
			  		}{
			  			4 1 roll pop pop pop
			  		}ifelse
			  	}ifelse
			}ifelse
			settransfer  
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			  	AGMCORE_magenta_plate{
			  		{4 3 roll pop pop pop}
			  	}{
			  		AGMCORE_yellow_plate{
			  			{4 2 roll pop pop pop}
			  		}{
			  			{4 1 roll pop pop pop}
			  		}ifelse
			  	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup /Cyan eq 1 index (Cyan) eq or
					{pop (_cyan_)}if
				dup /Magenta eq 1 index (Magenta) eq or
					{pop (_magenta_)}if
				dup /Yellow eq 1 index (Yellow) eq or
					{pop (_yellow_)}if
				dup /Black eq 1 index (Black) eq or
					{pop (_black_)}if
				}def
			dup type /arraytype eq
				{[exch {filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3 {
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup (Cyan) eq exch /Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup (Magenta) eq exch /Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup (Yellow) eq exch /Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup (Black) eq exch /Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type /stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string /string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in /readstring cvx
						[component /get cvx 255 /exch cvx /sub cvx string_out /exch cvx 0 /exch cvx /put cvx string_out]cvx
						[/pop cvx ()]cvx /ifelse cvx
					]cvx /ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type /dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict /Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode [1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0 [C0 channel get 1 exch sub] def
							/C1 [C1 channel get 1 exch sub] def
							}{
							/C0 [1] def
							/C1 [1] def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions [Functions {channel paint? AGMCORE_separateShadingFunction} forall] def			
						}if
					currentdict /Range known
						{/Range [0 1] def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict /Function known
					{
					currentdict /Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction /Function xdf
					/ColorSpace [/DeviceGray] def
					}{
					ColorSpace dup type /arraytype eq {0 get}if /DeviceCMYK eq
						{
						/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}] def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get /Separation eq
						{
							{
								[1 /exch cvx /sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub /index cvx 1 /exch cvx /sub cvx ColorSpace 1 get length 1 add 1 /roll cvx ColorSpace 1 get length{/pop cvx} repeat]cvx
							}{
								pop [ColorSpace 1 get length {/pop cvx} repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2 /DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup /ColorSpace get
				dup type /arraytype ne
					{[exch]}if
				dup 0 get /DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get /Separation eq
					{
					exch begin
					ColorSpace 1 get dup /None ne exch /All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get /exec cvx
										4 AGMCORE_plate_ndx sub -1 /roll cvx
										4 1 /roll cvx
										3 [/pop cvx]cvx /repeat cvx
										1 /exch cvx /sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get /DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get /exec cvx
									4 AGMCORE_plate_ndx sub -1 /roll cvx
									4 1 /roll cvx
									3 [/pop cvx]cvx /repeat cvx
									1 /exch cvx /sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace [/DeviceGray] def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup /DeviceCMYK eq exch dup /Separation eq exch /DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type /arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get /CIEBasedA eq
								{
								/ColorSpace [/Separation /_ciebaseda_ /DeviceGray {}] def
								}if
							ColorSpace 0 get dup /CIEBasedABC eq exch dup /CIEBasedDEF eq exch /DeviceRGB eq or or
								{
								/ColorSpace [/DeviceN [/_red_ /_green_ /_blue_] /DeviceRGB {}] def
								}if
							ColorSpace 0 get /CIEBasedDEFG eq
								{
								/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}] def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup /AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace [/Separation (None) /DeviceGray {}] def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup /AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup /PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading /AGMCORE_ignoreshade known
					currentdict end exch
					{pop <</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{ 
				4 {4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{ 
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf /AGMCORE_y xdf /AGMCORE_m xdf /AGMCORE_c xdf
				end
				[/Separation 4 -1 roll /DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation (All) /DeviceGray {}] setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4 {4 index mul 4 1 roll} repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval {255 div} forall
	} bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	} bdf
	/n_color_components
	{
		base_colorspace_type
		dup /DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo /moveto ldf
		/li /lineto ldf
		/cv /curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2 /setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace /setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup /arraytype eq exch /packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where {
						begin
						dup 0 get dup /Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[ 
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get [ 
									exch {
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									} forall 
								] 1 xpt
							}if
						}ifelse
						end
					} if
				}if
			}def
			/setcolorspace
			{
				dup type dup /arraytype eq exch /packedarraytype eq or
				{
					dup 0 get /Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps {AGMCORE_&&&setcolorspace} if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1 [8 0 0 8 0 0] {<ffffffffffffffff>} image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		} def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		} def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup /DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup /DeviceGray ne{
				dup /DeviceCMYK ne{
					dup /DeviceRGB ne{
						dup /Separation eq{
							pop
							currentcolorspace 3 get exec
							currentcolorspace 2 get
						}{
							dup /Indexed eq{
								pop
								currentcolorspace 3 get dup type /stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err /AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		} def
	}ifelse
	/sop /setoverprint ldf
	/lw /setlinewidth ldf
	/lc /setlinecap ldf
	/lj /setlinejoin ldf
	/ml /setmiterlimit ldf
	/dsh /setdash ldf
	/sadj /setstrokeadjust ldf
	/gry /setgray ldf
	/rgb /setrgbcolor ldf
	/cmyk /setcmykcolor ldf
	/sep /setsepcolor ldf
	/devn /setdevicencolor ldf
	/idx /setindexedcolor ldf
	/colr /setcolor ldf
	/csacrd /set_csa_crd ldf
	/sepcs /setsepcolorspace ldf
	/devncs /setdevicencolorspace ldf
	/idxcs /setindexedcolorspace ldf
	/cp /closepath ldf
	/clp /clp_npth ldf
	/eclp /eoclp_npth ldf
	/f /fill ldf
	/ef /eofill ldf
	/@ /stroke ldf
	/nclp /npth_clp ldf
	/gset /graphic_setup ldf
	/gcln /graphic_cleanup ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin /clonedict load end def
	/clonearray Adobe_AGM_Utils begin /clonearray load end def
	currentdict{
		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {
			bind
		}if
		def
	}forall
	/getrampcolor
	{ 
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type /stringtype eq {indx get} if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		} for
		ColorSpaceFamily /Separation eq 
		{sep}
		{
			ColorSpaceFamily /DeviceN eq
			{devn} {setcolor}ifelse
		}ifelse
	} bdf
	/sssetbackground {aload pop setcolor} bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where {pop /setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			newpath
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			newpath
		} if
		c1x c2x eq
		{
			c1y c2y lt {/theta 90 def}{/theta 270 def} ifelse
		}
		{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and { /theta theta 180 sub def} if
			c2x c1x lt c2y c1y lt and { /theta theta 180 add def} if
		} ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{ pathbbox } stopped
		{ 0 0 0 0 } if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}
		{
			/max { 2 copy gt { pop } {exch pop} ifelse } bdf
			/min { 2 copy lt { pop } {exch pop} ifelse } bdf
			rampdict begin
			40 dict begin
			background length 0 gt { background sssetbackground gsave clippath fill grestore } if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}
				{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}
						{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{ /theta 89.99 def}
							{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}
							{
								/L1maxX 0 def
								/L2maxX 0 def
							} ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						} ifelse
					} ifelse
				} ifelse
			} if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt { exch } if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			} if
		} if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		newpath
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}
		{
			0
			numsteps
			{
				dup
				subsampling { round cvi } if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			} repeat
			pop
		} ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}
			{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}
				{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}
					{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{ /theta 89.99 def}
						{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}
						{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					} ifelse
				} ifelse
			} ifelse
		} if
		grestore
		grestore
		end
		end
		end
		} ifelse
	} bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where {pop /setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			newpath
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			newpath
		} if
		x1 x2 eq
		{
			y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse
		}
		{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if
			x2 x1 lt y2 y1 lt and { /theta theta 180 add def} if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{ pathbbox } stopped
		{ 0 0 0 0 } if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}
		{
			rampdict begin
			20 dict begin
			background length 0 gt { background sssetbackground gsave clippath fill grestore } if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt { exch } if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				} if
			} if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				} if
			} if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling { round cvi } if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			} repeat
			pop
			ext1 {
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				} if
			} if
			grestore
			grestore
			end
			end
			end
		} ifelse
	} bdf
}def
/page_trailer
{
	end
}def
/doc_trailer{
}def
/capture_currentpagedevice {
	//Adobe_AGM_Core/AGMCORE_currentpagedevice currentpagedevice ddf
} def
systemdict /findcolorrendering known{
	/findcolorrendering systemdict /findcolorrendering get def
}if
systemdict /setcolorrendering known{
	/setcolorrendering systemdict /setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup //Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name /MappedCSA xdf}ifelse
} def
/setsepcolor
{ 
	/sep_colorspace_dict AGMCORE_gget begin
		dup /sep_tint exch AGMCORE_gput
		TintProc
	end
} def
/setdevicencolor
{ 
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		} for
		TintProc
	end
} def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2 {AGMCORE_tmp mul NComponents 1 roll} repeat
			LMax sub AGMCORE_tmp mul LMax add  NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add  NComponents 1 roll
				} repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
} def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
} def
/sep_proc_name
{
	dup 0 get 
	dup /DeviceRGB eq exch /DeviceCMYK eq or level2 not and has_color not and{
		pop [/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
} def
/setsepcolorspace
{ 
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup /sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup () eq exch (All) eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{ 255 div } /exec cvx 3 -1 roll [ 4 1 roll load /exec cvx ] cvx 
		] setcolorspace_opt
		/TintProc {
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get /DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc [
				Components aload pop Name findcmykcustomcolor 
				/exch cvx /setcustomcolor cvx
			] cvx bdf
		}{
 			AGMCORE_host_sep Name (All) eq and{
 				/TintProc { 
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get /DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name () eq and{
					/TintProc [
						MappedCSA sep_proc_name exch 0 get /DeviceCMYK eq{
							cvx /setcmykcolor cvx
						}{
							cvx /setgray cvx
						}ifelse
					] cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup /DeviceCMYK eq exch /DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc [
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get /DeviceGray eq{
								1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx
							}if
							/Name cvx /findcmykcustomcolor cvx /exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load /exec cvx
								/not cvx /and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							] cvx /if cvx
							/setcustomcolor cvx
						] cvx bdf
 					}{ 
						/TintProc {setcolor} bdf
						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
} def
/additive_blend
{
  	3 dict begin
  	/numarrays xdf
  	/numcolors xdf
  	0 1 numcolors 1 sub
  		{
  		/c1 xdf
  		1
  		0 1 numarrays 1 sub
  			{
			1 exch add /index cvx
  			c1 /get cvx /mul cvx
  			}for
 		numarrays 1 add 1 /roll cvx 
  		}for
 	numarrays [/pop cvx] cvx /repeat cvx
  	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add /index cvx  
			c1 /get cvx /sub cvx /mul cvx
			}for
		/sub cvx
		numarrays 1 add 1 /roll cvx
		}for
	numarrays [/pop cvx] cvx /repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc [
		/TintTransform cvx /setcolor cvx
	] cvx bdf
	MappedCSA setcolorspace_opt
} bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length {pop} repeat
	end
} bdf
/setdevicencolorspace
{ 
	dup /AliasedColorants known {false}{true}ifelse 
	current_spot_alias and {
		7 dict begin
		/names_index 0 def
		dup /names_len exch /Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup /Names get
		{
			dup map_alias {
				exch pop
				dup /ColorLookup known {
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup /Components known {
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index [null null null null] put
						end
					} ifelse
				} ifelse
				new_names names_index 3 -1 roll /Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup /LookupTables known {
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index [null null null null] put
					end
				} ifelse
			} ifelse
			/names_index names_index 1 add def 
		} forall
		alias_cnt 0 gt {
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge {0 get length}{length}ifelse def
			0 1 names_len 1 sub {
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge {0 get length}{length}ifelse lut_entry_len ne {
					/AliasedColorants false def
					exit
				}
				{
					new_LookupTables names_index get 0 get null eq {
						dup /Names get names_index get /name xdf
						name (Cyan) eq name (Magenta) eq name (Yellow) eq name (Black) eq
						or or or not {
							/AliasedColorants false def
							exit
						} if
					} if
				} ifelse
			} for
			lut_entry_len 1 eq {
				/AliasedColorants false def
			} if
			AliasedColorants {
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq {/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod /Additive eq {/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict /TTTablesIdx known not {
					/TTTablesIdx -1 def
				} if
				end
			} if
		}if
		end
	} if
	dup /devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict /AliasedColorants known {
		AliasedColorants
	}{
		false
	} ifelse
	dup not {
		CSA map_csa
	} if
	/TintTransform load type /nulltype eq or {
		/TintTransform [
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup (Cyan) eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup (Magenta) eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0 /exch cvx 0 0
							}
							{
							(Yellow) eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1 /roll cvx 0
								}
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1 /roll cvx
								} ifelse
							} ifelse
						} ifelse
					5 -1 /roll cvx /astore cvx
					}
					{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx /mul cvx /round cvx /cvi cvx /get cvx
					} ifelse
					Names length TTTablesIdx add 1 add 1 /roll cvx
				} for
			Names length [/pop cvx] cvx /repeat cvx
			NComponents Names length
  			TintMethod /Subtractive eq
  				{
  				subtractive_blend
  				}
  				{
  				additive_blend
  				} ifelse
		] cvx bdf
	} if
	AGMCORE_host_sep {
		Names convert_to_process {
			exec_tint_transform
		}
		{	
			currentdict /AliasedColorants known {
				AliasedColorants not
			}{
				false
			} ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants {
				/currentspotalias current_spot_alias def
				false set_spot_alias
			} if
			Names {
				AGMCORE_is_cmyk_sep {
					dup (Cyan) eq AGMCORE_cyan_plate and exch
					dup (Magenta) eq AGMCORE_magenta_plate and exch
					dup (Yellow) eq AGMCORE_yellow_plate and exch
					(Black) eq AGMCORE_black_plate and or or or {
						/devicen_colorspace_dict AGMCORE_gget /TintProc [
							Names names_index /devn_makecustomcolor cvx
						] cvx ddf
						/painted? true def
					} if
					painted? {exit} if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq {
					/devicen_colorspace_dict AGMCORE_gget /TintProc [
						Names names_index /devn_makecustomcolor cvx
					] cvx ddf
					/painted? true def
					exit
					} if
				} ifelse
				/names_index names_index 1 add def
			} forall
			AvoidAliasedColorants {
				currentspotalias set_spot_alias
			} if
			painted? {
				/devicen_colorspace_dict AGMCORE_gget /names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget /TintProc [
					names_len [/pop cvx] cvx /repeat cvx 1 /setseparationgray cvx
 					0 0 0 0 /setcmykcolor cvx
				] cvx ddf
			} ifelse
			end
		} ifelse
	}
	{
		AGMCORE_in_rip_sep {
			Names convert_to_process not
		}{
			level3
		} ifelse
		{
			[/DeviceN Names MappedCSA /TintTransform load] setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and {
				[
					Names /length cvx [/pop cvx] cvx /repeat cvx
				] cvx bdf
			}{
				{setcolor} bdf
			} ifelse
		}{
			exec_tint_transform
		} ifelse
	} ifelse
	set_crd
	/AliasedColorants false def
	end
} def
/setindexedcolorspace
{
	dup /indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict /CSDBase known {
			CSDBase /CSD get_res begin
			currentdict /Names known {
				currentdict devncs
			}{
				1 currentdict sepcs
			} ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt /Names where {pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal {
					/tableIndex xdf
					Lookup dup type /stringtype eq {
						compCnt tableIndex map_index
					}{
						exec
					} ifelse
					/Names where {
						pop setdevicencolor
					}{
						setsepcolor
					} ifelse
					currentgray
					tableIndex exch
					HiVal mul cvi 
					NewLookup 3 1 roll put
				} for
				[/Indexed currentcolorspace HiVal NewLookup] setcolorspace_opt
				end
			}{
				level3
				{
					currentdict /Names known {
						[/Indexed [/DeviceN Names MappedCSA /TintTransform load] HiVal Lookup] setcolorspace_opt
					}{
						[/Indexed [/Separation Name MappedCSA sep_proc_name load] HiVal Lookup] setcolorspace_opt
					} ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict /Names known {
						Lookup dup type /stringtype eq
							{/exch cvx CSDBase /CSD get_res /Names get length dup /mul cvx exch /getinterval cvx {255 div} /forall cvx}
							{/exec cvx}ifelse
							/TintTransform load /exec cvx
					}{
						Lookup dup type /stringtype eq
							{/exch cvx /get cvx 255 /div cvx}
							{/exec cvx}ifelse
							CSDBase /CSD get_res /MappedCSA get sep_proc_name exch pop /load cvx /exec cvx
					} ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			} ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or{
						pop [/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{ 
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval {} forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						} bind
					}{
						Lookup
					}ifelse
				}ifelse
				] setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep {
		/indexed_colorspace_dict AGMCORE_gget dup /CSDBase known { 
			begin
			CSDBase /CSD get_res begin
			currentdict /Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
			end
		}{
			/Lookup get 4 3 -1 roll map_index setcmykcolor
		} ifelse
	}{
		level3 not AGMCORE_in_rip_sep and /indexed_colorspace_dict AGMCORE_gget /CSDBase known and {
			/indexed_colorspace_dict AGMCORE_gget /CSDBase get /CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		} ifelse
	}ifelse
} def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode [0 1] def
		/DataSource <FF> def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict /image get exec
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup /CSD eq {
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	} ifelse
}def
/del_res
{
	{
		aload pop exch
		dup /CSD eq {
			pop 
			{
				//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef
			}forall
		}{
			exch
			{
				1 index undefineresource
			}forall
			pop
		} ifelse
	} forall
}def
/get_res
{
	dup /CSD eq {
		pop
		dup type dup /nametype eq exch /stringtype eq or {
			AGMCORE_CSD_cache exch get
		} if
	}{
		findresource
	} ifelse
}def
/get_csa_by_name
{
	dup type dup /nametype eq exch /stringtype eq or{
		/CSA get_res
	} if
}def
/pattern_buf_init
{
	/count get 0 0 put
} def
/pattern_buf_next
{
	dup /count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
} def
/cachepattern_compress
{
	5 dict begin
	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def
	/patarray 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	patarray 1 array dup 0 1 put /count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq {
			pop
		}{
			patarray dup length 1 sub 3 -1 roll put
		} ifelse
		{string_size}{0}ifelse string
	} /LZWEncode filter def
	{ 		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not {exit} if
	} loop
	LZWFilter closefile
	patarray				
	end
}def
/cachepattern
{
	2 dict begin
	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def
	/patarray 20 dict def
	currentglobal true setglobal 
	patarray 1 array dup 0 1 put /count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		patarray dup length 1 sub 3 -1 roll put
		not {exit} if
	} loop
	patarray dup dup length 1 sub () put					
	end	
}def
/wrap_paintproc
{ 
  statusdict /currentfilenameextend known{
	clonedict
	begin
	/OldPaintProc /PaintProc load def
	/PaintProc
	{
		mark exch
		dup /OldPaintProc get stopped
		{closefile restore end} if
		cleartomark
	}  def
	end
  } {pop} ifelse
} def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index /XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index /YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			  1 index begin
		BBox 0 get XStep div cvi XStep mul /xshift exch neg def
		BBox 1 get YStep div cvi YStep mul /yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[ xshift yshift /translate load null /exec load ] dup
		3 /PaintProc load put cvx /PaintProc exch def
		end
	1 index dup /ID get exch /Pattern add_res
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup /PatternType get 1 eq{
		dup /PaintType get 1 eq{
			currentoverprint sop [/DeviceGray] setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{
		pop
	}{
		setcolorspace
	}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}{null}ifelse
	Intent ne {
		Intent /ColorRendering {findresource} stopped
		{
			pop pop systemdict /findcolorrendering known
			{
				Intent findcolorrendering pop
				/ColorRendering findresource 
				true
			}
			{false} ifelse
		}
		{true} ifelse
		{
			dup begin
			currentdict /TransformPQR known {
				currentdict /TransformPQR get aload pop
				3 {{} eq 3 1 roll} repeat or or
			}
			{true} ifelse
			currentdict /MatrixPQR known {
				currentdict /MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true} ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR [
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add} bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add} bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add} bind
				] def
				/MatrixPQR [ 0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296 ] def
				/RangePQR [-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392] def
				currentdict end
			} if
			setcolorrendering_opt
		} if		
	}if
} def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict /ColorRendering known{
			ColorRendering /ColorRendering {findresource} stopped not {setcolorrendering_opt} if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type /arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process //Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp) flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep) flushinput
	}if
}def
/cpaint_gend
{
	newpath
}def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add} if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0} ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup /Name get map_alias {/CSD put}{pop} ifelse} forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get /CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not {
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor /setcustomcolor load put
	} if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		currentdict/TintProc known currentdict/CSA known and 3 1 roll
		//Adobe_AGM_Core begin
		dup /customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			4 -1 roll{
				exch pop /sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
			pop
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd /setpagedevice load def
	/setpagedevice { get_gstate spd set_gstate } def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known{
			currentpagedevice/NegativePrint get //Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<< /NegativePrint //Adobe_AGM_Core/AGMCORE_inverting get >> setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
		gsave newpath clippath 1 /setseparationgray where{pop setseparationgray}{setgray}ifelse 
		/AGMIRS_&fill where {pop AGMIRS_&fill}{fill} ifelse grestore
	}if
	end
}def
/lw_save_restore_override {
	/md where {
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{} def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage /showpage load def}
		ifelse
		/showpage {orig_showpage gR} def
		end
	}if
}def
/pscript_showpage_override {
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage /restore load def
		/restore {exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where {
		pop
		md /initializepage known {
			md /initializepage {} put
		} if
		md /rC known {
			md /rC {4{pop}repeat} put
		} if
	}if
	/mysetup where {
		/mysetup [1 0 0 1 0 0] put
	}if
	Adobe_AGM_Core /AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core /AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
	/PrepsDict where
		{pop}
		{
		Adobe_AGM_Core /AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core /AGMCORE_Default_PageSize get type /arraytype eq
			{
			Adobe_AGM_Core /AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core /AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core /AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ (Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. ) def
	/AGMCORE_color_space_onhost_seps (This job contains colors that will not separate with on-host methods. ) def
	/AGMCORE_invalid_color_space (This job contains an invalid color space. ) def
end
/set_def_ht
{
	AGMCORE_def_ht sethalftone
} def
end
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.25 0
%%Copyright: Copyright 1997-2005 Adobe Systems Incorporated.  All Rights Reserved.
%%Version: 2.25 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict /Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{ /Adobe_CoolType_Core userdict /Adobe_CoolType_Core get def }
if
userdict /Adobe_CoolType_Core 60 dict dup begin put
/Adobe_CoolType_Version 2.25 def
/Level2?
	systemdict /languagelevel known dup
		{ pop systemdict /languagelevel get 2 ge }
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal /pop load def
	/gcheck { pop false } bind def
	/currentpacking false def
	/setpacking /pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict /Adobe_CoolType_Data 2 copy known not
	 { 2 copy 10 dict put }
if
get
	 begin
	 /@opStackCountByLevel 32 dict def
	 /@opStackLevel 0 def
	 /@dictStackCountByLevel 32 dict def
	 /@dictStackLevel 0 def
	 end
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup /args
			7 index
			5 add array put
			put get
			}
			{
			get dup /args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch /args exch put
				}
				{ pop }
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{ pop count }
			if
			dup /argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{ pop }
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	} bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{ { pop } repeat }
				{ pop }
			ifelse
			args 0 argCount getinterval {} forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{ { end } repeat }
		{ pop }
	ifelse
	} bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	} bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	} bind def
/@ReRaise
	{
	cvx $error /errorname get errordict exch get exec
	stop
	} bind def
/@Stopped
	{
	0 @#Stopped
	} bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{ @_RestoreStackLevels true }
		{ @_PopStackLevels false }
	ifelse
	} bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	} bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch /@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					 { (*) { pop stop } 128 string /Category resourceforall }
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data /@shouldNotDisappearDict get ne dup
					 {
						  /@shouldNotDisappearDictValue known
								{
										  {
												end
												currentdict 1 index eq
													 { pop exit }
												if
										  }
									 loop
								}
						  if
					 }
				if
				end
		}
		{ false }
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{ /steveamerige /Category resourcestatus }
		stopped
			{ cleartomark true }
			{ cleartomark currentglobal not }
		ifelse
		}
		{ false }
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec
				{ cleartomark false }
				{ { 3 2 roll pop true } { cleartomark false } ifelse }
			ifelse
			end
		} bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad /ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup /CMap CTHasResourceStatusBug
						{ CTResourceStatus }
						{ resourcestatus }
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup /CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{ exit }
								{ stop }
							ifelse
							}
						ifelse
						}
						{ pop }
					ifelse
					}
				128 string /CMap resourceforall
				}
			stopped
				{ cleartomark }
			stopped pop
			setglobal
			}
		if
		}
	if
	} bind def
/doc_setup
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mov /moveto load def
		/nfnt /newencodedfont load def
		/mfnt /makefont load def
		/sfnt /setfont load def
		/ufnt /undefinefont load def
		/chp /charpath load def
		/awsh /awidthshow load def
		/wsh /widthshow load def
		/ash /ashow load def
		/sh /show load def
		end
		currentglobal false setglobal
	  userdict /Adobe_CoolType_Data 2 copy known not
		  { 2 copy 10 dict put }
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	} bind def
/doc_trailer
	{
	currentdict Adobe_CoolType_Core eq
		{ end }
	if
	} bind def
/page_setup
	{
	Adobe_CoolType_Core begin
	} bind def
/page_trailer
	{
	end
	} bind def
/unload
	{
	systemdict /languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{ undef }
				{ pop pop }
			ifelse
			}
		if
		}
	if
	} bind def
/ndf
	{
	1 index where
		{ pop pop pop }
		{ dup xcheck { bind } if def }
	ifelse
	} def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where { /globaldict get begin } if
			dup where pop exch get
		/globaldict where { pop end } if
		end
	end
Adobe_CoolType_Core_Defined
	{ /systemfindfont exch def }
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{ pop } ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq { 0 } { dup length } ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index /FID eq
				{ pop pop }
				{ def }
			ifelse
			}
		forall
		dup null eq
			{ pop }
			{ { def } forall }
		ifelse
		currentdict
		end
	exch setglobal
	} bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	} bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index  known
			{ SharedFontDirectory 3 index get /FontReferenced known }
			{ false }
		ifelse
		}
		{
		FontDirectory 3 index known
			{ FontDirectory 3 index get /FontReferenced known }
			{
			SharedFontDirectory 3 index known
				{ SharedFontDirectory 3 index get /FontReferenced known }
				{ false }
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont /FontReferenced get
		2 index dup type /nametype eq
			{findfont}
		if ne
			{ pop false }
		if
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{ 2 copy get 3 index 3 1 roll put }
		for
		pop pop pop
		}
		{
		dup type /nametype eq
		  { findfont }
	  if
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index /FID ne
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type /stringtype eq { cvn } if def dup
			currentdict
			end
		definefont def
		}
	ifelse
	} bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type /dicttype ne
			{ 0 dict }
		if
		currentdict /$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{ def } forall
					{ def } forall
					currentdict
					dup /$Init known
						{ dup /$Init get exec }
					if
					end
				/$Strategy exch def
				}
				{ pop pop pop }
			ifelse
			}
			{ pop pop }
		ifelse
		end
	} bind def
/scff
	{
	$SubstituteFont
		begin
		dup type /stringtype eq
			{ dup length exch }
			{ null }
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{ $sname }
			ifelse def
		end
		{ findfont }
	@Stopped
		{
		dup length 8 add string exch
		1 index 0 (BadFont:) putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{ findfont }
		@Stopped
			{ pop /Courier findfont }
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	} bind def
/isWidthsOnlyFont
	{
	dup /WidthsOnly known
		{ pop pop true }
		{
		dup /FDepVector known
			{ /FDepVector get { isWidthsOnlyFont dup { exit } if } forall }
			{
			dup /FDArray known
				{ /FDArray get { isWidthsOnlyFont dup { exit } if } forall }
				{ pop }
			ifelse
			}
		ifelse
		}
	ifelse
	} bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 4 index def
		/$doSmartSub false def
		end
	3 index
	currentglobal false setglobal exch
	/CompatibleFonts /ProcSet resourcestatus
		{
		pop pop
		/CompatibleFonts /ProcSet findresource
			begin
			dup /CompatibleFont currentexception
			1 index /CompatibleFont true setexception
			1 index /Font resourcestatus
				{
				pop pop
				3 2 roll setglobal
				end
				exch
				dup findfont
				/CompatibleFonts /ProcSet findresource
					begin
					3 1 roll exch /CompatibleFont exch setexception
					end
				}
				{
				3 2 roll setglobal
				1 index exch /CompatibleFont exch setexception
				end
				findfont
				$SubstituteFont /$substituteFound true put
				}
			ifelse
		}
		{ exch setglobal findfont }
	ifelse
	$SubstituteFont
		begin
		$substituteFound
			{
		 false
		 (%%[Using embedded font ) print
		 5 index ?str1 cvs print
		 ( to avoid the font substitution problem noted earlier.]%%\n) print
		 }
			{
			dup /FontName known
				{
				dup /FontName get $fontname eq
				1 index /DistillerFauxFont known not and
				/currentdistillerparams where
					{ pop false 2 index isWidthsOnlyFont not and }
				if
				}
				{ false }
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		exch pop exch pop exch
		2 dict dup /Found 3 index put
		exch findfont exch
		}
		{
		exch exec
		exch dup findfont
		dup /FontType get 3 eq
	  {
		  exch ?str1 cvs
		  dup length 1 sub
		  -1 0
		{
			  exch dup 2 index get 42 eq
			{
				 exch 0 exch getinterval cvn 4 1 roll 3 2 roll pop
				 exit
			  }
			  {exch pop} ifelse
		  }for
		}
		{
		 exch pop
	  } ifelse
		2 dict dup /Downloaded 6 5 roll put
		}
	ifelse
	dup /FontName 4 index put copyfont definefont pop
	} bind def
/?str2 256 string def
/?add
	{
	1 index type /integertype eq
		{ exch true 4 2 }
		{ false 3 1 }
	ifelse
	roll
	1 index findfont
	dup /Widths known
		{
		Adobe_CoolType_Data /AddWidths? true put
		gsave dup 1000 scalefont setfont
		}
	if
	/Downloaded known
		{
		exec
		exch
			{
			exch ?str2 cvs exch
			findfont /Downloaded get 1 dict begin /Downloaded 1 index def ?str1 cvs length
			?str1 1 index 1 add 3 index putinterval
			exch length 1 add 1 index add
			?str1 2 index (*) putinterval
			?str1 0 2 index getinterval cvn findfont 
			?str1 3 index (+) putinterval
			2 dict dup /FontName ?str1 0 6 index getinterval cvn put
			dup /Downloaded Downloaded put end copyfont
			dup /FontName get exch definefont pop pop pop
			}
			{
			pop
			}
		ifelse
		}
		{
		pop
		exch
			{
			findfont
			dup /Found get
			dup length exch ?str1 cvs pop
			?str1 1 index (+) putinterval
			?str1 1 index 1 add 4 index ?str2 cvs putinterval
			?str1 exch 0 exch 5 4 roll ?str2 cvs length 1 add add getinterval cvn
			1 dict exch 1 index exch /FontName exch put copyfont
			dup /FontName get exch definefont pop
			}
			{
			pop
			}
		ifelse
		}
	ifelse
	Adobe_CoolType_Data /AddWidths? get
		{ grestore Adobe_CoolType_Data /AddWidths? false put }
	if
	} bind def
/?sh
	{
	currentfont /Downloaded known { exch } if pop
	} bind def
/?chp
	{
	currentfont /Downloaded known { pop } { false chp } ifelse
	} bind def
/?mv 
	{
	currentfont /Downloaded known { moveto pop pop } { pop pop moveto } ifelse
	} bind def
setpacking
userdict /$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{ get }
			{ pop pop { pop /Courier } bind }
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams /CannotEmbedFontPolicy 2 copy known
			{ get /Error eq }
			{ pop pop false }
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup /WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type /stringtype eq { cvn } if def
								/FontType 3 def
								/FontMatrix [ .001 0 0 .001 0 0 ] def
								/Encoding 256 array dup 0 1 255 { /.notdef put dup } for pop def
								/FontBBox [ 0 0 0 0 ] def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth /y exch def /x exch def
											x y setcharwidth
											$SubstituteFont /$Strategy get /$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									} bind def
								currentdict
								end
							exch setglobal
							} bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup /WMode known
										{ dup /WMode get }
										{ 0 }
									ifelse
									/$WMode exch def
									$fontname exch
									dup /FontName known
										{
										dup /FontName get
										dup type /stringtype eq { cvn } if
										}
										{ /unnamedfont }
									ifelse
									exch
									Adobe_CoolType_Data /InVMDeepCopiedFonts get
									1 index /FontName get known
										{
										pop
										Adobe_CoolType_Data /InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{ $deepcopyfont }
									ifelse
									exch 1 index exch /FontBasedOn exch put
									dup /FontName $fontname dup type /stringtype eq { cvn } if put
									definefont
									Adobe_CoolType_Data /InVMDeepCopiedFonts get
										begin
										dup /FontBasedOn get 1 index def
										end
									} bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{ /y 1000 def }
										{ /x -1000 def 500 120 translate }
									ifelse
									Level2?
										{
										[ /Separation (All) /DeviceCMYK { 0 0 0 1 pop } ]
										setcolorspace
										}
										{ 0 setgray }
									ifelse
									10 setlinewidth
									x .8 mul
									[ 7 3 ]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{ .2 setcolor }
											{ .8 setgray }
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									} bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict /FontName known
											{
											FontName
											dup type /stringtype eq { cvn } if
											}
											{ /unnamedfont }
										ifelse
										def
										/FontName $fontname dup type /stringtype eq { cvn } if def
										/currentdistillerparams where
											{ pop }
											{
											/FontInfo currentdict /FontInfo known
												{ FontInfo null copyfont }
												{ 2 dict }
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[ 1 0 ItalicAngle dup sin exch cos div 1 0 0 ]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									} bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont {} bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type /stringtype eq { cvn } if
						dup /$fontname exch def
						$sname null eq
							{ $str cvs dup length $slen sub $slen getinterval }
							{ pop $sname }
						ifelse
						$fontpat dup 0 (fonts/*) putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont /$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{ /$match exch def exit }
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont /$dstack get
								{
								exch
									{
									1 index eq
										{ pop false }
										{ true }
									ifelse
									}
									{ begin false }
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{ $match (fonts/) anchorsearch pop pop cvn }
							{ /Courier }
						ifelse
						} bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1  [ /Ryumin-Light /HeiseiMin-W3
										  /GothicBBB-Medium /HeiseiKakuGo-W5
										  /HeiseiMaruGo-W4 /Jun101-Light ] def
							/Korea1  [ /HYSMyeongJo-Medium /HYGoThic-Medium ] def
							/GB1	  [ /STSong-Light /STHeiti-Regular ] def
							/CNS1	 [ /MKai-Medium /MHei-Medium ] def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup /FontType get 0 eq
							{
							1 dict dup /FontName /copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup /FontName /copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{ $Strategies /$Type3Underprint get exec }
						ifelse
						} bind def
					/$buildfontname
						{
						dup /CIDFont findresource /CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index (-) putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy (-) putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{ pop pop 3 2 roll putinterval cvn /$cmapname exch def }
							{ pop pop pop pop pop }
						ifelse
						length
						$str 1 index (-) putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						} bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{ get }
								{ pop pop [] }
							ifelse
							}
							{ pop pop [] }
						ifelse
						false exch
							{
							dup /CIDFont resourcestatus
								{
								pop pop
								save
								1 index /CIDFont findresource
								dup /WidthsOnly known
									{ dup /WidthsOnly get }
									{ false }
								ifelse
								exch pop
								exch restore
									{ pop }
									{ exch pop true exit }
								ifelse
								}
								{ pop }
							ifelse
							}
						forall
							{ $str cvs $buildfontname }
							{
							false (*)
								{
								save exch
								dup /CIDFont findresource
								dup /WidthsOnly known
									{ dup /WidthsOnly get not }
									{ true }
								ifelse
								exch /CIDSystemInfo get
								dup /Registry get Registry eq
								exch /Ordering get Ordering eq and and
									{ exch restore exch pop true exit }
									{ pop restore }
								ifelse
								}
							$str /CIDFont resourceforall
								{ $buildfontname }
								{ $fontname $findfontByEnum }
							ifelse
							}
						ifelse
						} bind def
					end
				end
				currentdict /$error known currentdict /languagelevel known and dup
					{ pop $error /SubstituteFont known }
				if
				dup
					{ $error }
					{ Adobe_CoolType_Core }
				ifelse
				begin
					{
					/SubstituteFont
					/CMap /Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{ dup $str cvs dup length $slen sub $slen getinterval cvn }
									{ $sname }
								ifelse
								Adobe_CoolType_Data /InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{ exch pop true exit }
												{ pop }
											ifelse
											}
											{
											FontDirectory 1 index known
												{ exch pop true exit }
												{
												GlobalFontDirectory 1 index known
													{ exch pop true exit }
													{ pop }
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{ pop pop false }
								ifelse
									{
									exch pop exch pop
									}
									{
									dup /CMap resourcestatus
										{
										pop pop
										dup /$cmapname exch def
										/CMap findresource /CIDSystemInfo get { def } forall
										$findfontByROS
										}
										{
										128 string cvs
										dup (-) search
											{
											3 1 roll search
												{
												3 1 roll pop
													{ dup cvi }
												stopped
													{ pop pop pop pop pop $findfontByEnum }
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup /CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup /$cmapname exch def
															/CMap findresource /CIDSystemInfo get { def } forall
															$findfontByROS
															true exit
															}
															{ pop }
														ifelse
														}
													for
													dup type /booleantype eq
														{ pop }
														{ pop pop pop $findfontByEnum }
													ifelse
													}
												ifelse
												}
												{ pop pop pop $findfontByEnum }
											ifelse
											}
											{ pop pop $findfontByEnum }
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{ //SubstituteFont exec }
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{ $findfontByEnum }
								{ //SubstituteFont exec }
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core /scfindfont /systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup /FontName known
								{ dup /FontName get dup 3 index ne }
								{ /noname true }
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def /$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{ 1 index /FID eq { pop pop } { def } ifelse }
										forall
										currentdict
										end
									definefont
									dup /FontName known { dup /FontName get } { null } ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using ) print
										dup /FontName known
											{ dup /FontName get } { (unspecified font) }
										ifelse
										$str cvs print (.\n) print
										}
									if
									}
									{ exch pop }
								ifelse
								}
								{ exch pop }
							ifelse
							end
						} bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core /findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type /stringtype ne { $str cvs } if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{ dup $inVMIndex $AddInVMFont }
						if
						$doSmartSub
							{
							currentdict /$Strategy known
								{ $Strategy /$BuildFont get exec }
							if
							}
						if
						}
					if
					end
				} bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch /FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data /InVMFontsByCMap get exch
		$DictAdd
		}
		{ pop pop pop }
	ifelse
	} bind def
/$DictAdd
	{
	2 copy known not
		{ 2 copy 4 index length dict put }
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get { forall } def
				2 copy currentdict put
				end
			}
			{ pop }
		ifelse
		}
	if
	get
		begin
			{ def }
		forall
		end
	} bind def
end
end
%%EndResource
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.21 0
%%Copyright: Copyright 1987-2005 Adobe Systems Incorporated.
%%Version: 1.21 0
systemdict /languagelevel known dup
	{ currentglobal false setglobal }
	{ false }
ifelse
exch
userdict /Adobe_CoolType_Utility 2 copy known
	{ 2 copy get dup maxlength 27 add dict copy }
	{ 27 dict }
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		  <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A> def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch /eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{ globaldict begin currentglobal true setglobal }
if
	/ct_AddStdCIDMap
		ct_Level2?
			{ {
				mark
				Adobe_CoolType_Utility /@recognizeCIDFont currentdict put
					 {
					 ((Hex) 57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77) 0 () /SubFileDecode filter cvx exec
					 }
				stopped
					 {
					 cleartomark
					 Adobe_CoolType_Utility /@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						  {
						  2 copy get 3 index eq
								{ 1 index length exch sub 1 sub { end } repeat exit }
								{ pop }
						  ifelse
						  }
					 for
					 pop pop
					 Adobe_CoolType_Utility /@eexecStartData get eexec
					 }
					 { cleartomark }
				ifelse
			} }
			{ {
				Adobe_CoolType_Utility /@eexecStartData get eexec
			} }
		ifelse bind def
userdict /cid_extensions known
dup { cid_extensions /cid_UpdateDB known and } if
	 {
	 cid_extensions
	 begin
	 /cid_GetCIDSystemInfo
		 {
		 1 index type /stringtype eq
			 { exch cvn exch }
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				 {
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					 {
					 1 index load
					 3 index get
					 dup null eq
						  { pop pop cid_UpdateDB }
						  {
						  exch
						  1 index /Created get eq
							  { exch pop exch pop }
							  { pop cid_UpdateDB }
						  ifelse
						  }
					 ifelse
					 }
					 { pop cid_UpdateDB }
				 ifelse
				 }
				 { cid_UpdateDB }
			 ifelse
			 end
		 } bind def
	 end
	 }
if
ct_Level2?
	{ end setglobal }
if
	/ct_UseNativeCapability?  systemdict /composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring () def
		/usewidths? true def
		end def
	ct_Level2? { setglobal } { pop } ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict /languagelevel known
				{ pop /CIDFont findresource /GlyphDirectory get }
				{
				1 index /CIDFont findresource /GlyphDirectory
				get dup type /dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			} def
		/+
			{
			systemdict /languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{ 1 dict begin }
			ifelse
			/$ exch def
			systemdict /languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			? { $ begin } if
			} def
		/? { $ type /dicttype eq } def
		/| {
			userdict /Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data /AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					  begin
						AddWidths?
								{
								Adobe_CoolType_Data /CC 3 index put
								? { def } { $ 3 1 roll put } ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont /Widths get exch CC exch put
								}
								{ ? { def } { $ 3 1 roll put } ifelse }
							ifelse
					end
				end
				}
				{ ? { def } { $ 3 1 roll put } ifelse }	ifelse
				}
				{ ? { def } { $ 3 1 roll put } ifelse }
			ifelse
			} def
		/!
			{
			? { end } if
			systemdict /languagelevel known
				{ gvm setglobal }
			if
			end
			} def
		/: { string currentfile exch readstring pop } executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		 /c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		 /c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		 /c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		 /c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		 /c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		 /c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		 /c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		 /c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		 /cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		 /cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		 /cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		 /cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		 /cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx [.001 0 0 .001 0 0] def
		/ct_1000Mtx [1000 0 0 1000 0 0] def
		/ct_raise {exch cvx exch errordict exch get exec stop} bind def
		/ct_reraise
			{ cvx $error /errorname get (Error: ) print dup (						  ) cvs print
					errordict exch get exec stop
			} bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			} bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility /ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{ dup string /dst_string exch def }
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex  get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string  dst_index 2 index putinterval
						length dst_index add /dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string  dst_index 2 index putinterval
						pop dup dst_index add /dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							  { arrayIndex get }
							  {
							  pop
							  exit
							  }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			} bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{ /unknowninstancename /Category resourcestatus }
			stopped
				{ cleartomark setglobal true }
				{ cleartomark currentglobal not exch setglobal }
			ifelse
				{
					{
					mark 3 1 roll /Category findresource
						begin
						ct_Vars /vm currentglobal put
						({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec
							{ cleartomark false }
							{ { 3 2 roll pop true } { cleartomark false } ifelse }
						ifelse
						ct_Vars /vm get setglobal
						end
					}
				}
				{ { resourcestatus } }
			ifelse bind def
			/CIDFont /Category ct_resourcestatus
				{ pop pop }
				{
				currentglobal  true setglobal
				/Generic /Category findresource
				dup length dict copy
				dup /InstanceType /dicttype put
				/CIDFont exch /Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit /ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				  /Registry (Adobe) def
				  /Ordering (Identity) def
				  /Supplement 0 def
				end def
				/CMapName /Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000> <FFFF>
				endcodespacerange
				1 begincidrange
				<0000> <FFFF> 0
				endcidrange
				endcmap
				CMapName currentdict /CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont  10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{ pop pop /defineresource /undefined ct_raise }
				ifelse
				} bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{ get 3 1 roll pop pop}
						{ pop pop /findresource /undefinedresource ct_raise }
					ifelse
					}
					{ pop pop /findresource /undefined ct_raise }
				ifelse
				} bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{ pop pop /findresource /undefined ct_raise }
				ifelse
				} bind def
			/ct_resourcestatus /resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup (Binary) eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{ cid_BYTE_COUNT () /SubFileDecode filter }
							stopped
								{ pop pop pop }
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup (Hex) eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{ null exch /ASCIIHexDecode filter /readstring }
							stopped
								{ pop exch pop (>) exch /readhexstring }
							if
							}
							{ (>) exch /readhexstring }
						ifelse
						load
						exit
						}
					if
					/StartData /typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch /GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop /readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				} bind def
			/StartData
				{
				mark
					{
					currentdict
					dup /FDArray get 0 get /FontMatrix get
					0 get 0.001 eq
						{
						dup /CDevProc known not
							{
							/CDevProc 1183615869 internaldict /stdCDevProc 2 copy known
								{ get }
								{
								pop pop
								{ pop pop pop pop pop 0 -1000 7 index 2 div 880 }
								}
							ifelse
							def
							}
						if
						}
						{
						 /CDevProc
							 {
							 pop pop pop pop pop
							 0
							 1 cid_temp /cid_CIDFONT get
							 /FDArray get 0 get
							 /FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							 } def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup /cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup /SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup /SubrMapOffset undef
										dup /SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{ pop }
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict /CIDFont defineresource pop
					end end
					}
				stopped
					{ cleartomark /StartData ct_reraise }
				if
				} bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit /ProcSet ct_resourcestatus
				{ true }
				{ /CIDInitC /ProcSet ct_resourcestatus }
			ifelse
				{
				pop pop
				/CIDInit /ProcSet findresource
				ct_UseNativeCapability?
					{ pop null }
					{ /CIDInit ct_CIDInit /ProcSet defineresource pop }
				ifelse
				}
				{ /CIDInit ct_CIDInit /ProcSet defineresource pop null }
			ifelse
			ct_Vars exch /ct_oldCIDInit exch put
			} bind def
		/ct_restoreCIDInit
			{
			ct_Vars /ct_oldCIDInit get dup null ne
				{ /CIDInit exch /ProcSet defineresource pop }
				{ pop }
			ifelse
			} bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility /ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{ pop 0 }
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{ get }
								{ pop pop nullstring }
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{ 0 FDBytes ct_cvnsi }
									{ pop 0 }
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{ /charstring nullstring def exit }
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			} def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			} def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont /Widths get cid
					2 copy known
						{ get exch pop aload pop }
						{ pop pop stringwidth }
					ifelse
					}
					{ stringwidth }
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			} def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{ get }
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup /FontMatrix 2 copy known
						{ get }
						{ pop pop ct_defaultFontMtx }
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont /Widths get def
					/CharStrings 1 dict dup /.notdef
						<d841272cf18f54fc13> dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup /CharStrings get 1 index /Encoding get
			ct_dfCharCode get charstring put
			rootfont /WMode 2 copy known
				{ get }
				{ pop pop 0 }
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ ct_str1 show }
			ifelse
			} def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup /FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ ct_1000Mtx matrix concatmatrix concat }
				{ pop }
			ifelse
			/Private get
			Adobe_CoolType_Utility /ct_Level2? get not
				{
				ct_dfDict /Private
				3 -1 roll
					{ put }
				1183615869 internaldict /superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility /ct_Level2? get
				{ 1 index }
				{ 3 index /Private get mark 6 1 roll }
			ifelse
			dup /RunInt known
				{ /RunInt get }
				{ pop /CCRun }
			ifelse
			get exec
			Adobe_CoolType_Utility /ct_Level2? get not
				{ cleartomark }
			if
			} bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility /ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{ stop }
			if
			end
			end
			end
			end
			} bind def
		/BaseFontNameStr (BF00) def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix  [0.001 0 0 0.001 0 0] def
			/FontBBox  [-250 -250 1250 1250] def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix  [0.001 0 0 0.001 0 0] def
			/FontBBox  [-250 -250 1250 1250] def
			/Encoding ct_cHexEncoding def
			/BuildChar /ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString /ct_Type3ShowCharString load def
				/ct_dfSetCacheProc /ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup /lenIV 4 put def
				/CharStrings 1 dict dup /.notdef <d841272cf18f54fc13> put def
				/PaintType 0 def
				/ct_ShowCharString /ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{ exit }
				if
				}
			for
			exch pop exch pop
			} bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch /WMode exch def
				exch /FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup /FontMatrix known
				{ dup /FontMatrix get /FontMatrix exch def }
				{ /FontMatrix matrix def }
			ifelse
				/bfCount 1 index /CIDCount get 256 idiv 1 add
					dup 256 gt { pop 256} if def
				/Encoding
					256 array 0 1 bfCount 1 sub { 2 copy dup put pop } for
					bfCount 1 255 { 2 copy bfCount put pop } for
					def
				/FDepVector bfCount dup 256 lt { 1 add } if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont /FontBBox known
						{ CIDFont /FontBBox get /FontBBox exch def }
					if
					CIDFont /CDevProc known
						{ CIDFont /CDevProc get /CDevProc exch def }
					if
					currentdict
					end
				BaseFontNameStr 3 (0) putinterval
				0 1 bfCount dup 256 eq { 1 sub } if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup /CIDFirstByte exch 256 mul def
						FontType 3 eq
							{ /ct_FDDict 2 dict def }
						if
						currentdict
						end
					1 index  16
					BaseFontNameStr  2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{ /Widths 1 index /CIDFont get /GlyphDirectory get length dict def }
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont /Widths get
						begin
						exch /CIDFont get /GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{ exch pop }
			ifelse
			} bind def
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{
				2 index /CMap ct_resourcestatus
					{ pop pop exch pop }
					{
					/CIDInit /ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch /WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry (Adobe) def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-) search
									{
									pop pop
									(-) search
										{
										dup length string copy
										exch pop exch pop
										}
										{ pop (Identity)}
									ifelse
									}
									{ pop  (Identity)  }
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000> <FFFF>
							endcodespacerange
							1 begincidrange
							<0000> <FFFF> 0
							endcidrange
							endcmap
							CMapName currentdict /CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get /CIDFont findresource
				ct_makeocf
				}
			ifelse
			} bind def
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index /CMap ct_resourcestatus
					{ pop pop }
					{
					/CIDInit /ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry (Adobe) def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-) search
							{
							pop pop
							(-) search
								{ dup length string copy exch pop exch pop }
								{ pop (Identity) }
							ifelse
							}
							{ pop (Identity) }
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000> <FFFF>
					endcodespacerange
					1 begincidrange
					<0000> <FFFF> 0
					endcidrange
					endcmap
					CMapName currentdict /CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get /CIDFont findresource
				ct_makeocf
				}
			ifelse
			} bind def
		currentdict readonly pop
		end
	end
%%EndResource
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict /ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
  version
  cvi
  2015
  ge
} bind def
/AllocGlyphStorage
{
  Is2015?
  {	
		pop
  } 
  { 
		{string} forall
  } ifelse
} bind def
/Type42DictBegin
{
	25 dict begin
  /FontName exch def
  /CharStrings 256 dict 
	begin
		  /.notdef 0 def
		  currentdict 
	end def
  /Encoding exch def
  /PaintType 0 def
  /FontType 42 def
  /FontMatrix [1 0 0 1 0 0] def
  4 array  astore cvx /FontBBox exch def
  /sfnts
} bind def
/Type42DictEnd  
{
	 currentdict dup /FontName get exch definefont end
	ct_T42Dict exch
	dup /FontName get exch put
} bind def
/RD {string currentfile exch readstring pop} executeonly def
/PrepFor2015
{
	Is2015?
	{		  
		 /GlyphDirectory 
		 16
		 dict def
		 sfnts 0 get
		 dup
		 2 index
		 (glyx)
		 putinterval
		 2 index  
		 (locx)
		 putinterval
		 pop
		 pop
	}
	{
		 pop
		 pop
	} ifelse			
} bind def
/AddT42Char
{
	Is2015?
	{
		/GlyphDirectory get 
		begin
		def
		end
		pop
		pop
	}
	{
		/sfnts get
		4 index
		get
		3 index
	  2 index
		putinterval
		pop
		pop
		pop
		pop
	} ifelse
} bind def
/T0AddT42Mtx2
{
	/CIDFont findresource /Metrics2 get begin def end
}bind def
end
%%EndResource
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Image 75 dict dup begin put
/Adobe_AGM_Image_Id /Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf () def
/AGMIMG_ybuf () def
/AGMIMG_kbuf () def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/doc_setup
{ 
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage /colorimage ldf
	}if
	end
	end
}def
/page_setup
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists {/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				 }ifelse
			 }ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode [ Decode 1 get Decode 0 get] def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode [1 1] def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub} currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{ pop 1 } currenttransfer addprocs settransfer
		}def
	}ifelse
	/img /imageormask ldf
	/sepimg /sep_imageormask ldf
	/devnimg /devn_imageormask ldf
	/idximg /indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/page_trailer
{
	end
}def
/doc_trailer
{
}def
/AGMIMG_flushfilters
{
	dup type /arraytype ne
		{1 array astore}if
	aload length
		{
		dup type /filetype eq
			{
			dup status 1 index currentfile ne and
				{dup flushfile closefile}
				{pop}
			ifelse
			}{pop}ifelse
		} repeat
}def
/imageormask_sys
{
	begin
		save mark
		level2{
			currentdict
			Operator /imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask {
					level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator /imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix /DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix /DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict /_Filters known {_Filters AGMIMG_flushfilters} if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint {
		0 get dup type /nametype eq {
			dup /DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			} forall
			not
		} ifelse
	}{
		pop false
	}ifelse
}def
/process_mask_L3
{
	dup begin
	/ImageType 1 def
	end
	4 dict begin
		/DataDict exch def
		/ImageType 3 def
		/InterleaveType 3 def
		/MaskDict 9 dict begin
			/ImageType 1 def
			/Width DataDict dup /MaskWidth known {/MaskWidth}{/Width} ifelse get def
			/Height DataDict dup /MaskHeight known {/MaskHeight}{/Height} ifelse get def
			/ImageMatrix [Width 0 0 Height neg 0 Height] def
			/NComponents 1 def
			/BitsPerComponent 1 def
			/Decode [0 1] def
			/DataSource AGMIMG_maskSource def
		currentdict end def
	currentdict end
}def
/use_mask
{
	dup type /dicttype eq
	{
		dup /Mask known	{
			dup /Mask get {
				level3
				{true}
				{
					dup /MaskWidth known {dup /MaskWidth get 1 index /Width get eq}{true}ifelse exch
					dup /MaskHeight known {dup /MaskHeight get 1 index /Height get eq}{true}ifelse
					3 -1 roll and
				} ifelse
			}
			{false} ifelse
		}
		{false} ifelse
	}
	{false} ifelse
}def
/make_line_source
{
	begin
	MultipleDataSources {
		[
		Decode length 2 div cvi {Width string} repeat
		]
	}{
		Width Decode length 2 div mul cvi string
	}ifelse
	end
}def
/datasource_to_str
{
	exch dup type
	dup /filetype eq {
		pop exch readstring
	}{
		/arraytype eq {
			exec exch copy
		}{
			pop
		}ifelse
	}ifelse
	pop
}def
/masked_image_simulation
{
	3 dict begin
	dup make_line_source /line_source xdf
	/mask_source AGMIMG_maskSource /LZWDecode filter def
	dup /Width get 8 div ceiling cvi string /mask_str xdf
	begin
	gsave
	0 1 translate 1 -1 Height div scale
	1 1 Height {
		pop
		gsave
		MultipleDataSources {
			0 1 DataSource length 1 sub {
				dup DataSource exch get
				exch line_source exch get
				datasource_to_str
			} for
		}{
			DataSource line_source datasource_to_str
		} ifelse
		<<
			/PatternType 1
			/PaintProc [
				/pop cvx
				<<
					/ImageType 1
					/Width Width
					/Height 1
					/ImageMatrix Width 1.0 sub 1 matrix scale 0.5 0 matrix translate matrix concatmatrix
					/MultipleDataSources MultipleDataSources
					/DataSource line_source
					/BitsPerComponent BitsPerComponent
					/Decode Decode
				>>
				/image cvx
			] cvx
			/BBox [0 0 Width 1]
			/XStep Width
			/YStep 1
			/PaintType 1
			/TilingType 2
		>>
		matrix makepattern set_pattern
		<<
			/ImageType 1
			/Width Width
			/Height 1
			/ImageMatrix Width 1 matrix scale
			/MultipleDataSources false
			/DataSource mask_source mask_str readstring pop
			/BitsPerComponent 1
			/Decode [0 1]
		>>
		imagemask
		grestore
		0 1 translate
	} for
	grestore
	end
	end
}def
/imageormask
{
	begin
		SkipImageProc {
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator /imagemask eq DeviceN_PS2 not and {
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get /DeviceGray eq and{
						[/Separation /Black /DeviceGray {}] setcolorspace
						/Decode [ Decode 1 get Decode 0 get ] def
					}if
					use_mask {
						level3 {process_mask_L3 image}{masked_image_simulation}ifelse
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not {
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file {
									Names {
										dup (None) ne {
											[/Separation 3 -1 roll /DeviceGray {1 exch sub}] setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq {true setoverprint} if
											/names_index names_index 1 add def
										}{
											pop
										} ifelse
									} forall
									close_image_file
								} if
								grestore
								end
							}{
								Operator /imagemask eq {
									imagemask
								}{
									image
								} ifelse
							} ifelse
						}{
							Operator /imagemask eq {
								imagemask
							}{
								image
							} ifelse
						} ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator /imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix /DataSource load
					/Adobe_AGM_OnHost_Seps where {
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator /colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource [
											DataSource 0 get /exec cvx
											DataSource 1 get /exec cvx
											DataSource 2 get /exec cvx
											DataSource 3 get /exec cvx
											/AGMCORE_get_ink_data cvx
										] cvx def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0 () /SubFileDecode filter def
									}ifelse
									/Decode [ Decode 0 get Decode 1 get ] def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator /image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
  			 							1 AGMCORE_&setgray
  			 							currentdict imageormask_sys
  			 						}{
  			 							currentdict ignoreimagedata
  			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator /image eq{
							AGMCORE_host_sep{
								/DoImage true def
								HostSepColorImage{
									invert_image_samples
								}{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}ifelse
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys} if
							}{
								use_mask {
									level3 {process_mask_L3 image}{masked_image_simulation}ifelse
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict /_Filters known {_Filters AGMIMG_flushfilters} if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	SkipImageProc {
		currentdict consumeimagedata
	}
	{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get /DeviceCMYK eq and
		currentdict/Components known and 
		Name () ne and 
		Name (All) ne and 
		Operator /image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load /exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			} /exec cvx
			] cvx bind
			MappedCSA 0 get /DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
					AGMCORE_avoid_L2_sep_space not currentcolorspace 0 get /Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{ 
					currentdict
					Operator /imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name (All) ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator /imagemask eq{
 											/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									[ /Separation Name [/DeviceGray]
	 									{ 
	 										sep_colorspace_proc AGMCORE_get_ink_data
											1 exch sub
	 									} bind
										] AGMCORE_&setcolorspace
										/sep_tint AGMCORE_gget AGMCORE_&setcolor
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator /imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name (All) eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					currentcolorspace 0 get /Separation ne{
						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentoverprint 
					MappedCSA 0 get /DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					Name inRip_spot_has_ink not and 
					Name (All) ne and {
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if
	end
	end
}def
/decode_image_sample
{
	4 1 roll exch dup 5 1 roll
	sub 2 4 -1 roll exp 1 sub div mul add
} bdf
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
} bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub {
			dup currentdict /dataSource get /exch cvx /get cvx /exec cvx
			/exch cvx names_index /ne cvx [ /pop cvx ] cvx /if cvx
		} for
	] cvx bind
	end
} bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources {origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0 () /SubFileDecode filter
				BitsPerComponent 8 idiv string /readstring cvx /pop cvx /putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0 () /SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv {DataSource /read cvx /not cvx{0}/if cvx /mul cvx}repeat /mul cvx /add cvx
			}for
		/convProc load /exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2 /add cvx /index cvx
			3 1 /roll cvx /exch cvx 255 /mul cvx /cvi cvx /put cvx
			}for
	]bind cvx 0 () /SubFileDecode filter
	end
} bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs [ 3 -1 roll begin
		currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt {1 add 2 div cvi}{exit}ifelse
			} loop
			string
		} repeat
		end ] def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	SkipImageProc {
		currentdict consumeimagedata
	}
	{
		save mark 
		AGMCORE_producing_seps not {
			level3 not {
				Operator /imagemask ne {
					/DataSource [ [
						DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse
						colorSpaceElemCnt /devicen_colorspace_dict AGMCORE_gget /TintTransform get 
						devn_alt_datasource 1 /string cvx /readstring cvx /pop cvx] cvx colorSpaceElemCnt 1 sub{dup}repeat] def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def
				} if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process {
					CSA get_csa_by_name 0 get /DeviceCMYK eq {
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse
							4 /devicen_colorspace_dict AGMCORE_gget /TintTransform get 
							devn_alt_datasource
						filter_cmyk 0 () /SubFileDecode filter def
						/MultipleDataSources false def
						/Decode [1 0] def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate {
							/DataSource
								DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse
								CSA get_csa_by_name 0 get /DeviceRGB eq{3}{1}ifelse /devicen_colorspace_dict AGMCORE_gget /TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def
				 			currentdict imageormask_sys
				 		}
						{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						} ifelse
 					} ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget /names_index known {
	 					Operator/imagemask ne{
	 						MultipleDataSources {
		 						/DataSource [ DataSource devn_sep_datasource /exec cvx ] cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource /DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						} ifelse
							invert_image_samples
	 					} if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{ 			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN [
				AGMIMG_c 0 ne {/Cyan} if
				AGMIMG_m 0 ne {/Magenta} if
				AGMIMG_y 0 ne {/Yellow} if
				AGMIMG_k 0 ne {/Black} if
				] /DeviceCMYK {}] setcolorspace
				AGMIMG_c 0 ne {AGMIMG_c} if
				AGMIMG_m 0 ne {AGMIMG_m} if
				AGMIMG_y 0 ne {AGMIMG_y} if
				AGMIMG_k 0 ne {AGMIMG_k} if
				setcolor			
			}{	
				/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def
				[/Indexed 				
					[
						/DeviceN [
							AGMIMG_c 0 ne {/Cyan} if
							AGMIMG_m 0 ne {/Magenta} if
							AGMIMG_y 0 ne {/Yellow} if
							AGMIMG_k 0 ne {/Black} if
						] 
						/DeviceCMYK {
							AGMIMG_k 0 eq {0} if
							AGMIMG_y 0 eq {0 exch} if
							AGMIMG_m 0 eq {0 3 1 roll} if
							AGMIMG_c 0 eq {0 4 1 roll} if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				] setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation /Black /DeviceGray {}] setcolorspace
			gsave
			/Black
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 1 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Yellow /DeviceGray {}] setcolorspace
			gsave
			/Yellow
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 2 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Magenta /DeviceGray {}] setcolorspace
			gsave
			/Magenta
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 3 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Cyan /DeviceGray {}] setcolorspace
			gsave
			/Cyan 
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		} if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
} def
/indexed_imageormask
{
	begin
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup /CSA known {
					/CSA get get_csa_by_name
				}{
					/Names get
				} ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN {
					/devicen_colorspace_dict AGMCORE_gget /names_index known {
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					} ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator /imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN {
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget begin
					CSA get_csa_by_name 0 get /DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and {
						[/Indexed [/DeviceN [/Cyan /Magenta /Yellow /Black] /DeviceCMYK {}] HiVal Lookup]
						setcolorspace
					} if
					end
				} ifelse
				imageormask
				Indexed_DeviceN {
					end
				} if
			}{ 
				Operator /imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not {
			currentcolorspace 
			dup 1 /DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		} if
		currentdict 
		Operator /imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask {
				level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
  /OPIimage
  {
  	dup type /dicttype ne{
  		10 dict begin
  			/DataSource xdf
  			/ImageMatrix xdf
  			/BitsPerComponent xdf
  			/Height xdf
  			/Width xdf
  			/ImageType 1 def
  			/Decode [0 1 def]
  			currentdict
  		end
  	}if
  	dup begin
  		/NComponents 1 cdndf
  		/MultipleDataSources false cdndf
  		/SkipImageProc {false} cdndf
  		/HostSepColorImage false cdndf
  		/Decode [
  				0 
  				currentcolorspace 0 get /Indexed eq{
  					2 BitsPerComponent exp 1 sub
  				}{
  					1
  				}ifelse
  		] cdndf
  		/Operator /image cdndf
  	end
  	/sep_colorspace_dict AGMCORE_gget null eq{
  		imageormask
  	}{
  		gsave
  		dup begin invert_image_samples end
  		sep_imageormask
  		grestore
  	}ifelse
  }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter /WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0 (%EndMask) /SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not {exit} if
	}loop
	WriteFilter closefile
	end
}def
/cachemask_level3
{
	currentfile
	<<
		/Filter [ /SubFileDecode /ASCII85Decode /RunLengthDecode ]
		/DecodeParms [ << /EODCount 0 /EODString (%EndMask) >> null null ]
		/Intent 1
	>>
	/ReusableStreamDecode filter
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type /dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode [/customcolor_tint AGMCORE_gget 0] def
				/Operator /image def
				/HostSepColorImage false def
				/SkipImageProc {false} def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA [ /DeviceCMYK ] 
			/TintMethod /Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components [ AGMIMG_colorAry aload pop pop ] 
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage /customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			AGMIMG_&customcolorimage
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt /AGMIMG_xSign? exch def /AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch
		AGMIMG_xSign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch
		itransform /AGMIMG_llY exch def /AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch
		AGMIMG_xSign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch
		itransform /AGMIMG_urY exch def /AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub  AGMIMG_llX AGMIMG_llY] concat
	}{
	}ifelse
	end
} def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					} if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf} true 4 colorimage	
		end
	} def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				} currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get /DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub} currenttransfer addprocs settransfer
						currentdict imageormask
					}{ 
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub} exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get /DeviceGray eq {
						{255 mul round cvi ColorLookup exch get 0 get} currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get /DeviceCMYK eq {
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub} exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{ 
							currentcolortransfer
							{pop 1} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get} exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{ 
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div} currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get /DeviceGray eq {
					{HiVal mul round cvi Lookup exch get HiVal div} currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get /DeviceCMYK eq {
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{ 
						currentcolortransfer
						{pop 1} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div} exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/doc_setup get exec
Adobe_CoolType_Core/doc_setup get exec
Adobe_AGM_Image/doc_setup get exec
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
/currentdistillerparams where
{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse
{ userdict /AI11_PDFMark5 /cleartomark load put
userdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}
{ userdict /AI11_PDFMark5 /pdfmark load put
userdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse
[/NamespacePush AI11_PDFMark5
[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5
[{ai_metadata_stream_123}
currentfile 0 (%  &&end XMP packet marker&&)
/SubFileDecode filter AI11_ReadMetadata_PDFMark5
<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="3.1.1-111">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS2</xap:CreatorTool>
         <xap:CreateDate>2011-12-20T11:30:43Z</xap:CreateDate>
         <xap:ModifyDate>2011-12-20T11:30:43Z</xap:ModifyDate>
         <xap:MetadataDate>2011-12-20T11:30:43Z</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>252</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEB9AH0AAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAB9AAAAAEA&#xA;AQH0AAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgA/AEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4qwX8zrtYW0pGuHjRm&#xA;meeIl1txCvpiS4nMV1ZScbcPyovqfCWbh8PJVUuuFbUPL/k9mEmpGTm3K7i9RnHpmjMDFqp4+Dks&#xA;eNCZTXkVWY23lXy80CNc6Fp0U5+3HFDFIgNeztFGT/wIxVqz8k+UrSzgtU0izdLeNIld7eFnIRQo&#xA;LHjudt8Vc3knyk15FdHSLMPFHJEqC3h4ESsjEkceo9IU+nFVb/CflX/qzWP/AEjQ/wDNOKqNn5J8&#xA;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&#xA;dirsVdirsVdir//Z</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/">
         <xapMM:DocumentID>uuid:37092500FE2AE1119908EA96D739CF9F</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:38092500FE2AE1119908EA96D739CF9F</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
         </xapMM:DerivedFrom>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>
%  &&end XMP packet marker&&
[{ai_metadata_stream_123}
<</Type /Metadata /Subtype /XML>>
/PUT AI11_PDFMark5
[/Document
1 dict begin /Metadata {ai_metadata_stream_123} def
currentdict end /BDC AI11_PDFMark5
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
Adobe_AGM_Utils begin
Adobe_AGM_Core/page_setup get exec
Adobe_AGM_Core/capture_currentpagedevice get exec
Adobe_CoolType_Core/page_setup get exec
Adobe_AGM_Image/page_setup get exec
%%EndPageSetup
Adobe_AGM_Core/AGMCORE_save save ddf
1 -1 scale 0 -545.172 translate
[1 0 0 1 0 0 ]  concat
% page clip
gsave
newpath
gsave % PSGState
0 0 mo
0 545.172 li
553.813 545.172 li
553.813 0 li
cp
clp
[1 0 0 1 0 0 ] concat
1.333 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
45.5464 102.187 mo
553.147 102.187 li
553.147 .666504 li
45.5464 .666504 li
45.5464 102.187 li
553.147 102.187 li
45.5464 102.187 mo
553.147 102.187 li
45.5464 102.187 mo
45.5464 97.3867 li
70.9868 102.187 mo
70.9868 97.3867 li
96.1865 102.187 mo
96.1865 97.3867 li
121.626 102.187 mo
121.626 97.3867 li
147.066 102.187 mo
147.066 92.3467 li
172.507 102.187 mo
172.507 97.3867 li
197.707 102.187 mo
197.707 97.3867 li
223.146 102.187 mo
223.146 97.3867 li
248.586 102.187 mo
248.586 97.3867 li
274.027 102.187 mo
274.027 92.3467 li
299.227 102.187 mo
299.227 97.3867 li
324.667 102.187 mo
324.667 97.3867 li
350.107 102.187 mo
350.107 97.3867 li
375.546 102.187 mo
375.546 97.3867 li
400.747 102.187 mo
400.747 92.3467 li
426.187 102.187 mo
426.187 97.3867 li
451.626 102.187 mo
451.626 97.3867 li
477.067 102.187 mo
477.067 97.3867 li
502.267 102.187 mo
502.267 97.3867 li
527.707 102.187 mo
527.707 92.3467 li
553.147 102.187 mo
553.147 97.3867 li
45.5464 .666504 mo
553.147 .666504 li
45.5464 .666504 mo
45.5464 5.70654 li
70.9868 .666504 mo
70.9868 5.70654 li
96.1865 .666504 mo
96.1865 5.70654 li
121.626 .666504 mo
121.626 5.70654 li
147.066 .666504 mo
147.066 10.5068 li
172.507 .666504 mo
172.507 5.70654 li
197.707 .666504 mo
197.707 5.70654 li
223.146 .666504 mo
223.146 5.70654 li
248.586 .666504 mo
248.586 5.70654 li
274.027 .666504 mo
274.027 10.5068 li
299.227 .666504 mo
299.227 5.70654 li
324.667 .666504 mo
324.667 5.70654 li
350.107 .666504 mo
350.107 5.70654 li
375.546 .666504 mo
375.546 5.70654 li
400.747 .666504 mo
400.747 10.5068 li
426.187 .666504 mo
426.187 5.70654 li
451.626 .666504 mo
451.626 5.70654 li
477.067 .666504 mo
477.067 5.70654 li
502.267 .666504 mo
502.267 5.70654 li
527.707 .666504 mo
527.707 10.5068 li
553.147 .666504 mo
553.147 5.70654 li
45.5464 102.187 mo
45.5464 .666504 li
45.5464 102.187 mo
55.3867 102.187 li
27.3066 102.667 mo
27.7866 104.107 li
29.2266 105.067 li
31.6265 105.546 li
32.8267 105.546 li
35.2266 105.067 li
36.6665 104.107 li
37.1465 102.667 li
37.1465 101.707 li
36.6665 100.267 li
35.2266 99.5464 li
32.8267 99.0669 li
31.6265 99.0669 li
29.2266 99.5464 li
27.7866 100.267 li
27.3066 101.707 li
27.3066 102.667 li
27.7866 103.626 li
28.2666 104.107 li
29.2266 104.586 li
31.6265 105.067 li
32.8267 105.067 li
35.2266 104.586 li
36.1865 104.107 li
36.6665 103.626 li
37.1465 102.667 li
37.1465 101.707 mo
36.6665 100.747 li
36.1865 100.267 li
35.2266 99.7866 li
32.8267 99.5464 li
31.6265 99.5464 li
29.2266 99.7866 li
28.2666 100.267 li
27.7866 100.747 li
27.3066 101.707 li
45.5464 97.6265 mo
50.3467 97.6265 li
45.5464 93.0669 mo
50.3467 93.0669 li
45.5464 88.2666 mo
50.3467 88.2666 li
45.5464 83.7065 mo
50.3467 83.7065 li
45.5464 79.1465 mo
55.3867 79.1465 li
27.3066 81.5464 mo
32.1064 82.2666 li
31.1465 81.5464 li
30.6665 80.1069 li
30.6665 78.6665 li
31.1465 77.2266 li
32.1064 76.2666 li
33.3066 75.7866 li
34.2666 75.7866 li
35.7065 76.2666 li
36.6665 77.2266 li
37.1465 78.6665 li
37.1465 80.1069 li
36.6665 81.5464 li
36.1865 82.0269 li
35.2266 82.2666 li
34.7466 82.2666 li
34.2666 82.0269 li
34.7466 81.5464 li
35.2266 82.0269 li
30.6665 78.6665 mo
31.1465 77.7065 li
32.1064 76.7466 li
33.3066 76.2666 li
34.2666 76.2666 li
35.7065 76.7466 li
36.6665 77.7065 li
37.1465 78.6665 li
27.3066 81.5464 mo
27.3066 76.7466 li
27.7866 81.5464 mo
27.7866 79.1465 li
27.3066 76.7466 li
45.5464 74.5864 mo
50.3467 74.5864 li
45.5464 69.7866 mo
50.3467 69.7866 li
45.5464 65.2266 mo
50.3467 65.2266 li
45.5464 60.6665 mo
50.3467 60.6665 li
45.5464 56.1069 mo
55.3867 56.1069 li
29.2266 62.5864 mo
28.7466 61.6265 li
27.3066 60.1865 li
37.1465 60.1865 li
27.7866 60.6665 mo
37.1465 60.6665 li
37.1465 62.5864 mo
37.1465 58.2666 li
27.3066 52.0269 mo
27.7866 53.2266 li
29.2266 54.1865 li
31.6265 54.6665 li
32.8267 54.6665 li
35.2266 54.1865 li
36.6665 53.2266 li
37.1465 52.0269 li
37.1465 51.0669 li
36.6665 49.6265 li
35.2266 48.6665 li
32.8267 48.1865 li
31.6265 48.1865 li
29.2266 48.6665 li
27.7866 49.6265 li
27.3066 51.0669 li
27.3066 52.0269 li
27.7866 52.7466 li
28.2666 53.2266 li
29.2266 53.7065 li
31.6265 54.1865 li
32.8267 54.1865 li
35.2266 53.7065 li
36.1865 53.2266 li
36.6665 52.7466 li
37.1465 52.0269 li
37.1465 51.0669 mo
36.6665 50.1069 li
36.1865 49.6265 li
35.2266 49.1465 li
32.8267 48.6665 li
31.6265 48.6665 li
29.2266 49.1465 li
28.2666 49.6265 li
27.7866 50.1069 li
27.3066 51.0669 li
45.5464 51.5464 mo
50.3467 51.5464 li
45.5464 46.7466 mo
50.3467 46.7466 li
45.5464 42.1865 mo
50.3467 42.1865 li
45.5464 37.6265 mo
50.3467 37.6265 li
45.5464 33.0669 mo
55.3867 33.0669 li
29.2266 39.5464 mo
28.7466 38.5864 li
27.3066 37.1465 li
37.1465 37.1465 li
27.7866 37.6265 mo
37.1465 37.6265 li
37.1465 39.5464 mo
37.1465 35.2266 li
27.3066 30.6665 mo
32.1064 31.6265 li
31.1465 30.6665 li
30.6665 29.2266 li
30.6665 27.7866 li
31.1465 26.5864 li
32.1064 25.6265 li
33.3066 25.1465 li
34.2666 25.1465 li
35.7065 25.6265 li
36.6665 26.5864 li
37.1465 27.7866 li
37.1465 29.2266 li
36.6665 30.6665 li
36.1865 31.1465 li
35.2266 31.6265 li
34.7466 31.6265 li
34.2666 31.1465 li
34.7466 30.6665 li
35.2266 31.1465 li
30.6665 27.7866 mo
31.1465 27.0669 li
32.1064 26.1069 li
33.3066 25.6265 li
34.2666 25.6265 li
35.7065 26.1069 li
36.6665 27.0669 li
37.1465 27.7866 li
27.3066 30.6665 mo
27.3066 26.1069 li
27.7866 30.6665 mo
27.7866 28.2666 li
27.3066 26.1069 li
45.5464 28.2666 mo
50.3467 28.2666 li
45.5464 23.7065 mo
50.3467 23.7065 li
45.5464 19.1465 mo
50.3467 19.1465 li
45.5464 14.5864 mo
50.3467 14.5864 li
45.5464 9.78662 mo
55.3867 9.78662 li
29.2266 17.2266 mo
29.7065 16.7466 li
30.1865 17.2266 li
29.7065 17.7065 li
29.2266 17.7065 li
28.2666 17.2266 li
27.7866 16.7466 li
27.3066 15.5464 li
27.3066 13.6265 li
27.7866 12.1865 li
28.2666 11.7065 li
29.2266 11.2266 li
30.1865 11.2266 li
31.1465 11.7065 li
32.1064 13.1465 li
32.8267 15.5464 li
33.3066 16.2666 li
34.2666 17.2266 li
35.7065 17.7065 li
37.1465 17.7065 li
27.3066 13.6265 mo
27.7866 12.6665 li
28.2666 12.1865 li
29.2266 11.7065 li
30.1865 11.7065 li
31.1465 12.1865 li
32.1064 13.6265 li
32.8267 15.5464 li
36.1865 17.7065 mo
35.7065 17.2266 li
35.7065 16.2666 li
36.6665 14.1069 li
36.6665 12.6665 li
36.1865 11.7065 li
35.7065 11.2266 li
35.7065 16.2666 mo
37.1465 14.1069 li
37.1465 12.1865 li
36.6665 11.7065 li
35.7065 11.2266 li
34.7466 11.2266 li
27.3066 5.70654 mo
27.7866 7.14648 li
29.2266 8.10693 li
31.6265 8.58643 li
32.8267 8.58643 li
35.2266 8.10693 li
36.6665 7.14648 li
37.1465 5.70654 li
37.1465 4.74658 li
36.6665 3.54639 li
35.2266 2.58643 li
32.8267 2.10693 li
31.6265 2.10693 li
29.2266 2.58643 li
27.7866 3.54639 li
27.3066 4.74658 li
27.3066 5.70654 li
27.7866 6.6665 li
28.2666 7.14648 li
29.2266 7.62646 li
31.6265 8.10693 li
32.8267 8.10693 li
35.2266 7.62646 li
36.1865 7.14648 li
36.6665 6.6665 li
37.1465 5.70654 li
37.1465 4.74658 mo
36.6665 3.78662 li
35.2266 3.06689 li
32.8267 2.58643 li
31.6265 2.58643 li
29.2266 3.06689 li
27.7866 3.78662 li
27.3066 4.74658 li
45.5464 5.22656 mo
50.3467 5.22656 li
45.5464 .666504 mo
50.3467 .666504 li
553.147 102.187 mo
553.147 .666504 li
553.147 102.187 mo
543.306 102.187 li
553.147 97.6265 mo
548.107 97.6265 li
553.147 93.0669 mo
548.107 93.0669 li
553.147 88.2666 mo
548.107 88.2666 li
553.147 83.7065 mo
548.107 83.7065 li
553.147 79.1465 mo
543.306 79.1465 li
553.147 74.5864 mo
548.107 74.5864 li
553.147 69.7866 mo
548.107 69.7866 li
553.147 65.2266 mo
548.107 65.2266 li
553.147 60.6665 mo
548.107 60.6665 li
553.147 56.1069 mo
543.306 56.1069 li
553.147 51.5464 mo
548.107 51.5464 li
553.147 46.7466 mo
548.107 46.7466 li
553.147 42.1865 mo
548.107 42.1865 li
553.147 37.6265 mo
548.107 37.6265 li
553.147 33.0669 mo
543.306 33.0669 li
553.147 28.2666 mo
548.107 28.2666 li
553.147 23.7065 mo
548.107 23.7065 li
553.147 19.1465 mo
548.107 19.1465 li
false sop
/0 
[/DeviceRGB] /CSA add_res
0 0 0 rgb
@
553.147 14.5864 mo
548.107 14.5864 li
553.147 9.78662 mo
543.306 9.78662 li
553.147 5.22656 mo
548.107 5.22656 li
553.147 .666504 mo
548.107 .666504 li
548.107 .666504 mo
@
45.5464 102.187 mo
127.867 102.187 li
127.867 97.6265 li
140.586 97.6265 li
140.586 10.0269 li
153.307 10.0269 li
153.307 102.187 li
166.027 102.187 li
166.027 74.5864 li
178.747 74.5864 li
178.747 10.0269 li
191.467 10.0269 li
191.467 51.5464 li
204.187 51.5464 li
204.187 33.0669 li
216.907 33.0669 li
216.907 88.2666 li
229.626 88.2666 li
229.626 83.7065 li
242.106 83.7065 li
242.106 88.2666 li
254.827 88.2666 li
254.827 102.187 li
292.987 102.187 li
292.987 97.6265 li
305.707 97.6265 li
305.707 102.187 li
553.147 102.187 li
45.5464 102.187 li
.847059 .74902 .847059 rgb
ef
340.027 21.7866 mo
340.027 33.0669 li
340.506 21.7866 mo
343.867 31.3867 li
340.027 21.7866 mo
343.867 33.0669 li
347.707 21.7866 mo
343.867 33.0669 li
347.707 21.7866 mo
347.707 33.0669 li
348.187 21.7866 mo
348.187 33.0669 li
338.346 21.7866 mo
340.506 21.7866 li
347.707 21.7866 mo
349.867 21.7866 li
338.346 33.0669 mo
341.707 33.0669 li
346.027 33.0669 mo
349.867 33.0669 li
356.346 21.7866 mo
352.506 33.0669 li
356.346 21.7866 mo
359.947 33.0669 li
356.346 23.2266 mo
359.466 33.0669 li
353.466 29.7065 mo
358.506 29.7065 li
351.306 33.0669 mo
354.667 33.0669 li
357.787 33.0669 mo
361.147 33.0669 li
370.267 23.2266 mo
370.747 21.7866 li
370.747 24.9067 li
370.267 23.2266 li
369.306 22.2666 li
367.626 21.7866 li
365.947 21.7866 li
364.267 22.2666 li
363.306 23.2266 li
363.306 24.4268 li
363.787 25.3867 li
364.267 25.8667 li
365.466 26.5864 li
368.586 27.5464 li
369.787 28.0269 li
370.747 29.2266 li
363.306 24.4268 mo
364.267 25.3867 li
365.466 25.8667 li
368.586 27.0669 li
369.787 27.5464 li
370.267 28.0269 li
370.747 29.2266 li
370.747 31.3867 li
369.787 32.3467 li
368.107 33.0669 li
366.426 33.0669 li
364.987 32.3467 li
363.787 31.3867 li
363.306 29.7065 li
363.306 33.0669 li
363.787 31.3867 li
381.067 23.2266 mo
381.546 21.7866 li
381.546 24.9067 li
381.067 23.2266 li
379.867 22.2666 li
378.426 21.7866 li
376.747 21.7866 li
375.067 22.2666 li
374.107 23.2266 li
374.107 24.4268 li
374.586 25.3867 li
375.067 25.8667 li
376.267 26.5864 li
379.386 27.5464 li
380.586 28.0269 li
381.546 29.2266 li
374.107 24.4268 mo
375.067 25.3867 li
376.267 25.8667 li
379.386 27.0669 li
380.586 27.5464 li
381.067 28.0269 li
381.546 29.2266 li
381.546 31.3867 li
380.586 32.3467 li
378.907 33.0669 li
377.227 33.0669 li
375.546 32.3467 li
374.586 31.3867 li
374.107 29.7065 li
374.107 33.0669 li
374.586 31.3867 li
385.867 21.7866 mo
385.867 33.0669 li
386.346 21.7866 mo
386.346 33.0669 li
384.187 21.7866 mo
388.027 21.7866 li
384.187 33.0669 mo
388.027 33.0669 li
390.667 21.7866 mo
394.506 33.0669 li
391.386 21.7866 mo
394.506 31.3867 li
398.346 21.7866 mo
394.506 33.0669 li
389.707 21.7866 mo
392.827 21.7866 li
396.187 21.7866 mo
399.306 21.7866 li
415.626 26.5864 mo
416.107 25.3867 li
416.107 27.5464 li
415.626 26.5864 li
414.907 25.8667 li
413.947 25.3867 li
411.787 25.3867 li
410.586 25.8667 li
410.107 26.5864 li
410.107 27.5464 li
410.586 28.0269 li
411.787 28.7466 li
414.426 29.7065 li
415.626 30.1865 li
416.107 30.9067 li
410.107 27.0669 mo
410.586 27.5464 li
411.787 28.0269 li
414.426 29.2266 li
415.626 29.7065 li
416.107 30.1865 li
416.107 31.8667 li
415.626 32.3467 li
414.426 33.0669 li
412.267 33.0669 li
411.306 32.3467 li
410.586 31.8667 li
410.107 30.9067 li
410.107 33.0669 li
410.586 31.8667 li
420.426 26.5864 mo
420.426 27.0669 li
419.947 27.0669 li
419.947 26.5864 li
420.426 25.8667 li
421.386 25.3867 li
423.546 25.3867 li
424.747 25.8667 li
425.227 26.5864 li
425.707 27.5464 li
425.707 31.3867 li
426.187 32.3467 li
426.907 33.0669 li
425.227 26.5864 mo
425.227 31.3867 li
425.707 32.3467 li
426.907 33.0669 li
427.386 33.0669 li
425.227 27.5464 mo
424.747 28.0269 li
421.386 28.7466 li
419.947 29.2266 li
419.227 30.1865 li
419.227 31.3867 li
419.947 32.3467 li
421.386 33.0669 li
423.067 33.0669 li
424.267 32.3467 li
425.227 31.3867 li
421.386 28.7466 mo
420.426 29.2266 li
419.947 30.1865 li
419.947 31.3867 li
420.426 32.3467 li
421.386 33.0669 li
431.227 25.3867 mo
431.227 33.0669 li
431.707 25.3867 mo
431.707 33.0669 li
431.707 27.0669 mo
432.667 25.8667 li
434.346 25.3867 li
435.546 25.3867 li
436.987 25.8667 li
437.707 27.0669 li
437.707 33.0669 li
435.546 25.3867 mo
436.506 25.8667 li
436.987 27.0669 li
436.987 33.0669 li
437.707 27.0669 mo
438.667 25.8667 li
440.346 25.3867 li
441.306 25.3867 li
442.987 25.8667 li
443.466 27.0669 li
443.466 33.0669 li
441.306 25.3867 mo
442.506 25.8667 li
442.987 27.0669 li
442.987 33.0669 li
429.546 25.3867 mo
431.707 25.3867 li
429.546 33.0669 mo
433.386 33.0669 li
435.546 33.0669 mo
439.147 33.0669 li
441.306 33.0669 mo
445.147 33.0669 li
448.987 25.3867 mo
448.987 36.6665 li
449.466 25.3867 mo
449.466 36.6665 li
449.466 27.0669 mo
450.667 25.8667 li
451.626 25.3867 li
452.827 25.3867 li
454.267 25.8667 li
455.466 27.0669 li
455.947 28.7466 li
455.947 29.7065 li
455.466 31.3867 li
454.267 32.3467 li
452.827 33.0669 li
451.626 33.0669 li
450.667 32.3467 li
449.466 31.3867 li
452.827 25.3867 mo
453.787 25.8667 li
454.987 27.0669 li
455.466 28.7466 li
455.466 29.7065 li
454.987 31.3867 li
453.787 32.3467 li
452.827 33.0669 li
447.306 25.3867 mo
449.466 25.3867 li
447.306 36.6665 mo
451.147 36.6665 li
460.267 21.7866 mo
460.267 33.0669 li
460.747 21.7866 mo
460.747 33.0669 li
458.586 21.7866 mo
460.747 21.7866 li
458.586 33.0669 mo
462.426 33.0669 li
465.546 28.7466 mo
472.027 28.7466 li
472.027 27.5464 li
471.546 26.5864 li
471.067 25.8667 li
469.867 25.3867 li
468.426 25.3867 li
466.747 25.8667 li
465.546 27.0669 li
465.067 28.7466 li
465.067 29.7065 li
465.546 31.3867 li
466.747 32.3467 li
468.426 33.0669 li
469.386 33.0669 li
471.067 32.3467 li
472.027 31.3867 li
471.546 28.7466 mo
471.546 27.0669 li
471.067 25.8667 li
468.426 25.3867 mo
467.227 25.8667 li
466.267 27.0669 li
465.546 28.7466 li
465.546 29.7065 li
466.267 31.3867 li
467.227 32.3467 li
468.426 33.0669 li
473.707 33.0669 mo
0 0 0 rgb
@
45.5464 203.707 mo
553.147 203.707 li
553.147 102.187 li
45.5464 102.187 li
45.5464 203.707 li
553.147 203.707 li
45.5464 203.707 mo
553.147 203.707 li
45.5464 203.707 mo
45.5464 198.907 li
70.9868 203.707 mo
70.9868 198.907 li
96.1865 203.707 mo
96.1865 198.907 li
121.626 203.707 mo
121.626 198.907 li
147.066 203.707 mo
147.066 193.867 li
172.507 203.707 mo
172.507 198.907 li
197.707 203.707 mo
197.707 198.907 li
223.146 203.707 mo
223.146 198.907 li
248.586 203.707 mo
248.586 198.907 li
274.027 203.707 mo
274.027 193.867 li
299.227 203.707 mo
299.227 198.907 li
324.667 203.707 mo
324.667 198.907 li
350.107 203.707 mo
350.107 198.907 li
375.546 203.707 mo
375.546 198.907 li
400.747 203.707 mo
400.747 193.867 li
426.187 203.707 mo
426.187 198.907 li
451.626 203.707 mo
451.626 198.907 li
477.067 203.707 mo
477.067 198.907 li
502.267 203.707 mo
502.267 198.907 li
527.707 203.707 mo
527.707 193.867 li
553.147 203.707 mo
553.147 198.907 li
45.5464 102.187 mo
553.147 102.187 li
45.5464 102.187 mo
45.5464 107.227 li
70.9868 102.187 mo
70.9868 107.227 li
96.1865 102.187 mo
96.1865 107.227 li
121.626 102.187 mo
121.626 107.227 li
147.066 102.187 mo
147.066 112.027 li
172.507 102.187 mo
172.507 107.227 li
197.707 102.187 mo
197.707 107.227 li
223.146 102.187 mo
223.146 107.227 li
248.586 102.187 mo
248.586 107.227 li
274.027 102.187 mo
274.027 112.027 li
299.227 102.187 mo
299.227 107.227 li
324.667 102.187 mo
324.667 107.227 li
350.107 102.187 mo
350.107 107.227 li
375.546 102.187 mo
375.546 107.227 li
400.747 102.187 mo
400.747 112.027 li
426.187 102.187 mo
426.187 107.227 li
451.626 102.187 mo
451.626 107.227 li
477.067 102.187 mo
477.067 107.227 li
502.267 102.187 mo
502.267 107.227 li
527.707 102.187 mo
527.707 112.027 li
553.147 102.187 mo
553.147 107.227 li
45.5464 203.707 mo
45.5464 102.187 li
45.5464 203.707 mo
55.3867 203.707 li
27.3066 204.187 mo
27.7866 205.626 li
29.2266 206.586 li
31.6265 207.067 li
32.8267 207.067 li
35.2266 206.586 li
36.6665 205.626 li
37.1465 204.187 li
37.1465 203.227 li
36.6665 201.787 li
35.2266 201.067 li
32.8267 200.586 li
31.6265 200.586 li
29.2266 201.067 li
27.7866 201.787 li
27.3066 203.227 li
27.3066 204.187 li
27.7866 205.146 li
28.2666 205.626 li
29.2266 206.106 li
31.6265 206.586 li
32.8267 206.586 li
35.2266 206.106 li
36.1865 205.626 li
36.6665 205.146 li
37.1465 204.187 li
37.1465 203.227 mo
36.6665 202.267 li
36.1865 201.787 li
35.2266 201.307 li
@
35.2266 201.307 mo
32.8267 201.067 li
31.6265 201.067 li
29.2266 201.307 li
28.2666 201.787 li
27.7866 202.267 li
27.3066 203.227 li
45.5464 199.146 mo
50.3467 199.146 li
45.5464 194.586 mo
50.3467 194.586 li
45.5464 189.787 mo
50.3467 189.787 li
45.5464 185.227 mo
50.3467 185.227 li
45.5464 180.667 mo
55.3867 180.667 li
27.3066 183.067 mo
32.1064 183.787 li
31.1465 183.067 li
30.6665 181.626 li
30.6665 180.187 li
31.1465 178.747 li
32.1064 177.787 li
33.3066 177.546 li
34.2666 177.546 li
35.7065 177.787 li
36.6665 178.747 li
37.1465 180.187 li
37.1465 181.626 li
36.6665 183.067 li
36.1865 183.546 li
35.2266 183.787 li
34.7466 183.787 li
34.2666 183.546 li
34.7466 183.067 li
35.2266 183.546 li
30.6665 180.187 mo
31.1465 179.227 li
32.1064 178.267 li
33.3066 177.787 li
34.2666 177.787 li
35.7065 178.267 li
36.6665 179.227 li
37.1465 180.187 li
27.3066 183.067 mo
27.3066 178.267 li
27.7866 183.067 mo
27.7866 180.667 li
27.3066 178.267 li
45.5464 176.107 mo
50.3467 176.107 li
45.5464 171.546 mo
50.3467 171.546 li
45.5464 166.747 mo
50.3467 166.747 li
45.5464 162.187 mo
50.3467 162.187 li
45.5464 157.626 mo
55.3867 157.626 li
29.2266 164.107 mo
28.7466 163.146 li
27.3066 161.707 li
37.1465 161.707 li
27.7866 162.187 mo
37.1465 162.187 li
37.1465 164.107 mo
37.1465 159.787 li
27.3066 153.546 mo
27.7866 154.747 li
29.2266 155.707 li
31.6265 156.187 li
32.8267 156.187 li
35.2266 155.707 li
36.6665 154.747 li
37.1465 153.546 li
37.1465 152.586 li
36.6665 151.146 li
35.2266 150.187 li
32.8267 149.707 li
31.6265 149.707 li
29.2266 150.187 li
27.7866 151.146 li
27.3066 152.586 li
27.3066 153.546 li
27.7866 154.267 li
28.2666 154.747 li
29.2266 155.227 li
31.6265 155.707 li
32.8267 155.707 li
35.2266 155.227 li
36.1865 154.747 li
36.6665 154.267 li
37.1465 153.546 li
37.1465 152.586 mo
36.6665 151.626 li
36.1865 151.146 li
35.2266 150.667 li
32.8267 150.187 li
31.6265 150.187 li
29.2266 150.667 li
28.2666 151.146 li
27.7866 151.626 li
27.3066 152.586 li
45.5464 153.067 mo
50.3467 153.067 li
45.5464 148.267 mo
50.3467 148.267 li
45.5464 143.707 mo
50.3467 143.707 li
45.5464 139.146 mo
50.3467 139.146 li
45.5464 134.586 mo
55.3867 134.586 li
29.2266 141.067 mo
28.7466 140.107 li
27.3066 138.667 li
37.1465 138.667 li
27.7866 139.146 mo
37.1465 139.146 li
37.1465 141.067 mo
37.1465 136.747 li
27.3066 132.187 mo
32.1064 133.146 li
31.1465 132.187 li
30.6665 130.747 li
30.6665 129.307 li
31.1465 128.107 li
32.1064 127.146 li
33.3066 126.667 li
34.2666 126.667 li
35.7065 127.146 li
36.6665 128.107 li
37.1465 129.307 li
37.1465 130.747 li
36.6665 132.187 li
36.1865 132.667 li
35.2266 133.146 li
34.7466 133.146 li
34.2666 132.667 li
34.7466 132.187 li
35.2266 132.667 li
30.6665 129.307 mo
31.1465 128.586 li
32.1064 127.626 li
33.3066 127.146 li
34.2666 127.146 li
35.7065 127.626 li
36.6665 128.586 li
37.1465 129.307 li
27.3066 132.187 mo
27.3066 127.626 li
27.7866 132.187 mo
27.7866 129.787 li
27.3066 127.626 li
45.5464 129.787 mo
50.3467 129.787 li
45.5464 125.227 mo
50.3467 125.227 li
45.5464 120.667 mo
50.3467 120.667 li
45.5464 116.107 mo
50.3467 116.107 li
45.5464 111.307 mo
55.3867 111.307 li
29.2266 118.747 mo
29.7065 118.267 li
30.1865 118.747 li
29.7065 119.227 li
29.2266 119.227 li
28.2666 118.747 li
27.7866 118.267 li
27.3066 117.067 li
27.3066 115.146 li
27.7866 113.707 li
28.2666 113.227 li
29.2266 112.747 li
30.1865 112.747 li
31.1465 113.227 li
32.1064 114.667 li
32.8267 117.067 li
33.3066 117.787 li
34.2666 118.747 li
35.7065 119.227 li
37.1465 119.227 li
27.3066 115.146 mo
27.7866 114.187 li
28.2666 113.707 li
29.2266 113.227 li
30.1865 113.227 li
31.1465 113.707 li
32.1064 115.146 li
32.8267 117.067 li
36.1865 119.227 mo
35.7065 118.747 li
35.7065 117.787 li
36.6665 115.626 li
36.6665 114.187 li
36.1865 113.227 li
35.7065 112.747 li
35.7065 117.787 mo
37.1465 115.626 li
37.1465 113.707 li
36.6665 113.227 li
35.7065 112.747 li
34.7466 112.747 li
27.3066 107.227 mo
27.7866 108.667 li
29.2266 109.626 li
31.6265 110.107 li
32.8267 110.107 li
35.2266 109.626 li
36.6665 108.667 li
37.1465 107.227 li
37.1465 106.267 li
36.6665 105.067 li
35.2266 104.107 li
32.8267 103.626 li
31.6265 103.626 li
29.2266 104.107 li
27.7866 105.067 li
27.3066 106.267 li
27.3066 107.227 li
27.7866 108.187 li
28.2666 108.667 li
29.2266 109.146 li
31.6265 109.626 li
32.8267 109.626 li
35.2266 109.146 li
36.1865 108.667 li
36.6665 108.187 li
37.1465 107.227 li
37.1465 106.267 mo
36.6665 105.307 li
36.1865 105.067 li
35.2266 104.586 li
32.8267 104.107 li
31.6265 104.107 li
29.2266 104.586 li
27.7866 105.307 li
27.3066 106.267 li
45.5464 106.747 mo
50.3467 106.747 li
45.5464 102.187 mo
50.3467 102.187 li
553.147 203.707 mo
553.147 102.187 li
553.147 203.707 mo
543.306 203.707 li
553.147 199.146 mo
548.107 199.146 li
553.147 194.586 mo
548.107 194.586 li
553.147 189.787 mo
548.107 189.787 li
553.147 185.227 mo
548.107 185.227 li
553.147 180.667 mo
543.306 180.667 li
553.147 176.107 mo
548.107 176.107 li
553.147 171.546 mo
548.107 171.546 li
553.147 166.747 mo
548.107 166.747 li
553.147 162.187 mo
548.107 162.187 li
553.147 157.626 mo
543.306 157.626 li
553.147 153.067 mo
548.107 153.067 li
553.147 148.267 mo
548.107 148.267 li
553.147 143.707 mo
548.107 143.707 li
553.147 139.146 mo
548.107 139.146 li
553.147 134.586 mo
543.306 134.586 li
553.147 129.787 mo
548.107 129.787 li
553.147 125.227 mo
548.107 125.227 li
553.147 120.667 mo
548.107 120.667 li
553.147 116.107 mo
548.107 116.107 li
553.147 111.307 mo
543.306 111.307 li
553.147 106.747 mo
548.107 106.747 li
553.147 102.187 mo
548.107 102.187 li
@
45.5464 203.707 mo
64.5068 203.707 li
64.5068 176.107 li
77.2266 176.107 li
77.2266 157.626 li
89.9468 157.626 li
89.9468 129.787 li
102.667 129.787 li
102.667 106.747 li
115.387 106.747 li
115.387 203.707 li
553.147 203.707 li
45.5464 203.707 li
0 0 1 rgb
ef
340.027 123.307 mo
340.027 134.586 li
340.506 123.307 mo
340.506 134.586 li
338.346 123.307 mo
342.187 123.307 li
338.346 134.586 mo
342.187 134.586 li
346.027 123.307 mo
346.027 134.586 li
346.506 123.307 mo
349.867 132.907 li
346.027 123.307 mo
349.867 134.586 li
353.466 123.307 mo
349.867 134.586 li
353.466 123.307 mo
353.466 134.586 li
354.187 123.307 mo
354.187 134.586 li
344.346 123.307 mo
346.506 123.307 li
353.466 123.307 mo
355.626 123.307 li
344.346 134.586 mo
347.707 134.586 li
352.027 134.586 mo
355.626 134.586 li
362.107 123.307 mo
358.506 134.586 li
362.107 123.307 mo
365.947 134.586 li
362.107 124.747 mo
365.466 134.586 li
359.466 131.227 mo
364.267 131.227 li
357.306 134.586 mo
360.667 134.586 li
363.787 134.586 mo
367.147 134.586 li
376.747 124.747 mo
377.227 126.427 li
377.227 123.307 li
376.747 124.747 li
375.546 123.787 li
374.107 123.307 li
372.907 123.307 li
371.227 123.787 li
370.267 124.747 li
369.787 125.947 li
369.067 127.626 li
369.067 130.267 li
369.787 131.707 li
370.267 132.907 li
371.227 134.107 li
372.907 134.586 li
374.107 134.586 li
375.546 134.107 li
376.747 132.907 li
372.907 123.307 mo
371.947 123.787 li
370.747 124.747 li
370.267 125.947 li
369.787 127.626 li
369.787 130.267 li
370.267 131.707 li
370.747 132.907 li
371.947 134.107 li
372.907 134.586 li
376.747 130.267 mo
376.747 134.586 li
377.227 130.267 mo
377.227 134.586 li
375.067 130.267 mo
378.907 130.267 li
382.747 123.307 mo
382.747 134.586 li
383.227 123.307 mo
383.227 134.586 li
386.346 126.427 mo
386.346 130.747 li
381.067 123.307 mo
389.707 123.307 li
389.707 126.427 li
389.227 123.307 li
383.227 128.586 mo
386.346 128.586 li
381.067 134.586 mo
389.707 134.586 li
389.707 131.227 li
389.227 134.586 li
399.787 124.747 mo
400.506 123.307 li
400.506 126.427 li
399.787 124.747 li
398.827 123.787 li
397.147 123.307 li
395.466 123.307 li
394.027 123.787 li
392.827 124.747 li
392.827 125.947 li
393.546 126.907 li
394.027 127.626 li
394.987 128.107 li
398.346 129.067 li
399.306 129.546 li
400.506 130.747 li
392.827 125.947 mo
394.027 126.907 li
394.987 127.626 li
398.346 128.586 li
399.306 129.067 li
399.787 129.546 li
400.506 130.747 li
400.506 132.907 li
399.306 134.107 li
397.626 134.586 li
396.187 134.586 li
394.506 134.107 li
393.546 132.907 li
392.827 131.227 li
392.827 134.586 li
393.546 132.907 li
417.787 128.107 mo
418.267 126.907 li
418.267 129.067 li
417.787 128.107 li
417.067 127.626 li
416.107 126.907 li
413.947 126.907 li
412.747 127.626 li
412.267 128.107 li
412.267 129.067 li
412.747 129.546 li
413.947 130.267 li
416.586 131.227 li
417.787 131.707 li
418.267 132.427 li
412.267 128.586 mo
412.747 129.067 li
413.947 129.546 li
416.586 130.747 li
417.787 131.227 li
418.267 131.707 li
418.267 133.387 li
417.787 134.107 li
416.586 134.586 li
414.426 134.586 li
413.466 134.107 li
412.747 133.387 li
412.267 132.427 li
412.267 134.586 li
412.747 133.387 li
422.586 128.107 mo
422.586 128.586 li
421.867 128.586 li
421.867 128.107 li
422.586 127.626 li
423.546 126.907 li
425.707 126.907 li
426.907 127.626 li
427.386 128.107 li
427.867 129.067 li
427.867 132.907 li
428.346 134.107 li
429.067 134.586 li
427.386 128.107 mo
427.386 132.907 li
427.867 134.107 li
429.067 134.586 li
429.546 134.586 li
427.386 129.067 mo
426.907 129.546 li
423.546 130.267 li
421.867 130.747 li
421.386 131.707 li
421.386 132.907 li
421.867 134.107 li
423.546 134.586 li
425.227 134.586 li
426.187 134.107 li
427.386 132.907 li
423.546 130.267 mo
422.586 130.747 li
421.867 131.707 li
421.867 132.907 li
422.586 134.107 li
423.546 134.586 li
433.386 126.907 mo
433.386 134.586 li
433.867 126.907 mo
433.867 134.586 li
433.867 128.586 mo
434.827 127.626 li
436.506 126.907 li
437.707 126.907 li
439.147 127.626 li
439.867 128.586 li
439.867 134.586 li
437.707 126.907 mo
438.667 127.626 li
439.147 128.586 li
439.147 134.586 li
439.867 128.586 mo
440.827 127.626 li
442.506 126.907 li
443.466 126.907 li
445.147 127.626 li
445.626 128.586 li
445.626 134.586 li
443.466 126.907 mo
444.667 127.626 li
445.147 128.586 li
445.147 134.586 li
431.707 126.907 mo
433.867 126.907 li
431.707 134.586 mo
435.546 134.586 li
437.707 134.586 mo
441.306 134.586 li
443.466 134.586 mo
447.306 134.586 li
451.147 126.907 mo
451.147 138.187 li
451.626 126.907 mo
451.626 138.187 li
451.626 128.586 mo
452.586 127.626 li
453.787 126.907 li
454.747 126.907 li
456.426 127.626 li
457.626 128.586 li
458.107 130.267 li
458.107 131.227 li
457.626 132.907 li
456.426 134.107 li
454.747 134.586 li
453.787 134.586 li
452.586 134.107 li
451.626 132.907 li
454.747 126.907 mo
455.947 127.626 li
456.907 128.586 li
457.626 130.267 li
457.626 131.227 li
456.907 132.907 li
455.947 134.107 li
454.747 134.586 li
449.466 126.907 mo
451.626 126.907 li
449.466 138.187 mo
453.306 138.187 li
462.426 123.307 mo
462.426 134.586 li
462.907 123.307 mo
462.907 134.586 li
460.747 123.307 mo
462.907 123.307 li
460.747 134.586 mo
464.586 134.586 li
467.707 130.267 mo
474.187 130.267 li
474.187 129.067 li
473.707 128.107 li
473.227 127.626 li
472.027 126.907 li
470.586 126.907 li
468.907 127.626 li
467.707 128.586 li
467.227 130.267 li
467.227 131.227 li
467.707 132.907 li
468.907 134.107 li
470.586 134.586 li
471.546 134.586 li
473.227 134.107 li
474.187 132.907 li
473.707 130.267 mo
473.707 128.586 li
473.227 127.626 li
470.586 126.907 mo
469.386 127.626 li
468.426 128.586 li
467.707 130.267 li
467.707 131.227 li
468.426 132.907 li
469.386 134.107 li
470.586 134.586 li
475.867 134.586 mo
@
45.5464 305.227 mo
553.147 305.227 li
553.147 203.707 li
45.5464 203.707 li
45.5464 305.227 li
553.147 305.227 li
45.5464 305.227 mo
553.147 305.227 li
45.5464 305.227 mo
45.5464 300.427 li
70.9868 305.227 mo
70.9868 300.427 li
96.1865 305.227 mo
96.1865 300.427 li
121.626 305.227 mo
121.626 300.427 li
147.066 305.227 mo
147.066 295.387 li
172.507 305.227 mo
172.507 300.427 li
197.707 305.227 mo
197.707 300.427 li
223.146 305.227 mo
223.146 300.427 li
248.586 305.227 mo
248.586 300.427 li
274.027 305.227 mo
274.027 295.387 li
299.227 305.227 mo
299.227 300.427 li
324.667 305.227 mo
324.667 300.427 li
350.107 305.227 mo
350.107 300.427 li
375.546 305.227 mo
375.546 300.427 li
400.747 305.227 mo
400.747 295.387 li
426.187 305.227 mo
426.187 300.427 li
451.626 305.227 mo
451.626 300.427 li
477.067 305.227 mo
477.067 300.427 li
502.267 305.227 mo
502.267 300.427 li
527.707 305.227 mo
527.707 295.387 li
553.147 305.227 mo
553.147 300.427 li
45.5464 203.707 mo
553.147 203.707 li
45.5464 203.707 mo
45.5464 208.747 li
70.9868 203.707 mo
70.9868 208.747 li
96.1865 203.707 mo
96.1865 208.747 li
121.626 203.707 mo
121.626 208.747 li
147.066 203.707 mo
147.066 213.547 li
172.507 203.707 mo
172.507 208.747 li
197.707 203.707 mo
197.707 208.747 li
223.146 203.707 mo
223.146 208.747 li
248.586 203.707 mo
248.586 208.747 li
274.027 203.707 mo
274.027 213.547 li
299.227 203.707 mo
299.227 208.747 li
324.667 203.707 mo
324.667 208.747 li
350.107 203.707 mo
350.107 208.747 li
375.546 203.707 mo
375.546 208.747 li
400.747 203.707 mo
400.747 213.547 li
426.187 203.707 mo
426.187 208.747 li
451.626 203.707 mo
451.626 208.747 li
477.067 203.707 mo
477.067 208.747 li
502.267 203.707 mo
502.267 208.747 li
527.707 203.707 mo
527.707 213.547 li
553.147 203.707 mo
553.147 208.747 li
45.5464 305.227 mo
45.5464 203.707 li
45.5464 305.227 mo
55.3867 305.227 li
27.3066 305.707 mo
27.7866 307.146 li
29.2266 308.106 li
31.6265 308.586 li
32.8267 308.586 li
35.2266 308.106 li
36.6665 307.146 li
37.1465 305.707 li
37.1465 304.747 li
36.6665 303.307 li
35.2266 302.586 li
32.8267 302.106 li
31.6265 302.106 li
29.2266 302.586 li
27.7866 303.307 li
27.3066 304.747 li
27.3066 305.707 li
27.7866 306.667 li
28.2666 307.146 li
29.2266 307.626 li
31.6265 308.106 li
32.8267 308.106 li
35.2266 307.626 li
36.1865 307.146 li
36.1865 307.146 mo
36.6665 306.667 li
37.1465 305.707 li
37.1465 304.747 mo
36.6665 303.787 li
36.1865 303.307 li
35.2266 302.827 li
32.8267 302.586 li
31.6265 302.586 li
29.2266 302.827 li
28.2666 303.307 li
27.7866 303.787 li
27.3066 304.747 li
45.5464 300.667 mo
50.3467 300.667 li
45.5464 296.106 mo
50.3467 296.106 li
45.5464 291.307 mo
50.3467 291.307 li
45.5464 286.747 mo
50.3467 286.747 li
45.5464 282.187 mo
55.3867 282.187 li
27.3066 284.586 mo
32.1064 285.307 li
31.1465 284.586 li
30.6665 283.146 li
30.6665 281.707 li
31.1465 280.267 li
32.1064 279.307 li
33.3066 279.067 li
34.2666 279.067 li
35.7065 279.307 li
36.6665 280.267 li
37.1465 281.707 li
37.1465 283.146 li
36.6665 284.586 li
36.1865 285.067 li
35.2266 285.307 li
34.7466 285.307 li
34.2666 285.067 li
34.7466 284.586 li
35.2266 285.067 li
30.6665 281.707 mo
31.1465 280.747 li
32.1064 279.787 li
33.3066 279.307 li
34.2666 279.307 li
35.7065 279.787 li
36.6665 280.747 li
37.1465 281.707 li
27.3066 284.586 mo
27.3066 279.787 li
27.7866 284.586 mo
27.7866 282.187 li
27.3066 279.787 li
45.5464 277.626 mo
50.3467 277.626 li
45.5464 273.067 mo
50.3467 273.067 li
45.5464 268.267 mo
50.3467 268.267 li
45.5464 263.707 mo
50.3467 263.707 li
45.5464 259.146 mo
55.3867 259.146 li
29.2266 265.626 mo
28.7466 264.667 li
27.3066 263.227 li
37.1465 263.227 li
27.7866 263.707 mo
37.1465 263.707 li
37.1465 265.626 mo
37.1465 261.307 li
27.3066 255.067 mo
27.7866 256.267 li
29.2266 257.227 li
31.6265 257.707 li
32.8267 257.707 li
35.2266 257.227 li
36.6665 256.267 li
37.1465 255.067 li
37.1465 254.106 li
36.6665 252.667 li
35.2266 251.707 li
32.8267 251.227 li
31.6265 251.227 li
29.2266 251.707 li
27.7866 252.667 li
27.3066 254.106 li
27.3066 255.067 li
27.7866 255.787 li
28.2666 256.267 li
29.2266 256.747 li
31.6265 257.227 li
32.8267 257.227 li
35.2266 256.747 li
36.1865 256.267 li
36.6665 255.787 li
37.1465 255.067 li
37.1465 254.106 mo
36.6665 253.146 li
36.1865 252.667 li
35.2266 252.187 li
32.8267 251.707 li
31.6265 251.707 li
29.2266 252.187 li
28.2666 252.667 li
27.7866 253.146 li
27.3066 254.106 li
45.5464 254.586 mo
50.3467 254.586 li
45.5464 249.787 mo
50.3467 249.787 li
45.5464 245.227 mo
50.3467 245.227 li
45.5464 240.667 mo
50.3467 240.667 li
45.5464 236.106 mo
55.3867 236.106 li
29.2266 242.586 mo
28.7466 241.626 li
27.3066 240.187 li
37.1465 240.187 li
27.7866 240.667 mo
37.1465 240.667 li
37.1465 242.586 mo
37.1465 238.267 li
27.3066 233.707 mo
32.1064 234.667 li
31.1465 233.707 li
30.6665 232.267 li
30.6665 231.067 li
31.1465 229.626 li
32.1064 228.667 li
33.3066 228.187 li
34.2666 228.187 li
35.7065 228.667 li
36.6665 229.626 li
37.1465 231.067 li
37.1465 232.267 li
36.6665 233.707 li
36.1865 234.187 li
35.2266 234.667 li
34.7466 234.667 li
34.2666 234.187 li
34.7466 233.707 li
35.2266 234.187 li
30.6665 231.067 mo
31.1465 230.106 li
32.1064 229.146 li
33.3066 228.667 li
34.2666 228.667 li
35.7065 229.146 li
36.6665 230.106 li
37.1465 231.067 li
27.3066 233.707 mo
27.3066 229.146 li
27.7866 233.707 mo
27.7866 231.307 li
27.3066 229.146 li
45.5464 231.307 mo
50.3467 231.307 li
45.5464 226.747 mo
50.3467 226.747 li
45.5464 222.187 mo
50.3467 222.187 li
45.5464 217.626 mo
50.3467 217.626 li
45.5464 213.067 mo
55.3867 213.067 li
29.2266 220.267 mo
29.7065 219.787 li
30.1865 220.267 li
29.7065 220.747 li
29.2266 220.747 li
28.2666 220.267 li
27.7866 219.787 li
27.3066 218.586 li
27.3066 216.667 li
27.7866 215.227 li
28.2666 214.747 li
29.2266 214.267 li
30.1865 214.267 li
31.1465 214.747 li
32.1064 216.187 li
32.8267 218.586 li
33.3066 219.547 li
34.2666 220.267 li
35.7065 220.747 li
37.1465 220.747 li
27.3066 216.667 mo
27.7866 215.707 li
28.2666 215.227 li
29.2266 214.747 li
30.1865 214.747 li
31.1465 215.227 li
32.1064 216.667 li
32.8267 218.586 li
36.1865 220.747 mo
35.7065 220.267 li
35.7065 219.547 li
36.6665 217.146 li
36.6665 215.707 li
36.1865 214.747 li
35.7065 214.267 li
35.7065 219.547 mo
37.1465 217.146 li
37.1465 215.227 li
36.6665 214.747 li
35.7065 214.267 li
34.7466 214.267 li
27.3066 208.747 mo
27.7866 210.187 li
29.2266 211.146 li
31.6265 211.626 li
32.8267 211.626 li
35.2266 211.146 li
36.6665 210.187 li
37.1465 208.747 li
37.1465 207.787 li
36.6665 206.586 li
35.2266 205.626 li
32.8267 205.146 li
31.6265 205.146 li
29.2266 205.626 li
27.7866 206.586 li
27.3066 207.787 li
27.3066 208.747 li
27.7866 209.707 li
28.2666 210.187 li
29.2266 210.667 li
31.6265 211.146 li
32.8267 211.146 li
35.2266 210.667 li
36.1865 210.187 li
36.6665 209.707 li
37.1465 208.747 li
37.1465 207.787 mo
36.6665 207.067 li
36.1865 206.586 li
35.2266 206.106 li
32.8267 205.626 li
31.6265 205.626 li
29.2266 206.106 li
28.2666 206.586 li
27.7866 207.067 li
27.3066 207.787 li
45.5464 208.267 mo
50.3467 208.267 li
45.5464 203.707 mo
50.3467 203.707 li
553.147 305.227 mo
553.147 203.707 li
553.147 305.227 mo
543.306 305.227 li
553.147 300.667 mo
548.107 300.667 li
553.147 296.106 mo
548.107 296.106 li
553.147 291.307 mo
548.107 291.307 li
553.147 286.747 mo
548.107 286.747 li
553.147 282.187 mo
543.306 282.187 li
553.147 277.626 mo
548.107 277.626 li
553.147 273.067 mo
548.107 273.067 li
553.147 268.267 mo
548.107 268.267 li
553.147 263.707 mo
548.107 263.707 li
553.147 259.146 mo
543.306 259.146 li
553.147 254.586 mo
548.107 254.586 li
553.147 249.787 mo
548.107 249.787 li
553.147 245.227 mo
548.107 245.227 li
553.147 240.667 mo
548.107 240.667 li
553.147 236.106 mo
543.306 236.106 li
553.147 231.307 mo
548.107 231.307 li
553.147 226.747 mo
548.107 226.747 li
553.147 222.187 mo
548.107 222.187 li
553.147 217.626 mo
548.107 217.626 li
553.147 213.067 mo
543.306 213.067 li
553.147 208.267 mo
548.107 208.267 li
553.147 203.707 mo
548.107 203.707 li
0 0 0 rgb
@
45.5464 305.227 mo
178.747 305.227 li
178.747 300.667 li
191.467 300.667 li
191.467 291.307 li
204.187 291.307 li
204.187 282.187 li
216.907 282.187 li
216.907 268.267 li
229.626 268.267 li
229.626 291.307 li
242.106 291.307 li
242.106 305.227 li
267.546 305.227 li
267.546 291.307 li
280.267 291.307 li
280.267 282.187 li
292.987 282.187 li
292.987 245.227 li
305.707 245.227 li
305.707 277.626 li
318.426 277.626 li
318.426 259.146 li
331.147 259.146 li
331.147 286.747 li
343.626 286.747 li
343.626 300.667 li
356.346 300.667 li
356.346 305.227 li
553.147 305.227 li
45.5464 305.227 li
1 0 1 rgb
ef
346.027 226.267 mo
346.506 224.827 li
346.506 227.947 li
346.027 226.267 li
344.827 225.307 li
343.386 224.827 li
341.707 224.827 li
340.027 225.307 li
339.067 226.267 li
339.067 227.467 li
339.546 228.427 li
340.027 229.146 li
341.227 229.626 li
344.346 230.586 li
345.546 231.307 li
346.506 232.267 li
339.067 227.467 mo
340.027 228.427 li
341.227 229.146 li
344.346 230.106 li
345.546 230.586 li
346.027 231.307 li
346.506 232.267 li
346.506 234.427 li
345.546 235.626 li
343.867 236.106 li
342.187 236.106 li
340.506 235.626 li
339.546 234.427 li
339.067 232.747 li
339.067 236.106 li
339.546 234.427 li
350.827 224.827 mo
350.827 236.106 li
351.306 224.827 mo
351.306 236.106 li
349.147 224.827 mo
352.987 224.827 li
349.147 236.106 mo
352.987 236.106 li
356.827 224.827 mo
356.827 236.106 li
357.306 224.827 mo
363.787 234.907 li
357.306 225.787 mo
363.787 236.106 li
363.787 224.827 mo
363.787 236.106 li
355.147 224.827 mo
357.306 224.827 li
362.107 224.827 mo
365.466 224.827 li
355.147 236.106 mo
358.506 236.106 li
375.067 226.267 mo
375.546 224.827 li
375.546 227.947 li
375.067 226.267 li
374.107 225.307 li
372.426 224.827 li
370.747 224.827 li
369.067 225.307 li
368.107 226.267 li
368.107 227.467 li
368.586 228.427 li
369.067 229.146 li
370.267 229.626 li
373.386 230.586 li
374.586 231.307 li
375.546 232.267 li
368.107 227.467 mo
369.067 228.427 li
370.267 229.146 li
373.386 230.106 li
374.586 230.586 li
375.067 231.307 li
375.546 232.267 li
375.546 234.427 li
374.586 235.626 li
372.907 236.106 li
371.227 236.106 li
369.787 235.626 li
368.586 234.427 li
368.107 232.747 li
368.107 236.106 li
368.586 234.427 li
388.506 224.827 mo
388.506 236.106 li
388.987 224.827 mo
388.987 236.106 li
395.466 224.827 mo
395.466 236.106 li
396.187 224.827 mo
396.187 236.106 li
387.067 224.827 mo
390.667 224.827 li
394.027 224.827 mo
397.626 224.827 li
388.987 230.106 mo
395.466 230.106 li
387.067 236.106 mo
390.667 236.106 li
394.027 236.106 mo
397.626 236.106 li
404.107 228.427 mo
402.667 229.146 li
401.466 230.106 li
400.987 231.307 li
400.506 232.747 li
400.506 234.427 li
400.987 235.626 li
402.667 236.106 li
403.626 236.106 li
404.827 235.626 li
406.267 233.947 li
407.466 232.267 li
408.426 230.106 li
409.147 228.427 li
404.107 228.427 mo
403.147 229.146 li
401.947 230.106 li
401.466 231.307 li
400.987 232.747 li
400.987 234.427 li
401.466 235.626 li
402.667 236.106 li
404.107 228.427 mo
405.306 228.427 li
406.267 229.146 li
406.987 230.106 li
407.947 234.427 li
408.426 235.626 li
409.147 236.106 li
405.306 228.427 mo
405.787 229.146 li
406.267 230.106 li
407.466 234.427 li
407.947 235.626 li
409.147 236.106 li
409.626 236.106 li
426.907 229.626 mo
427.386 228.427 li
427.386 230.586 li
426.907 229.626 li
426.187 229.146 li
425.227 228.427 li
423.067 228.427 li
421.867 229.146 li
421.386 229.626 li
421.386 230.586 li
421.867 231.307 li
423.067 231.787 li
425.707 232.747 li
426.907 233.227 li
427.386 233.947 li
421.386 230.106 mo
421.867 230.586 li
423.067 231.307 li
425.707 232.267 li
426.907 232.747 li
427.386 233.227 li
427.386 234.907 li
426.907 235.626 li
425.707 236.106 li
423.546 236.106 li
422.586 235.626 li
421.867 234.907 li
421.386 233.947 li
421.386 236.106 li
421.867 234.907 li
431.707 229.626 mo
431.707 230.106 li
431.227 230.106 li
431.227 229.626 li
431.707 229.146 li
432.667 228.427 li
434.827 228.427 li
436.027 229.146 li
436.506 229.626 li
436.987 230.586 li
436.987 234.427 li
437.707 235.626 li
438.187 236.106 li
436.506 229.626 mo
436.506 234.427 li
436.987 235.626 li
438.187 236.106 li
438.667 236.106 li
436.506 230.586 mo
436.027 231.307 li
432.667 231.787 li
431.227 232.267 li
430.506 233.227 li
430.506 234.427 li
431.227 235.626 li
432.667 236.106 li
434.346 236.106 li
435.546 235.626 li
436.506 234.427 li
432.667 231.787 mo
431.707 232.267 li
431.227 233.227 li
431.227 234.427 li
431.707 235.626 li
432.667 236.106 li
442.506 228.427 mo
442.506 236.106 li
442.987 228.427 mo
442.987 236.106 li
442.987 230.106 mo
444.187 229.146 li
445.626 228.427 li
446.827 228.427 li
448.267 229.146 li
448.987 230.106 li
448.987 236.106 li
446.827 228.427 mo
447.787 229.146 li
448.267 230.106 li
448.267 236.106 li
448.987 230.106 mo
449.947 229.146 li
451.626 228.427 li
452.586 228.427 li
454.267 229.146 li
454.747 230.106 li
454.747 236.106 li
452.586 228.427 mo
453.787 229.146 li
454.267 230.106 li
454.267 236.106 li
440.827 228.427 mo
442.987 228.427 li
440.827 236.106 mo
444.667 236.106 li
446.827 236.106 mo
450.667 236.106 li
452.586 236.106 mo
456.426 236.106 li
460.267 228.427 mo
460.267 239.707 li
460.747 228.427 mo
460.747 239.707 li
460.747 230.106 mo
461.947 229.146 li
462.907 228.427 li
464.107 228.427 li
465.546 229.146 li
466.747 230.106 li
467.227 231.787 li
467.227 232.747 li
466.747 234.427 li
465.546 235.626 li
464.107 236.106 li
462.907 236.106 li
461.947 235.626 li
460.747 234.427 li
464.107 228.427 mo
465.067 229.146 li
466.267 230.106 li
466.747 231.787 li
466.747 232.747 li
466.267 234.427 li
465.067 235.626 li
464.107 236.106 li
458.586 228.427 mo
460.747 228.427 li
458.586 239.707 mo
462.426 239.707 li
471.546 224.827 mo
471.546 236.106 li
472.027 224.827 mo
472.027 236.106 li
469.867 224.827 mo
472.027 224.827 li
469.867 236.106 mo
473.707 236.106 li
476.827 231.787 mo
483.306 231.787 li
483.306 230.586 li
482.827 229.626 li
482.346 229.146 li
481.147 228.427 li
479.707 228.427 li
478.027 229.146 li
476.827 230.106 li
476.346 231.787 li
476.346 232.747 li
476.827 234.427 li
478.027 235.626 li
479.707 236.106 li
480.667 236.106 li
482.346 235.626 li
483.306 234.427 li
482.827 231.787 mo
482.827 230.106 li
482.346 229.146 li
479.707 228.427 mo
478.506 229.146 li
477.546 230.106 li
476.827 231.787 li
476.827 232.747 li
477.546 234.427 li
478.506 235.626 li
479.707 236.106 li
485.227 236.106 mo
@
45.5464 406.747 mo
553.147 406.747 li
553.147 305.227 li
45.5464 305.227 li
45.5464 406.747 li
553.147 406.747 li
45.5464 406.747 mo
553.147 406.747 li
45.5464 406.747 mo
45.5464 401.947 li
70.9868 406.747 mo
70.9868 401.947 li
96.1865 406.747 mo
96.1865 401.947 li
121.626 406.747 mo
121.626 401.947 li
147.066 406.747 mo
147.066 396.907 li
172.507 406.747 mo
172.507 401.947 li
197.707 406.747 mo
197.707 401.947 li
223.146 406.747 mo
223.146 401.947 li
248.586 406.747 mo
248.586 401.947 li
274.027 406.747 mo
274.027 396.907 li
299.227 406.747 mo
299.227 401.947 li
324.667 406.747 mo
324.667 401.947 li
350.107 406.747 mo
350.107 401.947 li
375.546 406.747 mo
375.546 401.947 li
400.747 406.747 mo
400.747 396.907 li
426.187 406.747 mo
426.187 401.947 li
451.626 406.747 mo
451.626 401.947 li
477.067 406.747 mo
477.067 401.947 li
502.267 406.747 mo
502.267 401.947 li
527.707 406.747 mo
527.707 396.907 li
553.147 406.747 mo
553.147 401.947 li
45.5464 305.227 mo
553.147 305.227 li
45.5464 305.227 mo
45.5464 310.267 li
70.9868 305.227 mo
70.9868 310.267 li
96.1865 305.227 mo
96.1865 310.267 li
121.626 305.227 mo
121.626 310.267 li
147.066 305.227 mo
147.066 315.067 li
172.507 305.227 mo
172.507 310.267 li
197.707 305.227 mo
197.707 310.267 li
223.146 305.227 mo
223.146 310.267 li
248.586 305.227 mo
248.586 310.267 li
274.027 305.227 mo
274.027 315.067 li
299.227 305.227 mo
299.227 310.267 li
324.667 305.227 mo
324.667 310.267 li
350.107 305.227 mo
350.107 310.267 li
375.546 305.227 mo
375.546 310.267 li
400.747 305.227 mo
400.747 315.067 li
426.187 305.227 mo
426.187 310.267 li
451.626 305.227 mo
451.626 310.267 li
477.067 305.227 mo
477.067 310.267 li
502.267 305.227 mo
502.267 310.267 li
527.707 305.227 mo
527.707 315.067 li
553.147 305.227 mo
553.147 310.267 li
45.5464 406.747 mo
45.5464 305.227 li
45.5464 406.747 mo
55.3867 406.747 li
27.3066 407.227 mo
27.7866 408.667 li
27.7866 408.667 mo
29.2266 409.626 li
31.6265 410.107 li
32.8267 410.107 li
35.2266 409.626 li
36.6665 408.667 li
37.1465 407.227 li
37.1465 406.267 li
36.6665 404.827 li
35.2266 404.107 li
32.8267 403.626 li
31.6265 403.626 li
29.2266 404.107 li
27.7866 404.827 li
27.3066 406.267 li
27.3066 407.227 li
27.7866 408.187 li
28.2666 408.667 li
29.2266 409.147 li
31.6265 409.626 li
32.8267 409.626 li
35.2266 409.147 li
36.1865 408.667 li
36.6665 408.187 li
37.1465 407.227 li
37.1465 406.267 mo
36.6665 405.307 li
36.1865 404.827 li
35.2266 404.586 li
32.8267 404.107 li
31.6265 404.107 li
29.2266 404.586 li
28.2666 404.827 li
27.7866 405.307 li
27.3066 406.267 li
45.5464 402.187 mo
50.3467 402.187 li
45.5464 397.626 mo
50.3467 397.626 li
45.5464 392.827 mo
50.3467 392.827 li
45.5464 388.267 mo
50.3467 388.267 li
45.5464 383.707 mo
55.3867 383.707 li
27.3066 386.107 mo
32.1064 387.067 li
31.1465 386.107 li
30.6665 384.667 li
30.6665 383.227 li
31.1465 381.787 li
32.1064 380.827 li
33.3066 380.586 li
34.2666 380.586 li
35.7065 380.827 li
36.6665 381.787 li
37.1465 383.227 li
37.1465 384.667 li
36.6665 386.107 li
36.1865 386.586 li
35.2266 387.067 li
34.7466 387.067 li
34.2666 386.586 li
34.7466 386.107 li
35.2266 386.586 li
30.6665 383.227 mo
31.1465 382.267 li
32.1064 381.307 li
33.3066 380.827 li
34.2666 380.827 li
35.7065 381.307 li
36.6665 382.267 li
37.1465 383.227 li
27.3066 386.107 mo
27.3066 381.307 li
27.7866 386.107 mo
27.7866 383.707 li
27.3066 381.307 li
45.5464 379.147 mo
50.3467 379.147 li
45.5464 374.586 mo
50.3467 374.586 li
45.5464 369.787 mo
50.3467 369.787 li
45.5464 365.227 mo
50.3467 365.227 li
45.5464 360.667 mo
55.3867 360.667 li
29.2266 367.147 mo
28.7466 366.187 li
27.3066 364.747 li
37.1465 364.747 li
27.7866 365.227 mo
37.1465 365.227 li
37.1465 367.147 mo
37.1465 363.067 li
27.3066 356.586 mo
27.7866 357.787 li
29.2266 358.747 li
31.6265 359.227 li
32.8267 359.227 li
35.2266 358.747 li
36.6665 357.787 li
37.1465 356.586 li
37.1465 355.626 li
36.6665 354.187 li
35.2266 353.227 li
32.8267 352.747 li
31.6265 352.747 li
29.2266 353.227 li
27.7866 354.187 li
27.3066 355.626 li
27.3066 356.586 li
27.7866 357.307 li
28.2666 357.787 li
29.2266 358.267 li
31.6265 358.747 li
32.8267 358.747 li
35.2266 358.267 li
36.1865 357.787 li
36.6665 357.307 li
37.1465 356.586 li
37.1465 355.626 mo
36.6665 354.667 li
36.1865 354.187 li
35.2266 353.707 li
32.8267 353.227 li
31.6265 353.227 li
29.2266 353.707 li
28.2666 354.187 li
27.7866 354.667 li
27.3066 355.626 li
45.5464 356.107 mo
50.3467 356.107 li
45.5464 351.307 mo
50.3467 351.307 li
45.5464 346.747 mo
50.3467 346.747 li
45.5464 342.187 mo
50.3467 342.187 li
45.5464 337.626 mo
55.3867 337.626 li
29.2266 344.107 mo
28.7466 343.147 li
27.3066 341.707 li
37.1465 341.707 li
27.7866 342.187 mo
37.1465 342.187 li
37.1465 344.107 mo
37.1465 339.787 li
27.3066 335.227 mo
32.1064 336.187 li
31.1465 335.227 li
30.6665 333.787 li
30.6665 332.586 li
31.1465 331.147 li
32.1064 330.187 li
33.3066 329.707 li
34.2666 329.707 li
35.7065 330.187 li
36.6665 331.147 li
37.1465 332.586 li
37.1465 333.787 li
36.6665 335.227 li
36.1865 335.707 li
35.2266 336.187 li
34.7466 336.187 li
34.2666 335.707 li
34.7466 335.227 li
35.2266 335.707 li
30.6665 332.586 mo
31.1465 331.626 li
32.1064 330.667 li
33.3066 330.187 li
34.2666 330.187 li
35.7065 330.667 li
36.6665 331.626 li
37.1465 332.586 li
27.3066 335.227 mo
27.3066 330.667 li
27.7866 335.227 mo
27.7866 332.827 li
27.3066 330.667 li
45.5464 333.067 mo
50.3467 333.067 li
45.5464 328.267 mo
50.3467 328.267 li
45.5464 323.707 mo
50.3467 323.707 li
45.5464 319.147 mo
50.3467 319.147 li
45.5464 314.586 mo
55.3867 314.586 li
29.2266 321.787 mo
29.7065 321.307 li
30.1865 321.787 li
29.7065 322.267 li
29.2266 322.267 li
28.2666 321.787 li
27.7866 321.307 li
27.3066 320.107 li
27.3066 318.187 li
27.7866 316.747 li
28.2666 316.267 li
29.2266 315.787 li
30.1865 315.787 li
31.1465 316.267 li
32.1064 317.707 li
32.8267 320.107 li
33.3066 321.067 li
34.2666 321.787 li
35.7065 322.267 li
37.1465 322.267 li
27.3066 318.187 mo
27.7866 317.227 li
28.2666 316.747 li
29.2266 316.267 li
30.1865 316.267 li
31.1465 316.747 li
32.1064 318.187 li
32.8267 320.107 li
36.1865 322.267 mo
35.7065 321.787 li
35.7065 321.067 li
36.6665 318.667 li
36.6665 317.227 li
36.1865 316.267 li
35.7065 315.787 li
35.7065 321.067 mo
37.1465 318.667 li
37.1465 316.747 li
36.6665 316.267 li
35.7065 315.787 li
34.7466 315.787 li
27.3066 310.267 mo
27.7866 311.707 li
29.2266 312.667 li
31.6265 313.147 li
32.8267 313.147 li
35.2266 312.667 li
36.6665 311.707 li
37.1465 310.267 li
37.1465 309.307 li
36.6665 308.106 li
35.2266 307.146 li
32.8267 306.667 li
31.6265 306.667 li
29.2266 307.146 li
27.7866 308.106 li
27.3066 309.307 li
27.3066 310.267 li
27.7866 311.227 li
28.2666 311.707 li
29.2266 312.187 li
31.6265 312.667 li
32.8267 312.667 li
35.2266 312.187 li
36.1865 311.707 li
36.6665 311.227 li
37.1465 310.267 li
37.1465 309.307 mo
36.6665 308.586 li
36.1865 308.106 li
35.2266 307.626 li
32.8267 307.146 li
31.6265 307.146 li
29.2266 307.626 li
28.2666 308.106 li
27.7866 308.586 li
27.3066 309.307 li
45.5464 309.787 mo
50.3467 309.787 li
45.5464 305.227 mo
50.3467 305.227 li
553.147 406.747 mo
553.147 305.227 li
553.147 406.747 mo
543.306 406.747 li
553.147 402.187 mo
548.107 402.187 li
553.147 397.626 mo
548.107 397.626 li
553.147 392.827 mo
548.107 392.827 li
553.147 388.267 mo
548.107 388.267 li
553.147 383.707 mo
543.306 383.707 li
553.147 379.147 mo
548.107 379.147 li
553.147 374.586 mo
548.107 374.586 li
553.147 369.787 mo
548.107 369.787 li
553.147 365.227 mo
548.107 365.227 li
553.147 360.667 mo
543.306 360.667 li
553.147 356.107 mo
548.107 356.107 li
553.147 351.307 mo
548.107 351.307 li
553.147 346.747 mo
548.107 346.747 li
553.147 342.187 mo
548.107 342.187 li
553.147 337.626 mo
543.306 337.626 li
553.147 333.067 mo
548.107 333.067 li
553.147 328.267 mo
548.107 328.267 li
553.147 323.707 mo
548.107 323.707 li
553.147 319.147 mo
548.107 319.147 li
553.147 314.586 mo
543.306 314.586 li
553.147 309.787 mo
548.107 309.787 li
553.147 305.227 mo
548.107 305.227 li
0 0 0 rgb
@
45.5464 406.747 mo
204.187 406.747 li
204.187 397.626 li
216.907 397.626 li
216.907 393.067 li
229.626 393.067 li
229.626 397.626 li
242.106 397.626 li
242.106 406.747 li
267.546 406.747 li
267.546 402.187 li
292.987 402.187 li
292.987 388.267 li
305.707 388.267 li
305.707 393.067 li
318.426 393.067 li
318.426 397.626 li
331.147 397.626 li
331.147 402.187 li
343.626 402.187 li
343.626 406.747 li
432.667 406.747 li
432.667 402.187 li
445.147 402.187 li
445.147 406.747 li
553.147 406.747 li
45.5464 406.747 li
0 .392157 0 rgb
ef
342.907 326.346 mo
341.227 326.827 li
340.027 327.787 li
339.546 328.987 li
339.067 331.147 li
339.067 332.827 li
339.546 334.987 li
340.027 335.947 li
341.227 337.147 li
342.907 337.626 li
343.867 337.626 li
345.546 337.147 li
346.506 335.947 li
346.987 334.987 li
347.707 332.827 li
347.707 331.147 li
346.987 328.987 li
346.506 327.787 li
345.546 326.827 li
343.867 326.346 li
342.907 326.346 li
341.707 326.827 li
340.506 327.787 li
340.027 328.987 li
339.546 331.147 li
339.546 332.827 li
340.027 334.987 li
340.506 335.947 li
341.707 337.147 li
342.907 337.626 li
343.867 337.626 mo
344.827 337.147 li
346.027 335.947 li
346.506 334.987 li
346.987 332.827 li
346.987 331.147 li
346.506 328.987 li
346.027 327.787 li
344.827 326.827 li
343.867 326.346 li
357.787 327.787 mo
358.506 326.346 li
358.506 329.466 li
357.787 327.787 li
356.827 326.827 li
355.147 326.346 li
353.466 326.346 li
352.027 326.827 li
350.827 327.787 li
350.827 328.987 li
351.306 329.947 li
352.027 330.667 li
352.987 331.147 li
356.346 332.107 li
357.306 332.827 li
358.506 333.787 li
350.827 328.987 mo
352.027 329.947 li
352.987 330.667 li
356.346 331.626 li
357.306 332.107 li
357.787 332.827 li
358.506 333.787 li
358.506 335.947 li
357.306 337.147 li
355.626 337.626 li
354.187 337.626 li
352.506 337.147 li
351.306 335.947 li
350.827 334.267 li
350.827 337.626 li
351.306 335.947 li
362.827 326.346 mo
362.827 337.626 li
363.306 326.346 mo
363.306 337.626 li
361.147 326.346 mo
364.987 326.346 li
361.147 337.626 mo
364.987 337.626 li
368.586 326.346 mo
368.586 337.626 li
369.067 326.346 mo
369.067 337.626 li
366.907 326.346 mo
373.386 326.346 li
375.067 326.827 li
375.546 327.307 li
376.267 328.506 li
376.267 329.466 li
375.546 330.667 li
375.067 331.147 li
373.386 331.626 li
369.067 331.626 li
373.386 326.346 mo
374.586 326.827 li
375.067 327.307 li
375.546 328.506 li
375.546 329.466 li
375.067 330.667 li
374.586 331.147 li
373.386 331.626 li
366.907 337.626 mo
370.747 337.626 li
371.947 331.626 mo
372.907 332.107 li
373.386 332.827 li
375.067 336.426 li
375.546 337.147 li
376.267 337.147 li
376.747 336.426 li
372.907 332.107 mo
373.386 333.307 li
374.586 337.147 li
375.067 337.626 li
376.267 337.626 li
376.747 336.426 li
376.747 335.947 li
380.586 326.346 mo
380.586 337.626 li
381.067 326.346 mo
381.067 337.626 li
378.907 326.346 mo
382.747 326.346 li
378.907 337.626 mo
382.747 337.626 li
392.346 327.787 mo
392.827 326.346 li
392.827 329.466 li
392.346 327.787 li
391.147 326.827 li
389.707 326.346 li
388.027 326.346 li
386.346 326.827 li
385.386 327.787 li
385.386 328.987 li
385.867 329.947 li
386.346 330.667 li
387.546 331.147 li
390.667 332.107 li
391.867 332.827 li
392.827 333.787 li
385.386 328.987 mo
386.346 329.947 li
387.546 330.667 li
390.667 331.626 li
391.867 332.107 li
392.346 332.827 li
392.827 333.787 li
392.827 335.947 li
391.867 337.147 li
390.187 337.626 li
388.506 337.626 li
386.827 337.147 li
385.867 335.947 li
385.386 334.267 li
385.386 337.626 li
385.867 335.947 li
410.107 331.147 mo
410.586 329.947 li
410.586 332.107 li
410.107 331.147 li
409.626 330.667 li
408.426 329.947 li
406.267 329.947 li
405.306 330.667 li
404.827 331.147 li
404.827 332.107 li
405.306 332.827 li
406.267 333.307 li
408.907 334.267 li
410.107 334.987 li
410.586 335.466 li
404.827 331.626 mo
405.306 332.107 li
406.267 332.827 li
408.907 333.787 li
410.107 334.267 li
410.586 334.987 li
410.586 336.426 li
410.107 337.147 li
408.907 337.626 li
406.987 337.626 li
405.787 337.147 li
405.306 336.426 li
404.827 335.466 li
404.827 337.626 li
405.306 336.426 li
414.907 331.147 mo
414.907 331.626 li
414.426 331.626 li
414.426 331.147 li
414.907 330.667 li
416.107 329.947 li
418.267 329.947 li
419.227 330.667 li
419.707 331.147 li
420.426 332.107 li
420.426 335.947 li
420.907 337.147 li
421.386 337.626 li
419.707 331.147 mo
419.707 335.947 li
420.426 337.147 li
421.386 337.626 li
421.867 337.626 li
419.707 332.107 mo
419.227 332.827 li
416.107 333.307 li
414.426 333.787 li
413.947 334.987 li
413.947 335.947 li
414.426 337.147 li
416.107 337.626 li
417.546 337.626 li
418.747 337.147 li
419.707 335.947 li
416.107 333.307 mo
414.907 333.787 li
414.426 334.987 li
414.426 335.947 li
414.907 337.147 li
416.107 337.626 li
425.707 329.947 mo
425.707 337.626 li
426.187 329.947 mo
426.187 337.626 li
426.187 331.626 mo
427.386 330.667 li
429.067 329.947 li
430.027 329.947 li
431.707 330.667 li
432.187 331.626 li
432.187 337.626 li
430.027 329.947 mo
431.227 330.667 li
431.707 331.626 li
431.707 337.626 li
432.187 331.626 mo
433.386 330.667 li
434.827 329.947 li
436.027 329.947 li
437.707 330.667 li
438.187 331.626 li
438.187 337.626 li
436.027 329.947 mo
436.987 330.667 li
437.707 331.626 li
437.707 337.626 li
424.027 329.947 mo
426.187 329.947 li
424.027 337.626 mo
427.867 337.626 li
430.027 337.626 mo
433.867 337.626 li
436.027 337.626 mo
439.626 337.626 li
443.466 329.947 mo
443.466 341.466 li
443.947 329.947 mo
443.947 341.466 li
443.947 331.626 mo
445.147 330.667 li
446.107 329.947 li
447.306 329.947 li
448.987 330.667 li
449.947 331.626 li
450.426 333.307 li
450.426 334.267 li
449.947 335.947 li
448.987 337.147 li
447.306 337.626 li
446.107 337.626 li
445.147 337.147 li
443.947 335.947 li
447.306 329.947 mo
448.267 330.667 li
449.466 331.626 li
449.947 333.307 li
449.947 334.267 li
449.466 335.947 li
448.267 337.147 li
447.306 337.626 li
441.787 329.947 mo
443.947 329.947 li
441.787 341.466 mo
445.626 341.466 li
454.747 326.346 mo
454.747 337.626 li
455.466 326.346 mo
455.466 337.626 li
453.306 326.346 mo
455.466 326.346 li
453.306 337.626 mo
456.907 337.626 li
460.267 333.307 mo
466.747 333.307 li
466.747 332.107 li
466.027 331.147 li
465.546 330.667 li
464.586 329.947 li
462.907 329.947 li
461.227 330.667 li
460.267 331.626 li
459.787 333.307 li
459.787 334.267 li
460.267 335.947 li
461.227 337.147 li
462.907 337.626 li
463.867 337.626 li
465.546 337.147 li
466.747 335.947 li
466.027 333.307 mo
466.027 331.626 li
465.546 330.667 li
462.907 329.947 mo
461.707 330.667 li
460.747 331.626 li
460.267 333.307 li
460.267 334.267 li
460.747 335.947 li
461.707 337.147 li
462.907 337.626 li
468.426 337.626 mo
@
45.5464 508.267 mo
553.147 508.267 li
553.147 406.747 li
45.5464 406.747 li
45.5464 508.267 li
553.147 508.267 li
45.5464 508.267 mo
553.147 508.267 li
45.5464 508.267 mo
45.5464 503.466 li
70.9868 508.267 mo
70.9868 503.466 li
96.1865 508.267 mo
96.1865 503.466 li
121.626 508.267 mo
121.626 503.466 li
147.066 508.267 mo
147.066 498.426 li
145.146 518.586 mo
146.106 518.107 li
147.546 516.667 li
147.546 526.506 li
147.066 517.147 mo
147.066 526.506 li
145.146 526.506 mo
149.227 526.506 li
172.507 508.267 mo
172.507 503.466 li
197.707 508.267 mo
197.707 503.466 li
223.146 508.267 mo
223.146 503.466 li
248.586 508.267 mo
248.586 503.466 li
274.027 508.267 mo
274.027 498.426 li
271.146 518.586 mo
271.626 519.067 li
271.146 519.546 li
270.667 519.067 li
270.667 518.586 li
271.146 517.626 li
271.626 517.147 li
271.626 517.147 mo
273.066 516.667 li
274.747 516.667 li
276.187 517.147 li
276.667 517.626 li
277.146 518.586 li
277.146 519.546 li
276.667 520.506 li
275.227 521.227 li
273.066 522.187 li
272.106 522.667 li
271.146 523.626 li
270.667 525.067 li
270.667 526.506 li
274.747 516.667 mo
275.707 517.147 li
276.187 517.626 li
276.667 518.586 li
276.667 519.546 li
276.187 520.506 li
274.747 521.227 li
273.066 522.187 li
270.667 525.546 mo
271.146 525.067 li
272.106 525.067 li
274.507 526.027 li
275.707 526.027 li
276.667 525.546 li
277.146 525.067 li
272.106 525.067 mo
274.507 526.506 li
276.187 526.506 li
276.667 526.027 li
277.146 525.067 li
277.146 524.107 li
299.227 508.267 mo
299.227 503.466 li
324.667 508.267 mo
324.667 503.466 li
350.107 508.267 mo
350.107 503.466 li
375.546 508.267 mo
375.546 503.466 li
400.747 508.267 mo
400.747 498.426 li
398.107 518.586 mo
398.586 519.067 li
398.107 519.546 li
397.626 519.067 li
397.626 518.586 li
398.107 517.626 li
398.586 517.147 li
400.027 516.667 li
401.707 516.667 li
403.147 517.147 li
403.626 518.107 li
403.626 519.546 li
403.147 520.506 li
401.707 520.987 li
400.267 520.987 li
401.707 516.667 mo
402.667 517.147 li
403.147 518.107 li
403.147 519.546 li
402.667 520.506 li
401.707 520.987 li
402.667 521.227 li
403.626 522.187 li
404.107 523.147 li
404.107 524.586 li
403.626 525.546 li
403.147 526.027 li
401.707 526.506 li
400.027 526.506 li
398.586 526.027 li
398.107 525.546 li
397.626 524.586 li
397.626 524.107 li
398.107 523.626 li
398.586 524.107 li
398.107 524.586 li
403.147 521.707 mo
403.626 523.147 li
403.626 524.586 li
403.147 525.546 li
402.667 526.027 li
401.707 526.506 li
426.187 508.267 mo
426.187 503.466 li
451.626 508.267 mo
451.626 503.466 li
477.067 508.267 mo
477.067 503.466 li
502.267 508.267 mo
502.267 503.466 li
527.707 508.267 mo
527.707 498.426 li
528.667 517.626 mo
528.667 526.506 li
529.147 516.667 mo
529.147 526.506 li
529.147 516.667 mo
524.107 523.626 li
531.546 523.626 li
527.227 526.506 mo
530.586 526.506 li
553.147 508.267 mo
553.147 503.466 li
45.5464 406.747 mo
553.147 406.747 li
45.5464 406.747 mo
45.5464 411.787 li
70.9868 406.747 mo
70.9868 411.787 li
96.1865 406.747 mo
96.1865 411.787 li
121.626 406.747 mo
121.626 411.787 li
147.066 406.747 mo
147.066 416.586 li
172.507 406.747 mo
172.507 411.787 li
197.707 406.747 mo
197.707 411.787 li
223.146 406.747 mo
223.146 411.787 li
248.586 406.747 mo
248.586 411.787 li
274.027 406.747 mo
274.027 416.586 li
299.227 406.747 mo
299.227 411.787 li
324.667 406.747 mo
324.667 411.787 li
350.107 406.747 mo
350.107 411.787 li
375.546 406.747 mo
375.546 411.787 li
400.747 406.747 mo
400.747 416.586 li
426.187 406.747 mo
426.187 411.787 li
451.626 406.747 mo
451.626 411.787 li
477.067 406.747 mo
477.067 411.787 li
502.267 406.747 mo
502.267 411.787 li
527.707 406.747 mo
527.707 416.586 li
553.147 406.747 mo
553.147 411.787 li
45.5464 508.267 mo
45.5464 406.747 li
45.5464 508.267 mo
55.3867 508.267 li
27.3066 508.747 mo
27.7866 510.187 li
29.2266 511.147 li
31.6265 511.626 li
32.8267 511.626 li
35.2266 511.147 li
36.6665 510.187 li
37.1465 508.747 li
37.1465 507.787 li
36.6665 506.586 li
35.2266 505.626 li
32.8267 505.147 li
31.6265 505.147 li
29.2266 505.626 li
27.7866 506.586 li
27.3066 507.787 li
27.3066 508.747 li
27.7866 509.707 li
28.2666 510.187 li
29.2266 510.667 li
31.6265 511.147 li
32.8267 511.147 li
35.2266 510.667 li
36.1865 510.187 li
36.6665 509.707 li
37.1465 508.747 li
37.1465 507.787 mo
36.6665 506.827 li
35.2266 506.107 li
32.8267 505.626 li
31.6265 505.626 li
29.2266 506.107 li
27.7866 506.827 li
27.3066 507.787 li
45.5464 503.707 mo
50.3467 503.707 li
45.5464 499.147 mo
50.3467 499.147 li
45.5464 494.346 mo
50.3467 494.346 li
45.5464 489.787 mo
50.3467 489.787 li
45.5464 485.227 mo
55.3867 485.227 li
27.3066 487.626 mo
32.1064 488.586 li
31.1465 487.626 li
30.6665 486.187 li
30.6665 484.747 li
31.1465 483.307 li
32.1064 482.586 li
33.3066 482.107 li
34.2666 482.107 li
35.7065 482.586 li
36.6665 483.307 li
37.1465 484.747 li
37.1465 486.187 li
36.6665 487.626 li
36.1865 488.107 li
35.2266 488.586 li
34.7466 488.586 li
34.2666 488.107 li
34.7466 487.626 li
35.2266 488.107 li
30.6665 484.747 mo
31.1465 483.787 li
32.1064 482.827 li
33.3066 482.586 li
34.2666 482.586 li
35.7065 482.827 li
36.6665 483.787 li
37.1465 484.747 li
27.3066 487.626 mo
27.3066 482.827 li
27.7866 487.626 mo
27.7866 485.227 li
27.3066 482.827 li
45.5464 480.667 mo
50.3467 480.667 li
45.5464 476.107 mo
50.3467 476.107 li
45.5464 471.307 mo
50.3467 471.307 li
45.5464 466.747 mo
50.3467 466.747 li
45.5464 462.187 mo
55.3867 462.187 li
29.2266 468.667 mo
28.7466 467.707 li
27.3066 466.267 li
37.1465 466.267 li
27.7866 466.747 mo
37.1465 466.747 li
37.1465 468.667 mo
37.1465 464.586 li
27.3066 458.107 mo
27.7866 459.307 li
29.2266 460.267 li
31.6265 460.747 li
32.8267 460.747 li
35.2266 460.267 li
36.6665 459.307 li
37.1465 458.107 li
37.1465 457.147 li
36.6665 455.707 li
35.2266 454.747 li
32.8267 454.267 li
31.6265 454.267 li
29.2266 454.747 li
27.7866 455.707 li
27.3066 457.147 li
27.3066 458.107 li
27.7866 459.067 li
29.2266 459.787 li
31.6265 460.267 li
32.8267 460.267 li
35.2266 459.787 li
36.6665 459.067 li
37.1465 458.107 li
37.1465 457.147 mo
36.6665 456.187 li
36.1865 455.707 li
35.2266 455.227 li
32.8267 454.747 li
31.6265 454.747 li
29.2266 455.227 li
28.2666 455.707 li
27.7866 456.187 li
27.3066 457.147 li
45.5464 457.626 mo
50.3467 457.626 li
45.5464 452.827 mo
50.3467 452.827 li
45.5464 448.267 mo
50.3467 448.267 li
45.5464 443.707 mo
50.3467 443.707 li
45.5464 439.147 mo
55.3867 439.147 li
29.2266 445.626 mo
28.7466 444.667 li
27.3066 443.227 li
37.1465 443.227 li
27.7866 443.707 mo
37.1465 443.707 li
37.1465 445.626 mo
37.1465 441.307 li
27.3066 436.747 mo
32.1064 437.707 li
31.1465 436.747 li
30.6665 435.307 li
30.6665 434.107 li
31.1465 432.667 li
32.1064 431.707 li
33.3066 431.227 li
34.2666 431.227 li
35.7065 431.707 li
36.6665 432.667 li
37.1465 434.107 li
37.1465 435.307 li
36.6665 436.747 li
36.1865 437.227 li
35.2266 437.707 li
34.7466 437.707 li
34.2666 437.227 li
34.7466 436.747 li
35.2266 437.227 li
30.6665 434.107 mo
31.1465 433.147 li
32.1064 432.187 li
33.3066 431.707 li
34.2666 431.707 li
35.7065 432.187 li
36.6665 433.147 li
37.1465 434.107 li
27.3066 436.747 mo
27.3066 432.187 li
27.7866 436.747 mo
27.7866 434.346 li
27.3066 432.187 li
45.5464 434.586 mo
50.3467 434.586 li
45.5464 429.787 mo
50.3467 429.787 li
45.5464 425.227 mo
50.3467 425.227 li
45.5464 420.667 mo
50.3467 420.667 li
45.5464 416.107 mo
55.3867 416.107 li
29.2266 423.307 mo
29.7065 422.827 li
30.1865 423.307 li
29.7065 423.787 li
29.2266 423.787 li
28.2666 423.307 li
27.7866 422.827 li
27.3066 421.626 li
27.3066 419.707 li
27.7866 418.267 li
28.2666 417.787 li
29.2266 417.307 li
30.1865 417.307 li
31.1465 417.787 li
32.1064 419.227 li
32.8267 421.626 li
33.3066 422.586 li
34.2666 423.307 li
35.7065 423.787 li
37.1465 423.787 li
27.3066 419.707 mo
27.7866 418.747 li
28.2666 418.267 li
29.2266 417.787 li
30.1865 417.787 li
31.1465 418.267 li
32.1064 419.707 li
32.8267 421.626 li
36.1865 423.787 mo
35.7065 423.307 li
35.7065 422.586 li
36.6665 420.187 li
36.6665 418.747 li
36.1865 417.787 li
35.7065 417.307 li
35.7065 422.586 mo
37.1465 420.187 li
37.1465 418.267 li
0 0 0 rgb
@
37.1465 418.267 mo
36.6665 417.787 li
35.7065 417.307 li
34.7466 417.307 li
27.3066 411.787 mo
27.7866 413.227 li
29.2266 414.187 li
31.6265 414.667 li
32.8267 414.667 li
35.2266 414.187 li
36.6665 413.227 li
37.1465 411.787 li
37.1465 410.827 li
36.6665 409.626 li
35.2266 408.667 li
32.8267 408.187 li
31.6265 408.187 li
29.2266 408.667 li
27.7866 409.626 li
27.3066 410.827 li
27.3066 411.787 li
27.7866 412.747 li
28.2666 413.227 li
29.2266 413.707 li
31.6265 414.187 li
32.8267 414.187 li
35.2266 413.707 li
36.1865 413.227 li
36.6665 412.747 li
37.1465 411.787 li
37.1465 410.827 mo
36.6665 410.107 li
36.1865 409.626 li
35.2266 409.147 li
32.8267 408.667 li
31.6265 408.667 li
29.2266 409.147 li
28.2666 409.626 li
27.7866 410.107 li
27.3066 410.827 li
45.5464 411.307 mo
50.3467 411.307 li
45.5464 406.747 mo
50.3467 406.747 li
553.147 508.267 mo
553.147 406.747 li
553.147 508.267 mo
543.306 508.267 li
553.147 503.707 mo
548.107 503.707 li
553.147 499.147 mo
548.107 499.147 li
553.147 494.346 mo
548.107 494.346 li
553.147 489.787 mo
548.107 489.787 li
553.147 485.227 mo
543.306 485.227 li
553.147 480.667 mo
548.107 480.667 li
553.147 476.107 mo
548.107 476.107 li
553.147 471.307 mo
548.107 471.307 li
553.147 466.747 mo
548.107 466.747 li
553.147 462.187 mo
543.306 462.187 li
553.147 457.626 mo
548.107 457.626 li
553.147 452.827 mo
548.107 452.827 li
553.147 448.267 mo
548.107 448.267 li
553.147 443.707 mo
548.107 443.707 li
553.147 439.147 mo
543.306 439.147 li
553.147 434.586 mo
548.107 434.586 li
553.147 429.787 mo
548.107 429.787 li
553.147 425.227 mo
548.107 425.227 li
553.147 420.667 mo
548.107 420.667 li
553.147 416.107 mo
543.306 416.107 li
553.147 411.307 mo
548.107 411.307 li
553.147 406.747 mo
548.107 406.747 li
269.227 534.907 mo
269.227 544.506 li
269.707 534.907 mo
269.707 544.506 li
267.787 534.907 mo
273.546 534.907 li
274.747 535.386 li
275.227 535.626 li
275.707 536.586 li
275.707 537.546 li
275.227 538.506 li
274.747 538.987 li
273.546 539.466 li
269.707 539.466 li
273.546 534.907 mo
274.267 535.386 li
274.747 535.626 li
275.227 536.586 li
275.227 537.546 li
274.747 538.506 li
274.267 538.987 li
273.546 539.466 li
267.787 544.506 mo
271.146 544.506 li
272.106 539.466 mo
273.066 539.947 li
273.546 540.426 li
274.747 543.546 li
275.227 544.027 li
275.707 544.027 li
276.187 543.546 li
273.066 539.947 mo
273.546 540.907 li
274.267 544.027 li
274.747 544.506 li
275.707 544.506 li
276.187 543.546 li
276.187 543.067 li
279.066 540.907 mo
284.586 540.907 li
284.586 539.947 li
284.107 538.987 li
283.626 538.506 li
282.667 538.027 li
281.227 538.027 li
279.787 538.506 li
279.066 539.466 li
278.586 540.907 li
278.586 541.626 li
279.066 543.067 li
279.787 544.027 li
281.227 544.506 li
282.187 544.506 li
283.626 544.027 li
284.586 543.067 li
284.107 540.907 mo
284.107 539.466 li
283.626 538.506 li
281.227 538.027 mo
280.267 538.506 li
279.546 539.466 li
279.066 540.907 li
279.066 541.626 li
279.546 543.067 li
280.267 544.027 li
281.227 544.506 li
292.747 534.907 mo
292.747 544.506 li
293.227 534.907 mo
293.227 544.506 li
292.747 539.466 mo
291.787 538.506 li
291.067 538.027 li
290.107 538.027 li
288.667 538.506 li
287.707 539.466 li
287.227 540.907 li
287.227 541.626 li
287.707 543.067 li
288.667 544.027 li
290.107 544.506 li
291.067 544.506 li
291.787 544.027 li
292.747 543.067 li
290.107 538.027 mo
289.147 538.506 li
288.187 539.466 li
287.707 540.907 li
287.707 541.626 li
288.187 543.067 li
289.147 544.027 li
290.107 544.506 li
291.546 534.907 mo
293.227 534.907 li
292.747 544.506 mo
294.667 544.506 li
301.626 538.987 mo
302.107 538.027 li
302.107 539.947 li
301.626 538.987 li
301.147 538.506 li
300.187 538.027 li
298.267 538.027 li
297.546 538.506 li
297.067 538.987 li
297.067 539.947 li
297.546 540.426 li
298.267 540.907 li
300.667 541.626 li
301.626 542.107 li
302.107 542.586 li
297.067 539.466 mo
297.546 539.947 li
298.267 540.426 li
300.667 541.386 li
301.626 541.626 li
302.107 542.107 li
302.107 543.546 li
301.626 544.027 li
300.667 544.506 li
298.747 544.506 li
297.787 544.027 li
297.067 542.586 li
297.067 544.506 li
297.546 543.546 li
305.707 534.907 mo
305.707 544.506 li
306.187 534.907 mo
306.187 544.506 li
306.187 539.466 mo
307.147 538.506 li
308.586 538.027 li
309.546 538.027 li
310.747 538.506 li
311.227 539.466 li
311.227 544.506 li
309.546 538.027 mo
310.267 538.506 li
310.747 539.466 li
310.747 544.506 li
304.267 534.907 mo
306.187 534.907 li
304.267 544.506 mo
307.626 544.506 li
309.546 544.506 mo
312.667 544.506 li
315.787 534.907 mo
315.306 535.386 li
315.787 535.626 li
316.267 535.386 li
315.787 534.907 li
315.787 538.027 mo
315.787 544.506 li
316.267 538.027 mo
316.267 544.506 li
314.586 538.027 mo
316.267 538.027 li
314.586 544.506 mo
317.707 544.506 li
323.227 535.386 mo
322.747 535.626 li
323.227 536.107 li
323.707 535.626 li
323.707 535.386 li
323.227 534.907 li
322.267 534.907 li
321.546 535.386 li
321.067 536.107 li
321.067 544.506 li
322.267 534.907 mo
321.787 535.386 li
321.546 536.107 li
321.546 544.506 li
319.626 538.027 mo
323.227 538.027 li
319.626 544.506 mo
322.747 544.506 li
327.067 534.907 mo
327.067 542.586 li
327.546 544.027 li
328.267 544.506 li
329.227 544.506 li
330.187 544.027 li
330.667 543.067 li
327.546 534.907 mo
327.546 542.586 li
327.787 544.027 li
328.267 544.506 li
325.626 538.027 mo
329.227 538.027 li
@
45.5464 508.267 mo
343.626 508.267 li
343.626 503.707 li
356.346 503.707 li
356.346 508.267 li
381.787 508.267 li
381.787 503.707 li
394.506 503.707 li
394.506 508.267 li
407.227 508.267 li
407.227 489.787 li
419.947 489.787 li
419.947 499.147 li
432.667 499.147 li
432.667 494.586 li
445.147 494.586 li
445.147 503.707 li
457.867 503.707 li
457.867 499.147 li
483.306 499.147 li
483.306 503.707 li
508.747 503.707 li
508.747 508.267 li
553.147 508.267 li
45.5464 508.267 li
1 0 0 rgb
ef
340.027 427.867 mo
340.027 439.147 li
340.506 427.867 mo
340.506 439.147 li
338.346 427.867 mo
342.187 427.867 li
338.346 439.147 mo
346.506 439.147 li
346.506 435.787 li
346.027 439.147 li
355.626 429.307 mo
356.346 427.867 li
356.346 430.987 li
355.626 429.307 li
354.667 428.346 li
352.987 427.867 li
351.306 427.867 li
349.867 428.346 li
348.667 429.307 li
348.667 430.506 li
349.147 431.466 li
349.867 432.187 li
350.827 432.667 li
354.187 433.626 li
355.147 434.346 li
356.346 435.307 li
348.667 430.506 mo
349.867 431.466 li
350.827 432.187 li
354.187 433.147 li
355.147 433.626 li
355.626 434.346 li
356.346 435.307 li
356.346 437.466 li
355.147 438.667 li
353.466 439.147 li
352.027 439.147 li
350.346 438.667 li
349.147 437.466 li
348.667 435.787 li
348.667 439.147 li
349.147 437.466 li
360.667 427.867 mo
360.667 439.147 li
361.147 427.867 mo
361.147 439.147 li
358.987 427.867 mo
364.267 427.867 li
365.947 428.346 li
367.147 429.307 li
367.626 430.506 li
368.107 432.187 li
368.107 434.827 li
367.626 436.506 li
367.147 437.466 li
365.947 438.667 li
364.267 439.147 li
358.987 439.147 li
364.267 427.867 mo
365.466 428.346 li
366.426 429.307 li
367.147 430.506 li
367.626 432.187 li
367.626 434.827 li
367.147 436.506 li
366.426 437.466 li
365.466 438.667 li
364.267 439.147 li
380.586 425.707 mo
370.747 442.987 li
387.067 427.867 mo
383.227 439.147 li
387.067 427.867 mo
390.667 439.147 li
387.067 429.307 mo
390.187 439.147 li
384.187 435.787 mo
389.227 435.787 li
382.027 439.147 mo
385.386 439.147 li
388.506 439.147 mo
391.867 439.147 li
394.987 427.867 mo
394.987 439.147 li
395.466 427.867 mo
398.827 437.466 li
394.987 427.867 mo
398.827 439.147 li
402.667 427.867 mo
398.827 439.147 li
402.667 427.867 mo
402.667 439.147 li
403.147 427.867 mo
403.147 439.147 li
393.546 427.867 mo
395.466 427.867 li
402.667 427.867 mo
404.827 427.867 li
393.546 439.147 mo
396.667 439.147 li
400.987 439.147 mo
404.827 439.147 li
411.306 427.867 mo
407.466 439.147 li
411.306 427.867 mo
414.907 439.147 li
411.306 429.307 mo
414.426 439.147 li
408.426 435.787 mo
413.466 435.787 li
406.267 439.147 mo
409.626 439.147 li
412.747 439.147 mo
416.107 439.147 li
425.227 427.867 mo
418.267 439.147 li
425.707 427.867 mo
418.747 439.147 li
418.747 427.867 mo
418.267 430.987 li
418.267 427.867 li
425.707 427.867 li
418.267 439.147 mo
425.707 439.147 li
425.707 435.787 li
425.227 439.147 li
430.027 427.867 mo
430.027 439.147 li
430.506 427.867 mo
430.506 439.147 li
433.867 430.987 mo
433.867 435.307 li
428.586 427.867 mo
436.987 427.867 li
436.987 430.987 li
436.506 427.867 li
430.506 433.147 mo
433.867 433.147 li
428.586 439.147 mo
436.987 439.147 li
436.987 435.787 li
436.506 439.147 li
454.267 432.667 mo
454.987 431.466 li
454.987 433.626 li
454.267 432.667 li
453.787 432.187 li
452.827 431.466 li
450.667 431.466 li
449.466 432.187 li
448.987 432.667 li
448.987 433.626 li
449.466 434.346 li
450.667 434.827 li
453.306 435.787 li
454.267 436.506 li
454.987 436.987 li
448.987 433.147 mo
449.466 433.626 li
450.667 434.346 li
453.306 435.307 li
454.267 435.787 li
454.987 436.506 li
454.987 437.947 li
454.267 438.667 li
453.306 439.147 li
451.147 439.147 li
449.947 438.667 li
449.466 437.947 li
448.987 436.987 li
448.987 439.147 li
449.466 437.947 li
459.067 432.667 mo
459.067 433.147 li
458.586 433.147 li
458.586 432.667 li
459.067 432.187 li
460.267 431.466 li
462.426 431.466 li
463.386 432.187 li
464.107 432.667 li
464.586 433.626 li
464.586 437.466 li
465.067 438.667 li
465.546 439.147 li
464.107 432.667 mo
464.107 437.466 li
464.586 438.667 li
465.546 439.147 li
466.267 439.147 li
464.107 433.626 mo
463.386 434.346 li
460.267 434.827 li
458.586 435.307 li
458.107 436.506 li
458.107 437.466 li
458.586 438.667 li
460.267 439.147 li
461.947 439.147 li
462.907 438.667 li
464.107 437.466 li
460.267 434.827 mo
459.067 435.307 li
458.586 436.506 li
458.586 437.466 li
459.067 438.667 li
460.267 439.147 li
469.867 431.466 mo
469.867 439.147 li
470.586 431.466 mo
470.586 439.147 li
470.586 433.147 mo
471.546 432.187 li
473.227 431.466 li
474.187 431.466 li
475.867 432.187 li
476.346 433.147 li
476.346 439.147 li
474.187 431.466 mo
475.386 432.187 li
475.867 433.147 li
475.867 439.147 li
476.346 433.147 mo
477.546 432.187 li
479.227 431.466 li
480.187 431.466 li
481.867 432.187 li
482.346 433.147 li
482.346 439.147 li
480.187 431.466 mo
481.386 432.187 li
481.867 433.147 li
481.867 439.147 li
468.426 431.466 mo
470.586 431.466 li
468.426 439.147 mo
472.027 439.147 li
474.187 439.147 mo
478.027 439.147 li
480.187 439.147 mo
484.027 439.147 li
487.626 431.466 mo
487.626 442.987 li
488.346 431.466 mo
488.346 442.987 li
488.346 433.147 mo
489.306 432.187 li
490.506 431.466 li
491.466 431.466 li
493.147 432.187 li
494.107 433.147 li
494.827 434.827 li
494.827 435.787 li
494.107 437.466 li
493.147 438.667 li
491.466 439.147 li
490.506 439.147 li
489.306 438.667 li
488.346 437.466 li
491.466 431.466 mo
492.667 432.187 li
493.626 433.147 li
494.107 434.827 li
494.107 435.787 li
493.626 437.466 li
492.667 438.667 li
491.466 439.147 li
486.187 431.466 mo
488.346 431.466 li
486.187 442.987 mo
489.787 442.987 li
499.147 427.867 mo
499.147 439.147 li
499.626 427.867 mo
499.626 439.147 li
497.466 427.867 mo
499.626 427.867 li
497.466 439.147 mo
501.306 439.147 li
504.426 434.827 mo
510.907 434.827 li
510.907 433.626 li
510.426 432.667 li
509.707 432.187 li
508.747 431.466 li
507.067 431.466 li
505.386 432.187 li
504.426 433.147 li
503.947 434.827 li
503.947 435.787 li
504.426 437.466 li
505.386 438.667 li
507.067 439.147 li
508.267 439.147 li
509.707 438.667 li
510.907 437.466 li
510.426 434.827 mo
510.426 433.147 li
509.707 432.187 li
507.067 431.466 mo
506.107 432.187 li
504.907 433.147 li
504.426 434.827 li
504.426 435.787 li
504.907 437.466 li
506.107 438.667 li
507.067 439.147 li
512.586 439.147 mo
@
.666504 269.707 mo
10.5068 269.707 li
.666504 269.227 mo
9.54639 263.707 li
1.62646 269.227 mo
10.5068 263.707 li
.666504 263.707 mo
10.5068 263.707 li
.666504 271.146 mo
.666504 269.227 li
.666504 265.146 mo
.666504 262.267 li
10.5068 271.146 mo
10.5068 268.267 li
10.5068 268.267 mo
0 0 0 rgb
@
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
% page clip
grestore
grestore % PSGState
Adobe_AGM_Core/AGMCORE_save get restore
%%PageTrailer
[/EMC AI11_PDFMark5
[/NamespacePop AI11_PDFMark5
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/page_trailer get exec
Adobe_CoolType_Core/page_trailer get exec
Adobe_AGM_Core/page_trailer get exec
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/doc_trailer get exec
Adobe_CoolType_Core/doc_trailer get exec
Adobe_AGM_Core/doc_trailer get exec
%%EOF
%AI9_PrintingDataEnd
userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 12.0
%%AI8_CreatorVersion: 12.0.0
%%For: (epress) (e-press)
%%Title: (zhist_comp_litt_images.eps)
%%CreationDate: 12/20/2011 11:30 AM
%AI9_DataStream
%Gb!R&CKk#VXseT[^X'fI#e+gbj-kqR(<RZO:i:tR>G)#FQ3%@e_OU4'+3smh^LR5I@uk'AP3m6\a?48+^"9UJ=VTPTA4`(uCNsl?
%Xo7%d]kdROC]A1LjAefi==])f>H0aCaBt-p4*O3>Y(fmK>X./&j[pBb%,33m?6ruRJo]pPWk@.Wqr[^Zg$0T"g,I8oGJ3t%mW=df
%l[LisV7jlEp.M0&hL'Q]s0K*+d($W!D,tkuX0'!hk#T+cf]\TpZ4d=GmqV7cmc!m"oAau"ZW(s\;%33&i_E:\X>e]bs0mOI[Vd.X
%Djq!5hra=o,Q#.ns&-Ofs#=oiHAi_2NQWb6g0S!5me5@qE>M7o-iUmFY=Hj8s7u*n_nVQNrI/KF5!:`KbubCg;^mJJ^D?D?WddZ@
%`^bt'Q2Omg<a,![BI^Eg<,qhVi%dja<m%h=j,!t4?HmuT2?13dg1`H_RiNZ<eP>T.m_9U.("Xs9CRtMJ4[1bb-`t!%j!BLi[6uEi
%mG$bj_OkMUp!DV:-d9-d^B3FoU[thF@oM34GjaCq>E!Mkrl,(JDuAGXFCg68X8Sr.lVm[;-?R(:4?BkWj52:UOW0S`ZK(dialQ](
%%32NNHp#_.<@_Nh2]c8Qa1LB&a^JWf3ae]>n(dlSCFqu3r1[@`bi<m0mT*%leLO)1Iq"_d&c2Mbq>UW[9FeaBZR&a_b-es]H?,PH
%hD$+"ZZWn:IcM0Z<G-?SaiIkir6YElIT:m9^TfD_T*.)-i9FgA27RGlN^s*FR/@_**BZHj+1F?!kGR.eO7pY%e#TtFlXoCSdJLlk
%U"R$EcBP3ZoWaf92?23BG$</=`]$,(Is)a>r-qAKc-d,7+jFmRDT^>Jn(i$EmV+"\\5/[8%3qs]J,R!)dpl[RZN"W_m^`ikq>/u;
%H9C+pmBlRk#q);,m]Y':G5K,:-Gek7hW2=3[X33_(fg]OFF&/ehVFgek'u`jba8_GW:p^aomb&El]$[T4/PqP^[>tHN-_8Gc&q7O
%77KMUM.a9lPhuB6n_@+hMSK1$L>m:Kj0$?@HKk5#Y(oEoIXGmS\_Sa/D6d#C?"S:,eZ9$()bo`:9$,Cn9Ph0:d<oUl4iINFJ!ZV;
%;X?Mp`(P#7P<]'Dn[e[<f6q18_7p^($<3fWk*J/(7=4q[qqmsa6bAF-G\FH&SPoB<ane;e3T=]&s6\^G`ac*D[o8GbhR(rt96sWK
%KicLA@kYR#OR(e>a_uR7mf!+"UQ3;(XnFt`nR&+=7d\e07cj%;r:c8lF73S8[.poB,W=!<Npg(dd0)k8[*Sd4T]PaG_')>85NO;P
%+tqk)>j0]4.T^22o+b=`3*YLCnCQRqYP7Bj^DZC1V4b1sqKh+bDF`>tXM;::>=QLrKCMld4n;ZgOm*MY8'DX1"6(_91^B!F[\,Ml
%q@B`e&58h#R,bOQimK#*fYJ$os(dJn(oP,OWA?2@b_4)QJi98G\5)U)@KX9Ds$sq/B0%kd"@9O+%6#1gV?2r_M\<f?L&ZFB_bISe
%q-*jEp?E`&!1<[A4anp.RCXF53dfVQrn$0tMd\1+s"K@=Ah_PNm0N`*4?Q8q>%quC%8;6>rV\!k?<ll>)KmkWS%Zfnj'W^'\-#\"
%O%/<8EW*]I!8[Yl9)^UPq>XY?Y8,X50=JX]1g:Scf4]i[(@09%olH1X4.lF/De!O]gY`R,gW]]7>kc((7Q>>;?2@&T^!j/gh((C-
%h:F*cQuqeH@9O?q[L%h@/BHpI]KQ;@k*,e4V5]+5#+KJ,b9(6Yj9k>O/l(*0s/Ao6bh*WjTm_">]Igp4X5-C3a8\2aP)4\'DY.F7
%s7our\AU3YFFX5[Is3d;52=ulhmJ]g*$)M\4#bDD&,[NnS4<>3q33q:`M7&*iBPNjr_?TPs%hb>?Zpn$gHE!Jf:,!N8Y.l54f1,Q
%mIl#JHR9gmDLXP4If:f.lW7lYJ)hkIqJEnDoBs']/"\\JHL[WKRNVVpCR&L)g&EX^oPiE[iN[r3,LjE.m^d<#T[W6c49&u[4uNAj
%.rF/"obuG+%sL2$SL\.4LI1j<]/?0f^MYtk\"t$m"BTV:*=2Ua;1EbX^dTmH[@7'@$bRl.f0_CUU1,$]OfqIgjES@5UXad-YUR-Y
%Rrrt">O()D(L!>jGbsb"GMP/A<FoGoj"3n^p3hk<eEuE?lTNPd)RrQ,7rlW$m$&@D_d0<GlEM3XLt_6=g@q6c%e.JOJ@o*6g/k:5
%>!JVu5F\L%p(L9^40Sj/H0dciSf"S"NGbrQ\biQi[pDtQXA\LRdV,i;rKZ-U6)7pQ3cVccJ&DS:V<c,gUNHZfjm,ck6n#Vr4gtB.
%[TYfT$?!l'kSA7]RmaIPdBXs3ADB<&4iO<<&']SY-2bl>lfL$LP4mK+8$hg*;k^-YMC+dU=t;`nSlfpe]>s)i#*PA4*3,`7erf<s
%.WtR\l)q+OgO3fU9%8*qlft^p7e^5(6Uf;d;r\Y\"'9\>X3\I;9QCeq@d#c<c>E1(6?Hr3A%U@Mmnu^mQ2=duGq;Tc[sPlYSXDgC
%2iiG]Y*?A&gs0c7>>A'R8ob70#+D(SY&7kV-<h7R?b"W#!MfVZWI3040pUuLVOPu.6:DA-2Ei'0o7rd^q+_93a$@''rfhAn_`,JB
%7]%=Q^S9cfiYP#lO/68J\D.o?]kf6[_n,+_5#Mqrc(E4grfJMn+0AlFp>N"BUTFs8@ccS3j*ga.dCJ_SJ,C_hg/#\M+'?ahmsGO[
%VE`=0g3!F,g9i@3NZ>[(lUE7#p)K2V5c1+)*MqaZYpJM7oqO,/b$LH-m;;G"?aOeM3mF2j8aGf!`B6%/NLTla?h`u7&'[;,,_l9X
%mNHAg@n^XB<_;1jDTghW5;\tSs!WaQ)0G83^eq^&NJAkQR#<A>$uMSs@6M$1G<%J!dF]-qrG$QU.gN34\`:0UniD0^P[XO&ju;=@
%OJVDUMc5o[Z7.HII5\[gGJ2&:;\@f.c?o`R[7C^;@bs#TG<]<#!%da5o[G>i@OB`EB%hEepWnG9AFg]CDE5"L(P[7Vmg,5C4hXgV
%>$,s\linIeJDIm=C7ZLK7-&u:.j%8l*h`'$cmr_Mh;3c<jJSoW-'dMINYQ#S^)?JdqtU82AIGm))V"-#1f#Gm8HT65[6#*@__HrF
%d#8&R'Z(VfB8AHjp-=J`F9c$l!hEe[RGN>Z[%Ee`h;eI^HCO;VDG+42gIJ;N22<=rTOBXaM2ibLBdkqbER`NP[G"ca?P::?[r0^8
%id^s^[]RUfLkSP[EG5f^g/#3(Go5Am5&T'ldc!J8oAFWo?s=$V$Je7LL/6$+[W7J4ms)2l_n)(GXne%?6V_IJID5,]H&![E65*]K
%kTP7Y!+0en.8a!@S[I1M*connADK!bmF4>3r#/AVU>3A-:`0M=mDRDh9rjc&AqK[IE:\:>k`R(HB7Yko+oTP%N\1.I%@W2-a3`fl
%1/?Zd0=ZF`RLC2GbZEV(Pd]M4"e)X(WQQlj^cM2uLMT=b6U$Q<Dd/Ko-,+N1jTZ'0UUaY*HID$=Kh*4rc(/a9pXdM`23-D(^O'Ee
%?RpK(*QMG:5[ZDAZYAOlIJ]JjO2O.]<DJ[MD&s[Tm)*:Qf=SCZ4<.(LEpS4:+?LnV1)"SsB7AE#k3%P2IZ!9[GW/bs-d7HL>2:dS
%8W91c8<!7O52olUk0@_<<a4\!8p;k,1\_HEMrY.tN4(g->J@'b2-RI5CM6FFB[,h4qpeHi/5C*G1lF@Cd#-6g[jjY;X6\l]T)Wk0
%Q15O1j(LK9faCX[eB)KanY:H8g/UgA:3&jgG9MGUq.l,mJ3htiX<+S6mRH/)PP`P5kIK\nj$$Sus1[jT^,g]Zs1)ChRJ<n5nCJjK
%WdLd.IX/9hIB-ZPloV\Tg!3T=^!g,%['h&OIp]C-h`G(KSSu%TY?0N.BOgu6H'8]DZ+fhs_OXu7[_gGbRDY]`:E7Z^S6dj0MfX5O
%nE+]S[D2:3\$kh%[XGnHIe:(Rn\[@oL0qX)[mu]jUJjs\rf#/&qRn[GG>k(QS\Mc73]c_H*KNtaF?)9"EaJJ*[F)PH[ni2sQsW"+
%q.]^!e(e-=q_@=eq)+O(ioI0q_S3/+=HAm9Na>CrGZ2dq)t=GT(kksrlpfadb4s7.qfDXcama[Fnl>.%3j6/nSSo%d#A5bNSrP6c
%rC5P*BE#N\l"S_mN<QYlG\+d70%O[m0lE`K\`N5+=$bI(m\s'9p<dk1D:HbS`RV0PPYp=e&-'j;3Us%a(iA3VA`_*$g8I*n&(c_H
%m%_94rRr8V4[601b(f.MLMs)VQe&pc\$8$hqBgHN12?T"G%)cMZ]?#pT/g-$ls;e(=(mTLZ)ud'7.k6UUMWtCldP$VPYiskP6]./
%X0tn$gou@E458e&:96c'gKo+`[<l1CZ]3]7p:F06UE3*'C%LW)mQK@FUU"<qAmTE(WBK]TGjdlf;.n+P/Un5dm]Fg?;1l;@lG_kS
%/_d4?R!@QY@=P?p%r<,kdCFW^H($MRekMtu<Um2dG#p?pGgtC!)!pYnmB>\iql"GQVRodW<up%oS`fJ0jNR8=f*cFp5"r%SDdFMg
%fo;nQr6Ou$WdWCTr2[0siQZq=f<MHug19\mj,a^[A(TCKhn;f+p!qoJF$"6gVR(\1r^@ck&!I:pj(E#qIe!&tNEUbY7dWrf?hn0\
%o7^mqeF:f_nPM(,k-t4>1?t3;VnQC,q(QXC=bGP$q`iV=D'cEGlI6o*1fHo(p,4S-[8Gsm`5%_brkn`?IFJd+?Ts_-(;r9!nXa)^
%*OWU%HjGmHc,T2'_"k?a4HhPcF76WQrO$A\p!i6^Bqri$1EQ<ioAei6Zr)%<e'"_%ql'2AeEQVh`tdp=T,170EUuk6p[d\Blg_>Z
%n!l'&D_LLQIb\f>*kdu4<hls/d(gIL@sb2MhCh#c]h]O=gPU&t\Jj*jh4GWr_`Z1!Df94]]72`03pPAnjm8^ie2O.tS^,g&4Wef!
%*gLf!4Oh+>DJh"OF2LIQqP/D9B=E"57_Q"MC8:d=W]kUc;-=#U]gI%83T)BkeF%2EJ`dKWq!lhmjSmul&KCCK=6F_tj-(]WmB+TH
%:3"^M\4V_#]BCi[O-_`j.h8,pc''_CC>&6;PG;($l0:8JFmE1;A`#*mHqm.:EBc!fUU"=J5/$u\p^2N4UgD*:HG.n.\)+aUUH/U_
%VuF0_B,bc$fr4@0FU<7QRr`V84a8eNN`!!gqa2Oj^\Tn$$`UnH:p0b)q\9lujb$X*eE0O)h9K*tl`&jglURSM14Hq8I\Y-9K!731
%n2'+V@%s1jli-MSDtU.[2!=Y@<_I@[r+g@*rRXh8m=!`m;J;WX]I2=9m;p_qSlGa2?bbh0jdc<TInp%:o>JHJ&t/utnngGJf:?7f
%l+_ZR^Wrfc/OI(ZTAE@^IQ8F=Ac2DrZ>'29$B6Y&bKHm0h;ECKOoF\$nrK",?e9$YO<laXj0IQ;s)n@fdd,CiQX2h_YHig>qJ'n2
%PR(>2rRZn>ja6gh[I33I4_Nf;rq[m'[+G_k>o<;b8$F(_-+7VGDk<=Hg1q!Zdl:MEs8)_D"ni-^Da/*o]Ba6jmlt`L2r>]qXNV]7
%MAAZg4gTWTEtA4eYrB))FnT\<<c-hu+6-9RT\>9`0AaCUSm`9m[`SIAaq=/bSM>'JmD2+%Eq,\1<Is7OIu8CJr\8SnI&D%g*:2Zk
%e=(Cnhk!"&KnCo/O#OLERK$T6;b,pM']87"+lcEMj*[bGOYZ4t\("8X>l3UJ;(!DEhW^hrb',m2jf$oEGgn[I1O.F-GX@B.D[I"A
%&$^KYlI@j,16;EC<1f*fro2?*K726Wk!G%WK%gUKDPN^_C)m2MN64&4/GfBa)c^\]Y>X%bS&1"SqPZOQ:DoE$">#RHTVte!p\ZFf
%eEGqJe+?L_*'rb1K)[kb'RE*>G+N@(0%s,24Fc09JEM<P?!=)M-4MhmZ'=Q^>b;6m$e'^*@d0g"c#R[uN2Ic1W>0'4bJm?=X'..%
%DpG-XX=qf#_ld9UWYk(n=V[-93.mAclsC\oJ$:Bb7WVLeKTcN3k::FMca.YF,lZ>7@>?sMH'0R"+f?<Qo0/\7j9j032uZU9fh178
%RI*oIN7<'$&epLGMhtbEr70SijSp)&kp/QA9GihaJS3!?f+#2D0sq*=`6r"!hOG;[RGVfCd^7P)1aSVXSZHgTrktAjs7qO.0S6`]
%,l!Yhbn#(tBE*g:>2sEdD6S`d$&AMulOWYN%f(V&k"p$7Vf?H&HQ(rEE'sS_G;U-GH.].A+mdeNVbuL$C&W"A(6DTK/<UgRpX[%X
%r*l3m;F@YAmcHr^HPlVP\ni%.U&t9ds/OP7"j&$c<F.o@b?kL>(\L*W41P*'H'ULcc.EW%&PuNC0/%E2hhb3n6s&.K&5?^!1_7a4
%P$lNKh^75Zmq.Z&ofU4kr8'R0d*jH']A3$2T%?0YS[d34PPgs$4O4hBGn.dJb0o7?NOehC!1D<[X4Wrj,lIk;.>tCs&$LWn8=`gb
%%^,Mph_l6Vc4]%&@<H3>fq$A<rh#t8WH*HtA*8,`8-BU02l:Ds(@JTp=F'[k(+&9<K#]?QDs^3b^$o`goVR<CNNqk2C40=/qI"1F
%28F"r3I<Y#n&C^(h8K=D>[i):@<%-`Z)]Tr<\762R7o&%:eLu..^3Ko7,6NYVqF.7N+p.^?2HE,K^F&B9eCm)#`HIOF)T=e/7VkH
%!0U%![cS:aKg>7BdLkSeU"aF.G4#$iI@2:Q,j3/_9d9N4W0\MM(kOSW=>"BJr6+9IQ)\Lo[B4dm/hEFY#'nJQ[5^VF(er8[1n*8%
%3JaPC]h'@t,M(U6!okjfLMW?j=>+_cJEO-pR6$*Y<%fqb;I67/rG.(,SORPK8>n3?K!#lO6GL/lB;e.<LFP-!G\m40'Ui.'Kt>Nu
%]A&r>cL"S@'/+-R7aBlEfkn/&iS,aqmb7'%[k_-3j't$oT0(&II;nfEX\@ejR^&EDcYfidl:i&M$n-/Cq+X3'Wtu/bBf<+hZ9:#S
%1lbJD\Q\?l&j7n`M(-.H9Vk.d?kV61(5irNk#8![)%jg^rGC@0A%ca&K!c9T]OQB+.Zh>nSAWR-)bQjJQ0F8<1\S$<LtIXRcX'p5
%72mC%rUG6DkQ[RGDmBi6UAH<\h(MH#ZAn^o4![nCU'I_L2Y-u=>erjIqGglBVWS,3n+nQ4TD"0>mrYQ/b$Ureje\)'n?<iR%An.o
%(4sE'jntMBF4NkD6YtR1RmL]j]fn67)=e.,/B:EEFkuFpoeba+)8#d[Wu8N6;1!W7ho:Z9eMAe$p\:<uHf:b&=Zu_?V<Nh1MMgg^
%hWr"+C,4mNINnOV4Uph;0P<!@N4E=W?eh'+ON7+L8kh.EE0?#+__^+lk-1'_gbK?86eAaIP!nd!F(/uh)b`.SQDVD286-q,QBL+`
%!fGGgGlgl=JYXQ#?L]5QBL^]O+6#i'p]r<W2Rf0@PI^3"Wn,XSN78]>,Rt';/r`MZ;ao3QZ7]>IB'!RfV0;J&JM)en(./o0:lLQ/
%[kDmEMmUq-&&qd4&5-aIbg$]1]7Qls;7c\%])lD"WNrK;OA11kq]XNID=L8%RYld/r4IsE#W\+ca+e)Sga1:CZ;*?4=cRHl9i^[q
%^u^UuI>csJ$HOna91ujBgO$Jd5!)M&im@<t*j=;li-[l!%;Z!$03(9lC_#$Y*feZTOp#d@Nqtp%Yan8&*>Mcdo?KAUY/i&%C<2Og
%)bm:&'B<dY''6@'AjPR6]kF!rpZ</qIWG1S]XQS\V9qCS1o,ujk.%60gY+"m"f@^EmBj".)]FH^LZI:&p\I0`8hq^I]4i'=$@'%=
%j?;t6?=<A&`4I=L0aFI,>`d9,ZFsIN0>M2f"l>6=^_"-tlc%l>CtZW+*=_$C2suKJ2fa"]W"+FGnH#1;*bp3AYT,1P'1dK:nq9a"
%qokQJl^s_ODKH>6Pe2ACPeGb1LWPNfq5i_ga_[#2]`@BC)_gE`&;G@njsb1VO0eZL>N'ErH9NpP4F1XT&GL,nDr)#",NDgY4Z/J]
%dC8Im1T-QbR1a_nhmK=\HT\^t^%1ThAZh*Org;(tK38s[jZ<9A+.5o/*5\RlSb\MVlkQX9nnUD&TM\8/MQDl?\*J,l_O9.pFo,E#
%qTi<qf]3JbqWGPZMrOf\)XAe-qCfL_nW!g7rc'T3EE"!*i:ZV]Afa!9*9F;rK'VHKAUQZkE7$A=,:Kc[??J$S7slu5b.iBJa_AB\
%G>`+ldSuO#QJ5MSUL'#DmA(-E3U?'6c2rdG1WRdDDthr<pN3l[&R#cV0<tVll6p^,F:BiKg0'jsBB6_IFhR\UED0Df[H8DG>GecJ
%"_ME08p/s<nMUje,h]U^4agJoC)eNn9,hUpeQb22qJndDX1bUD[,[dQB0U&Qi4ZZClGM!1lYb*4FNVE$<p95I@\K:*nq9.P9'-p(
%de<c1/b3T7R`<Il815:f(+Z+=4rO$.lGeI@mT"aarDDDGZ?:KkDR$ZOhs=U^]uhtjbHBrZO@,0qBK9FC/Ka`66Rh3AY2s02%&]UK
%]9[A'.pX.)S1hL?Nt!n8Ek^mD^*Ee<KQ=fn>!C6V:s/SbUE4!4/e1q-QX.cnJr9M5<6ghi2^0dC?WtaA?-ARamTHca0-smMDEfMd
%'IZFsqinkA`mGj07)D%M%6i!Z2He"4>1`NJ`eJo3q"s\e`GT%L>Eb8fPTg8o6(BU.Pe_Mg?DM9<0X.L9e*jQ@lTBkheY\8>jW</_
%gK'GKS.okZLCu8f.ajSAg!7+%=I@"=$\V)^;lo?R>B\t?%S\GO^rX[35\LtH8Q1)4.t]CtmIX>iVsZebeD&5d];[);l$5UD;g>j@
%GE,_r(A@R@BYagkI_(q%G@$r2l'3sKoGTS=[."$D$*Un/dk=r9=E^$T^SFDPR$ZY%S(Y*tih"I\'tn(>.@]s89$C!O)\q46_6#EZ
%MHke/V%g7JAC9&PgU\3ocs&pta14:l`g/*#(!^EA\lYgZr)98Y1>]5OaT4)@AK6Zl-/+%!BWa'DF8tu3k9U9gjNrhTFdAU<[F(I@
%,=c4JOVcR_k$2TfVl$\a;h)\BGWM=kAA,P0VH57r9-*V<)UH!?Y@b"@<>Ec)k12P)>YE`#Z^rh;_t\88=dCjODlFgn^p--H]k*Po
%QsHO1YHm#*0(\fd[%*k]Ib7?+Ah]V!Ek^+d.l?X(Za]j&0Afno]?IDqYf;m8e#;-oF&B9QgSe8aB=lQVf14+V:DWC/cJ81Zq1Y2O
%B7I5S]]af`-f,8H;.o0CclSqKj?&7P]Zfc'm8GWOe"'FCQW:;R4%mcQN#HjPkbNP+?>Ptk"nG&rW?W6J,!"2"8fT%IQ57ecQLZSU
%2DnT:iMG1R>)l=,n'VItD_%8_CW(gcU'gk)6G7@N%PHlHQRgOSehqo\3:3G!=eO-MJF2f?M'./8<_QK+\Z)=;H3AX<g*3PV?@TMY
%2!0sK>"4pO\V+M?Pa]9_pX>#"B7JU(lsda/Z8_U@H%co;6rZ!ij%n1m(MWU*^#^ahk-hHap;W_,)Cq!/aLMNLpjPce)eMC>7Z(b;
%o!:963Hls<\\a\s*oF^XHQtHj]H46&c1ASo3.(@R$a%0i\:LqEoLq<K'ms`hL'o=ZG)8>r5j3W'eNpW4=t>S<3p>h)Yq%2cg%W>U
%5^EPs5\nkNNPAF;5,e*Ll33QlqiI]d"[78;*]h?b0-*g&KK5aQ+'rtB:mJ;^?A;;B9q`375q?,Yo);"-41^,<r6-Z\I:#k4Z7/bg
%P+M!8!iiu-c;2%[3%^n#H7"!/G9*p?b,6`\d-<X4:%G$DH+]@es4Z=f/+^!BU#N^$gaT^5jpc8IG*'j/lXa2Td;UW-ZL885XYOf?
%[rcU<Q$Gs"DA;7C].u$76CPl=I;Qs-4f23@_%jr'l9tKObY,T6lKu5m<T\jXdc.q!Q$J&nO@A!Z],)3$L_?Yfdj9#$\mTd!X5F2n
%HDproXg\@5067NI<,eIXk`o:(`Ve+gTaR2IV=JUrI=6Ph[25tI0E(<26;D-GY6(ZXNaD:)<UDPX>j%HF5V$rqRbY)1Iu94_+,5?%
%@ZT4pM%T:b^&I</qDdjW_kc#Hl&2`3UD"0pgWT!Sr$ccph++Eh=8)Hap8IX>U6dLX^YBmj?DoTUhX8\XW1P)S8uNeTe:6DKg(hrh
%VB=_3q^.?7M.ueB0s<F7ru&qX>:XlDD#;tZi=sDF@l^0/l)RA+*@nM//5dbZNWhd!P&6.8$WR)c(<M"H8s/K'@26n5*`eEik@#+I
%IP1Vnlb!YY](Vh5o6@[YD(*XM/K_Rd'k&IN`<0H6mC+JskA5!;7<p'ZL$J672u!IjjV^D^pCu`N$Z.:\H-+nVfB),g2F(,GE[AGl
%O7Ef\Pa?g?@_e^#1Le;?d-@[de>i!:^4+C\AM<@WV>h1CeE?oRi>'#3`I$qJ]oBD#H<a$CjI;*^b35kE:880kAU]%M4]aCj56[AG
%j^DI)R;mj<B<<kjO2b_,J"3;'>+s0-^S;V64Y9k]0b<e!TA?-7$a%=IdJ;87c-_5Fs)N5?I;O%iD/e)%^WuZ@l_!s%hXMuGhiH'$
%*3Ji4n5i%o'DV:=.ue6402d\Yl+3)R4[E6t'o[E221,#NRkaFcDJIj1Gld4?)0PA,p[^(MeB7R]aj\/ZoO>T,03Mk1^U&grIXF7Q
%*L.**b'eb^P?.$oS+XSOg+aLGHU;ZK=&ZZMG^lL=2ZB+h"EsID]CXNLR=sI0(Ag*r2<U_Q=F[7<kg@"9.tGeop?MqT'NZs"S,[r+
%3\#UqpK(O,@l_0RDlZ'eb&4,(Z94R:lKGj<Khl5cRl*3Tr%Bc<Cm^X`0=QuG:hMDQ+'Z:#Q17)*RqMU:T%nQ%eF8gO5-^LG_P_=Q
%F7^*+bih`i?YA/?mV(I7#.OF&HYIF\D&tE[h6:1U)PLMg.9af60X[1/Up;=L1>h^R;"IYB-5IWrFec"io6MiE\q^0rSh1a9@QYd#
%qrC@(;:1c@^l>LUQf;Vb9j-?/_'-LnQeGHFpWS+iY;h<gpLMA@%4qk,i%Xo"[SBanU5P5#oC>:hRb#YhLL`?IF'atHq9+5pp'$.u
%2A0M;L0N;CX6RUemNE>=fckDK6P$*!cc-qcqAr[G?bpg0QPT90/&ZgT@@s[%DkM2rG%%"[D\CC@E!uOuY$DREY`I(A;Un:.btncE
%ZI@Vs/*sTBoiY(1?WPflhAQb##\Ps;_EN&t)lic$=*n:RfOq8]):9r[?XDAto<Xm2%\p8S<n4)W1Q917>LX0r"N)bVZd#17&.c+O
%YJ=XP_^Ojji37Hf_S5Z@F/Xe@[UAV/6Hf.Qn,Pf@]<Escf$MbNqeT8\HEM;pKmgB>7`8rndeXfRYV5*rA&BqcZVBM:jb"F(/F:Qi
%%mA.R5+@4:$pDPG^2u"^eA=D=3(EPdk.J@2cZY,!SB]4aq^>147[$si;.,IK?$*9nFH<r$rQV;Rq(:,`21;US5(!kN.^`0;l-3J>
%a&A*!r0pa)A_VIBn.e1BNJs"tG7*qJnLIL"(NVCG3AhdRV1(eIk0nACi)f?Y\0ar$*C9Z,I`6$lq^>jt&QN^JTRWgjK.Pi_qk=BW
%)bsEspsuqSUg'_*4ak)`lah,_4c?/]nfIf]G1GlsO8n03(?t;fol]S?g%+pq5Zs-H+9/\$NUd#*+Jhusn\;p/6hg9KhamTV%,Sbo
%K%2V=rg00L.JT=fr5\iam=um0Ws3nJYNWI_53N<-J\KONK%=1.:b6tQYFJRo"h>k(okK&6r'UM9NCPO"hb/_\6`@gH1&7KO]@k-s
%;qI7W!@E9(n"huCGqEA_K^uV`R5Z'`?BS$pUrJ<6?Wb`EdbW\e:)WM[26LsVU;4o!mWBScfDoF3)Wk$Mf%Ub>=rfa!s89!JbDHV]
%*E"'C9TbKJ5"oiaZS-G.lcET*9`"(9rU;\:g']q5b3qlNY-$o!2Y5oFmk(I2YFfReR5o8RK3%ku)VX?`=]Z1/NF^Xf('sju@C_D8
%`-br;m<0VI`%1IZ&3AR1@>2?LU/t3Z?^p1Rj"4ga&uI#a[GZ6*ZosZM17`2bQD8+"C%o?g)nZ=rGO40&HF5<M$Q*5o*j?23X+XrX
%n4QD%".g/F0414Xj"gmZ01LV5^Cm0r;>N@aen_O<DGmM`Ali>$WS@&2%Z@59[l&D9i-Mg?$^OVZ5E-)HhD>2f^QH9ggZ&[urKBF)
%p@dJNjn3it"qB,[I.o;m;P/41n"jW<.TKjn*Tc[u7uBJQpp,,DYd:SurE$Y@XEX]o^!;k?rs#FqD2]M"+7U2dVg[ttprUmicU5m&
%SL#@nI!N-g[m/R?Vi#$jq>'KrJCVC+WYOu9#h?Z%(Q0fpD@dWNW:01jfj#oj.-''*r=r6#<s1<t6M=c7J(67]W>LR5A'WoH6MALq
%qO76u*;uGF!ju!#dt>B"B$!;X:5AN9!Ukp7m^%UJoVr_n/UM]6S*Qk:Wsik6aX6YepeE`dM4J?2Y7V07=*Mi%.\[^40i;Q=mFp7h
%JmNZ%?h[*J(t&.RC=%4]IE>udQFH@<p_`/Ig&5#ZS6!;j<kem&nl;fS^C&NIY+>4m"BrbgS+E=:L3_V*%Y2X2BCWQ;r^^D4a"WF!
%3Jimkd`4'%F:jOLpg)a&f.s"T$$iN"kj4)VDHnm:9+6kOkHAbfNQuuVXmgf\LcWEa=.usFG$bsldG+B.-8_-KU(pq^l'6PA_4lQN
%8g")&RV4p"2nI)ZFOShT8,"HtGr(l7n6K4u&4aZ+B[514AKNS9Zpq4[^V3=@#JA7tFaGs0*nnW:Zb>0TLJd`Bl,Na&T"h,PaB:%b
%P%4n9o&2\._BQ+ERsY*QP#`)1rgJ90H1i\h*\aQ[</E6@,k.^q3i]N/Z#c-bC1Ve`Ie!&6)`@>'@c0^F+l]r:PWEQWqt'c2lDUK8
%`[`G#`'Y@3Hrg('mOM#*\;`,Zj2_1_-)&YoV@(sQpW&al\fBIS4.;$cOqa-4LsjYNH^srnN#U`SZs_I4ITfrL;tjA8q9Ao$AHfGI
%ckKN'nENk4:,3Hb06u.9WT\1EXo?Ds&JuUF)u(R7FKo.)CBIiVq7;^cna5<Hdi?$CH(grtSWMV@1/T(aF2ok4<)_?UDBf7Ka5oMa
%dRST<gjiR>kmGb]98i2CmXWun-t\Q@*g!62UTCi<26_Zh3CC-BX?0he-`IVmBWgZK^88HE_/e#5/aiGI?F8O4k&s\pe[FDEn6+]2
%B$itbUsNi1jR\)1(GdH,ft?Z=f=^H&3t54AT>h9#MX7M;^>6I_N"[CAO-m5$:q'D^a_&?W:YHQ[.H;=Kd>,r>NgG7a:'aQ_-X4La
%co(.em!2\pl)g[?jH74Je&]2q0E$7<Kb=SLX1jkpmJeBf9;:[;\N.0gLGnM.gUZe<'J4!VoG<KWqYZK[\lGhE33rtGAEGeF/s5:9
%?<6=@f:sf52"ao+gLr&TWmeOIir4kK2OJdqlFo/2[+`ro\sAFBNHt*;WY:O7O$7m5Gm<!V'b36;Dg;j"og+sbmeNU6$<.]3d9Fm&
%BV.W73<AN&Y\#OUBLW_XHJ"ThO!kLO"t`F5j-qJHI2"/&/6\+%)QFT(8M"&+===]N?BSEtGg6qE%T7hD=-#=mSol!F,dD#G@[nGY
%]Hjaq4eb!P)5ngcBK]gs46]$Q)RSn-q^>%SiCZe(a]C#@I!>);pfQKGni`K/D^rEtYsN6[DYT8-RVBB`b@?5UlMS+T<g^Xc*m.uH
%@N2^Z+NAZJ@tiWBNdoYjKrHpN_gSU?2h3A-WiW]KMO&94Q4#g"R(X4UanVl9?On3Tpf-e;@F!,^iX[(?mAj:@%iuM#gAA/\&"s!-
%k\EA74a<@=P+K3)pq]<Q<Q8g0g6MHL+$@c]$BoI,\\A@[ZS,c6iSY7g4LC#B^32L,dXnc6G9TOR6.q/;4NtMi"Ui.>+$:5pN@@HW
%IWD!I%j(H7prQ/M4N-i&-@lE3$u:@^0\_12RG5P!4A;f;X;4auU(8<6JMDW@E$VQ!WS[pk?X=dTkeY/'+4#9/K85+6j0ccjY$G6R
%4R?;$#(,jdhM\HB:/ujo+$@d874.IZ3pP<2D8#FIL@X9]>iogWRd1sk_8GWk%V;/2]NQoK_8GVD$7Q5UrBGOo--bIN4?(0&n5*H]
%[_Hu&]?[+7>\(Ql37:TJgu.k&HIOtEK83LEbROFlAqqHjbRP(Oo%kgC8]c\O`CS_mr(c3)hXkRF5'U26Pb`"UGkclR$feY4&a`6P
%"$_$$L,!!r[-_c9HLUDMj`/2<s#qGp5+XVOHVAqVYchgK=UuSIqbH+nmEtLYiBUUPgOk:7]qd5qI6VtDg5D*"l0jHq]sl5;%W`"f
%MEZ9P*G4>aQ-;RU]E\t*QcHf'_*]b@o<lIJU[WcK#7n."W[$c#S*KIY__f^/=U)@QkU8+[2,a(;_O"QH)H#r;^A*%[QIcUX_HC[^
%?iJt,3gV>gQ1tA%4NpQQV4L9Qqqto6!T2Rui+?)F=)"iYNhC<4^$*;Mm+m(fj"Z2l&+bK5XMV#sf+.1pcN,(Lm/Mt&5S"oJ7?$ak
%OVotco&-3aEoFDn>^t5["[4K^olA?aG0*&L&0<sX54Po'bodN<V@jX\l"6PWp$psKZ.#Wf5BrQ$Ul/!C?M<<NKdNT2ng7o@Efm\/
%QlfF:B<\!V'5?74I?tdjhNqAX*(rcrC[,'$\-\"pr*.BJNQ(@3DeU)nFe&%!55@G`!"\2<g^#hjj=l3sZQ($nPt8=+"hY1\-X%@8
%ot:*GmIM`Y*BsjpX6+`+o@@,M5.NZ9'e?&CX_KON[H).`cF/cE8%kbZ]t)`*95AUlD`dFM:-STEE]--Gq9E#Xo:<41EO"P?cT`L3
%p$174VuHA4NO(Ru/N_"VVaBSAC1YXMq0d\WS5-J@3N%#oO)t0iIY,njkEY?Bk@4JjK6,EjT/fub$SCQ=m*VX#rQXFtVt4n:Wmb7e
%W-#W<=1b$dV;Bhlps[rXZ<rZa7B,Otp;(c\C38oTD:5I[2l<#Kj/66J/Pi`7Md*Bti9DO+B'T9`;De+3rQW47VlbTNjhj%%arJnW
%:@0mQD(\fRYC<flRG6^)GRL:;]8OYMrO]b<GV``I!4^m.k3ddb\MlSD&0.]/17dL:c!][]m`h5T-*+[fM(jZk3T'S.&$pPPH[QQH
%]5b9LQ"=Uoe)r;qHb=dRksh:`j765!=8auMG&\[SX`H%mOPJXh^"DRuCVT#9E@mVTX@8Q)o%U'6P#"_[%$@BgfC52g72W?IgQVP8
%dG*(E]sF9WM2g_,FREc"E-1Mem.KSZim`>SYE,Hd`o^5O[%$VMa83Y[*'Hq9-"S[cEDk<kpf.so1je\cGii$Kg\(""LX2SGk;MHM
%T=:\AG'DVWp$pefe]cVUbfJ*t*fs'7[kjZ;CrR9SIF`H6Xip`L'[A_oR=]o_o4JOTGRB;B0XNVT(FJamI%L?u0E,30Qhd7bBXTn0
%H$[I`ol5l'q(&@=C[62(7Ft[I%]4g,$g2\ZH:e+?1ol(E2_UNSa<09`Wup!:='q7XCmF$&`%W!D*P6\HJ#bZ2&KZFKBnl4?K88<4
%2lFTLLYglk:d640gli3Mf,'W.@rZkQiSV)5o-\:64ne&qa#fo)cDFYVI2o?7EKkbBT5';_\[rtib]?ZQ`F/@ZN"SA>'78qq,DS@%
%Qi6*UbPjUsqXmoR[E?TJc:jI8i_?5TGeQ8cIq?O!]<B2PkPO@c(k4..UY!c6R31b0.U2dc&(,V9.k$oW`Uh8YD:4offp,23lge^D
%]1Z@XjN<;3jb]bDXIQq/>$jF<p%nR^YNgn@ePE6Jc`qnDCL:^-'/cAl3P0Y4\j"hV9(pAfQ&O&6G;]l$jQjBTR0L"Knfrc-Q+<.A
%GtHCWnup'cksG;$-MZWSjBl\0r#P2*cC$T(g!uBV\O`JnhOX+OJu'u")UoMGs*<<1Y2FTi+SGl[pH,/A1[d6M>eu*]$5/>GHTiH#
%#\.pu3`[/5PfHQ$V=B>uHT^aBa/d%`Ze1c0p3Y?Eg@Y(_i;iXqlK7O^00S!V8a;.^9`9hJAH+Z.a3nMQds%Q'n_A(:0H]aaA'$=Z
%Sb6GlI2-+sRU;MAh'rdD2rE@F.W"rFIRmELrkj4FM&1YRd+'#p*YM[\I]Mi/,.X,IbFJS&H9A7WCbALaUd*L;FMd>SI,4h<6CI-'
%cMI;4eQ^9SE+Rhb'3Sm='=irB[nikG2MXNkAZes#0m!fo$HH\^IN(:-h*srBZ1pDPa>bZ+k@Q8M</XK[Sd[f#*'1QmXUU$BRDU1O
%grGnLA(?@@qea&@48?42E])$!84PiBmPV2h-f7loT#2U>n\hI]hKor_-*-3uIFZAHdXa6+0O>C1"DqF=Gr(Lse_$ee2lGL!bF]:E
%b/I$_k,LBk@/"/PguF)re$iikAueVLp%.o(GE.&:Tb.MYn`/5XGoj?Qhe&`e^-7W9H[]/2KY>brL="jV70W55)E=9t`\Z!4EF/HW
%ogJIdk+hTJ$p3@iD'>D0g$IFkpaF%82[;<s^%U0CV0>+4C%BM^Rfp2l#0<TFqZb)'9`2*IY9!XH^0&Y@KrJ;A9'YCGC83$5],Ym1
%?9]M$.3%B`SL&iLq%4!q?U!dZ.??t6PMqh8R32ME>K;'8$RS5g:_qnFLCPpLKn_d/p@m#4Ld-JO(_J"`6^i#'gd4M.,4OZ^*PgH@
%pCVnEkloMrX(Qh/ea2<_ZN;]Q$tYs;$'u*2lV`Q^r\P%2LubUkQUN*1;`G_s&M(hAFuGAa@B:6`MrTF=6.;a>6iE9nH.@eSO,Lm*
%^HE+3YBo<T-*%9.agS@TAF+?`Q:pW8P<8g9k;)qdkoUM`h2`j:?5ur8@@ZTQ@LV5;]kR#?hp#</1rgcL>+4J9Q_sQs^U#'^X9YJP
%+"'^pc("Sp2.nZ!Fi`j)K2uis<BQ?hQgHHWho[%l(Jp>k='dWjMZA4/b2;nu'jllQIf&L`$HCK?g["Ip#;l)HDOGkG=_7ork2P<j
%L[#]3hp:Yu,<(AP.jq+Yc\$GAo;aj9`F)nipcQ`![^d0c-_@PupgP!nqqbrds2"\D&tnij.JDprh!&Wa2a$Roq!'O#*T(pVpk__]
%pm^e5+r?s9H!SPS],]rpS,LKrKoO'kRo`6I>>lnRD`37*as]]O\UAXgm+,L*s/8k$(*GC_>O-][C$SP`2E^,n=ruF[?-^*D%VsJc
%f"7pDViBM:nP("Cf9n/>plhVaS_hT.e[SG]o1"6SENW_d(`B1=-dfC/(9UFKK`PGN3UV$<GD?(^X"/eQlUu0,[`d7G`Tr7#s%=]!
%`2"\+.q7?/O0J.^AiGp@@UnbQCtNeAMch%KRkik):SV4"N'P+^5HAVo6T9"3lp#DkGSsQBXTJ7qa+65BRc"tU7iKsjL%t7.h!Dc!
%/^L&4A4Tp!>R.aTYL_e"O3;b)`24OR,Fj`T5P9qaRJt)4g>L</HJIjOb[FV%NnaPg`:i$_bA'teSI^W,oO[I_@I7L)[H0#7m/Dl>
%P*"_a9WU"+I(/EOAT));lWh(s('/H=.I$iHb9ML:UF7Z^@8ng1*^)_E48YS\T6IEcr5`6K8,c[sh0%P;enoc7dqjJJri<NU^3P0D
%[X+dHdc0Q^qX/58DDZ:c\'<@6%!R[%!P-`I42ik<a"M?H^2LE[T7,l<+1&p`n8b;3rG_W1HL:UdiTf]UbIr/6igrUYj1!A4o+i;2
%45Z2Q6s:Mp2.%`^2La/amrud4hDR9@39SK]Ao?nudiZ:WgYj$>8cC0JYG:^Gf(%tr:7$%>+m2Dsa>6B?q'ARhY"?em=;T2`<2X&P
%WOJ02LM,Lhl=7m7FgsL4jLgt_Koc-"(40uV^K^']^>>kan',Zt?9A1sg%kL,C1CiCp_3PrcRD5Lh,sY4nQ>P:cK@*jok],<pPdQl
%STm1`g$F0o-+*U:I_iYM\XefUP=\O/UAHILk]3bMbiOj2RmcLSfY@2a"LF14=^d`k^1.p!0#_^4]J+a*-T7Z/H[4"U`nl!`T6Tti
%]@^e'^AA3TNCf[b>2S:o=o?26j>HiHCE!':`4^l^b4paaDh#P5%f-4M-*``fb*\SR!1$_3)^`DY^+A0WD[WM=mAD8%<rWG^[uX:s
%d<9^`FcZQj6kf"]jWnqs31$:C5IoRl%i=`;QjKWPe,8k2Yaf+W<7Z=bLCPtolF8c7qsg;QhjZ:C]o!fXef65K8QO0,W@WU.5*]On
%B4`?.]SGOhc2$);jh'-iklfSbn'd?>XuLE/L5uuQNi^Dm>CUIV(Neo70&=M:m[LbNf:C(T8ap`-H>u$;f[n?6A%q2i$e/6RXj'J[
%]U@s;Hcc6LH*k(um(DG,S'QqSHQ-=8P<=E*EO.;rX;_Zt?MlIZcl:;<04Q*lD9au@N/H+Y<rhBNm0_K"YrBJ$TX+,_\q6gpB(gT?
%2kCrnq_<uY'nG&d(/hPtb-gZpZB2(d<6`\&@3JXOW9+8<]9'$m<('`S$`Q7-92@,dqJ?oZ.g+2F_imL64.O@ugKRi*B67s<FUSmC
%Vj:$'%.7O&DKCJYs#AkUX\Z$7Wgo83>s%egUt+,Mo#eC7>.&"NUfDVTCMOP/Xa&DI:)6AN&4,sCF08\nXi7p6PKe=[`NtHFnJ4a6
%:B*l;H"ZYb^GVnt3mKCYe&7VhYp'(CZ8@9!+@ud@=;$;M,V0f^[?]%mpWf_U;c_JkI7dH]8aTblQFriFR.C.<.6I'aA=ZV]$K(K?
%TdZXj5/,4Ydp"Js0DLq$2eM6hFs7\qH2Qm(5rL[JA7.,0k8>/:\5KQgN"ejhnIr'n!\).]r$'mHc__>kj7c5.6m(jLge3G7AM!F+
%@q<9cO=a1E2`Zhe/1k'&^n88N-G\E>?"dI\8]m.8E-$`EN5*]]n<f3j0$^FL$QhNXQPf1*h21Y7DY,P#"m1a?HWQ06]sFTUihH:%
%n@$sJbf'0#$!G#KKuu4Jho0"*>9DO]n*\K[YK+Ysl?M$R]<CeOjdoi%"_Os7;AnO@N.l]ka]Xrmh`Vb`-QMc776N1taa^kMEJ@`b
%`R3,X:K53?8J'1;_H4I3YF!f53o!nl@j;s>Z\91C?2C--U02oXKfJnG!f`n]`>:CX>$%0o(C/Q-Is?S3,MiZAT1m-di$/To\9Vul
%$m=@(=H4E7]/0!&8OB#>Ke9GM+5J1XfNC5oIidUpYCFi;i?$:&i-M-/,WtMm?BVDJ_qZfUjg0HH-j'%+>qWZTdI5?=8_gM1E_&8n
%SOmh`]+AqnrNq)r/M$9r_j9t/m@jHAVkmE)DLU(o54":NX'btB3kS3@4&43CZ7J8tfm9E9C$REQkb;?(f&*KeFkAdCBPq1)M12TK
%5>U'OI^qW"qk-`f;Iaj8+"qEmQTerK!Z[0&<'b(Z08PG^E1NKsk=)BKT3:@/(OR8%m)k.WF+!e_c2ZnGs,r'XI(]hX-?nu[Z6^8<
%pKBoRpRAM2[(tX?X>KH"R'5n;fEHc]CaAo/B&fn]X>g&\"[>gpMb\Y\6=$Wo'Hn[,33]E:=G((hj-Qdk+JbP?=*L&=VLJ+jgi[/I
%O&phP&s2l47a.3B#:"t;f.W<9e7<2E03uY@/jH_T:SM4a;)d@HBffp9Q`3Y&h!MSWbc6+F-ei1"AkI(t4Iu,5/+9Y,?>[,gEPdN_
%-Q2-XfmA1*;8TBAk0LY?^%$<Q1\-l:9)d.Fs2Y.DXd*-E.X>IDrWkNkcIUq<ou=nAk@Vi,.Fi]HiRQq&VmgYie%9D))P+W99/5dL
%YC<dh;-GFUoIG[q\hq[1Eip6Cqe[\*<aB]KY=AM38uqkSBE&tIMtsF,BE#p`qbK3ZUW<g8r#\Zc@fKYDJ,>o^PI65$_-_]`^YZ<3
%J!\rrn,&r2Q<^>p=8I7%P\ru.!p_\Ef#iH\#tgI2/6CK<\b*so6.tuP?NKI;IiT25\*SF$X!%kDNa/]N_hsI*JHiDaY(hlqNa/QK
%6amg\TT39VQ9@a9=TT%CY?VBU1*f[d%\p<Cl,XKN+T#_'@L*ZN!-R?F.TbG0Pqjb=#'*O`.lr:qW$D2IElHF?Q9YO4/@5AMW%l@Y
%FNRp_P9>E;ZA4YMR.F4?aKm=XQ_HmN9o7X>-$#+\.HD0hEbnA/UaV@XPR&+J;NqG39469nZR7UL^^O;57LEn,VWM$U!\?W[9.U@N
%pgl[keQ=a?kV?*2W#EQY1"R/L*;BRZ`=phF0r5pbE`an`IS;)?KpJ#*lC(j@kc*NpFCHAj(Zq;\W`B9<Okj&Q'sJ!)4GUcB0p*:s
%=hu[9_fu;5(a,Pj&QYG09:E.!Q`!]t+Zd:>(0XlGUiTIBR^D?H=qTse(mKY$7=Ij_Z2B+nO<;Qd2-VgR0T[VGOK"tl-I_"bbF6Vj
%;$?$^:`VDM^m$:I@=0q,Z9JPWqHe0a[0hI),J'X".%2?WWZ(1+P(=X3*dNWUOA.Waa*\oa:m:,nIhRnRj^]hYW6&"+KGAQ12Sk.G
%fP9N[nYEch&X#_HC1M1EK1NO8`\<J^-t>]f<:ZpUWeqYCT2OF22;Bs[SL;9?P\K-WK=HFt+YMXl)+bp.$Xb)0e/!lKCrm5)K>_:E
%D/j[CYb(+Y"iH-lQch)kU>gV)6q:16Z#]eR/I#/gcN,L)k7jq"L_Zq*V%^ggJ4`2>GjXHG<CO/c5d82N<_:Yj9a!D_iNbI<XKbr_
%-q;:E6!uF11Q!*/q.$H[Gdq;`0LX2.C'XHnqM.(*W$(CFjoEKlYsT:$eIo'Q$F0/27S1co/L)r9%9pDO'\kT#$4pUPL)muF;>"i_
%WZ[1"eM8ga,i]o)RM[K:L[a7:&k'*t^d5Z/Srd7\EKq*pEWr6.0\o,F//nLZ[t6YOcA,=s5ljP4o+aokJRHE`<1"#):U`B8MMMDI
%UI6S2'm2!*&to@Vg>r;ah;ft`[Du.CA;`g,:B$aD%2=H:%,"RR(ehBZmLh70U$dK"*IsR!=9cZ09?Ujg5lL;r7O3fcP(XJ>%9_Ie
%',q56b/Fa[(s5\`&Wl'%Op'a(WNE+q&rdeqM,4a\[tp<V[>D+s:f=RF>;7?3gbPPn1BaRH9/c=iW\,X7-9i;:0-EKP#NQ,qEm9nB
%NEjpC+ZaEpQ"pm-(3m'n.N$uMdOi#HU-!D;,3i"7Mnmr@adN9`W&pKVU<EYJ$^s%OW9.tq,8*h$bANIi%2>fN;A>iW8F\8t$;D@&
%N8UDR8O,$769H=Z7Q<lQ9l7DEFF"[d6P0t)Wb1%ARZ#/61SQu?Oc(T%#HHri,!W7tPf2Va#k:li"9^5VWu+4<9P:e/R0DnDbeb3K
%fpZ1#"fjMG+TOuk/J@@'`i+ImAgi@X!^$+;c]e'_j<7t4$4.p1:>koeVB'/TKgf,p0J(Nk.XRIXfs?IVXsI&E#qL_0!We!i%g3kF
%+@),jF<,OP[JuMDG64kNM;T6[Bm([Q7p<B@`_NIs:qCHO$]T=dqaZ'U.n@Jb.r]m!oFjKNllR4f8>S!EeP[Xui\7`B@ru+7A.?"I
%@^4u=*7*,G6nK1R9mi0<%ajMeYgCfRT^jlAVFaE=_7Si?&kr+@R%E7]1'RK)XB`*.;B\]E"OUYAWV#FI]iFP/VWcZb=+k=!;<p%P
%MmKH64\J^R+VSDQk6S?r<baq[3<_20KgFdQ'NkM1SfQdI#dOSJa?^P]LC+oL3\h(U!_6`3J3#IWbKM[Re-)R%(H@_V1]XpiIHH7C
%PW;2;TT7753K[3.a:bEr1D_#6)KPo.OekAWA-pa&o[k3??3`/>!4AE3TI*UT#[%4OAC$u<!7[)J605,Ed0r8\RI?-9)U/93(j#k<
%&ckhtfb4Q`O?H-P&nICK`jcYYTj!L8lq1eU9fk)O5$m2`@I0[EUF+%^F?T%123TAc$:t$tlc$pP8<B,0,%LhPaC)[u=TKtWY[<>=
%5aXE?],8p]+U..0fe,T\5`,uYMiea9,(o8lA-JdM@(R6nJ=&K2\HioN8\`Dg0sUjYAC$u6#Y:&BjW\4<UrZrS(`@jk4_;)>26a-B
%Z<N9hJ-6_u(Z?h\6-WSU$_WqXMdk5R%BM1u[e:Y'f$d3X4csq>ptemi!+Sfh*_GS:\qd<=:?61>-h;3ZTFR9'ee@kJm6mP;!cY$,
%ZKq,^=(8r>2:&D/IlM=JM(8FL83%$W:0?PC8:haq#6940,Y\\BBn,W$)nc.<P$@cq.4FSC\FKM2gYBE7fHB+?69qs5E@Vc8j<h)H
%^in&+-G*Lj#S0i)1oE]k.#HnC8OCH!6:6"#8Gq1m."CNeN^P5;#"2U&0+bD'*Jem+*fKV'+(5>ID6$`h]RUHIRn*#5^(#```gUV5
%K`]e8q7`o"W<JZ!^G\I:K)8FJlb@m[8mI\QfbT=E&f$S?58N[^d-[ob)8A.O+[*bm0ORLNn`0%QM*pCJFNkWf@l<92<TbK#"=<7c
%.]B$c3k;pn^_#WC2>=q*ULE63K?,48LnIf!7X?=F9N+po6pUXSNRG>M3,YJO"0`,%JOWNb<0iYuRck$Q=gs5i#UBVRVQPmr<t7M"
%/:^j<d+gPbaV8[/4?h:Lb+*2TP4A(r)_YYd,XWZLA3gp_B+p@O?`ZIXP_>,)5b_[(6IL4]#i-\\6JX%>UHD]@.M:@tMVEFh?;_Ln
%2@Y-1=KPTFAB)\^[KWEq%\DQKA0o=pnpEgQ)k(+;7.[IJU\Tm>JGG<QBIj8%<AcM]ME5_loYKAaCT5<R18Ya;ArR94"%C4`Z3ES:
%RV;-DL<8?a&WM@WS8&t26QFimP>&6a&##KpMOXZ(j@WFa7iEVag5T$fCcS$q.\RkC$n]O_Ts!-(77K+h<HSM,V4hQla;&^KKBBdD
%Z`(/2C:qZZ$eE'b@-A\jTYaP"Op4?s,YX?"JI7bkD9SkiZK^,ro^-HER3FQ,aCNc)Z)LYi8&>tf5q"FH,4!_taC6Tqa9"noPJD`d
%#)1'j'fDp\LTg,ZE1en2FiK5faQQWFYZs&E7^+CWX28RO&;ocl'aT1]1?m_a9UQS;A-.jU.@On4)$Dh-L*C#=3]=qbohGi8_=#L(
%b^j5,<Mu.ESHE`W9U9WDI5IGq,*c(.YQ@[\K_lHUX@.c,4fDL75Y`[`2$?6k7ff(\@O]EX<jn7&k^AkG_WL4.9cb@tO#2Q3CaS)_
%FUG6tJLALR$3rg,"9sjN\iH'9cB$2B-h+s)6=[t=%&);gc@c7=In!r0&V*WX5JRf$D,3_>"DK\/5VYJqIiPG#W(12n*CXRNnqd._
%o;nf')P_TN[;?DFB/QO$K69eOE5Ca#WKSfVog1BE,T(^`eghlSii4Cro)c22T`,qAZr%ifV'4PhW@)^t86)<a7iE6P:Y\3Q*E%t2
%;\G@9mhopB8FKJ^_4df:>=MI18!XaDUkd#g$a5Q^amk=gf7@cPEe9=r76";TMZ\BJ?qZ@SKE<@,jWKa#-L?C$kO/--Eih+bW3ITE
%_h1KW@!,L8gnU]+p]+]%StnPZY$aj6UG_.PN5gHr0qIS2#3/Su+6q6(CB-AUU`mrA*^Wp1asL-kf@]Y(blG5)F[N-Zc)oXJ5WT-7
%P"AfPT7.4N#Xt+fK0>GEbc_1B($4NP)GTR:fpSRk"18:@5X$)!a(]oX6WJM_EF*"Lr#4p4<F^f-%=BC36pTOqA(<rc(Xb[m"K2TF
%V0((#(^%T!.ol.U^@:fo5InHr+?<Z9WL?mFLb[Su+.d+TpJ%Mk.Nk.,1td0GX>Gu!E'L@+2ktiPZH`%eGo!;&f<iIcN#]o],UA02
%&U8[[K2H=<dNN/coDJs3d9P19A6m@UWi)t&i`+@7QM?_1>E1[``P11!AL)e_W/tR`mo:N37.h6_A-%IoOt':Z_<lS?/#nfMItauY
%3N/;IMFri\egl8aYOYAH>X]#@V*+<t;!<0!:17sRr"u!U-?;XJ02@7^UWs4!'$mVrI4'$H$$)haFh7sCa)u[>#t*cu\>>u8O.\I!
%\!(qel^1<a8(oOF-SY!u@9@2W)5+./>gQJd.]GI"MI)E@P?iQP9k9%?.:e4pjI.[^N"XeeH0TMbQrO#r(hZP=.HuNd<[S-u(tEdp
%P^A64XB!@SD<<.-YXU71AmZe1Hd98nU*4/V,LMW0YEA%iWRjZtk-?Y'BYA"b,gh`109YP?R28G:jNNN-)M?^E8[P(qYEJ+jR9)s:
%jQrom3ca@_&rj`ob9VD[R?pK%jK-NM)J[i7OohRr2`[-$3r$l"!"ACX?eI)%#,(:\N/FoIN2hE8?a*jqXFLFV=YE*25`-!$Miea9
%+q+:eVuhWT;mqSr'p/'eC_n6>+@QLh`Q/BWOhl2qZ3!p7Y[*1r5g5h*>_IubUgI]D(g-kgZ=d#V"=2(2EY1&.;Im":N!qtqT!DRZ
%)VES1fe#Zo5_9E!Mf9DiTOt=;"].pg79dgL%16GP0m]q!PG$_?ZUP@S[`%F%W+Pjc$igat3+0W_^][1uN6jLoT\%9a%@JoUgfOZO
%Na0!I=9G4ICj\T>J.+hf@guP@g:ndE<\,=:!hb*\q1]:XFl^p?%2f-aaD1$sONBCN+U@3M1;I9_b&S'!7=bH;,PsA&nl$7D[sWu;
%J3'uK;^*k`M*.S%^n@$g7'97@g_;&T9dOh^9&s0Y4T`ud!,P9gUaQiK0#4!@U-pn@<2;ncMRBOafMP1=btl^2F:EXp7;ans2;p)o
%/"KVM,Kl6HBb5rQ3TWR.)GY**CD!fs!CYfZiGHf5mBD=;N$/`An0]/akD1Sn?*g@?Jm!MX@nK+=FXfYG\?o&oi7]XlQYYr]8P<5V
%AI;+p<ZRu)5B`2:5M4A9r/aU+r6-X1get*[OrojdOlrBW\h"I',Pab<5`@7NP8Yn/(5&9uM6$@$:oW["%4SRhTK3E[D@&j2-\NC`
%GhC*]9nYB%TeGJi:#7V(:?K6Ars;5OE["BY!>C<12\gC9=jTgqMEAC'TUPAK9%GIP8>NDEaH-(7(au*u(eIN^TeDTpIgD@EL0Fkh
%F!7'RD@)^,J2.Di1.Fa]=5lP#,VHe0R84+e4oun--HU@+7C6?m6IW8/Tkt%8U,tnQiSY3m:i$@E6"I+ga,uoZ[9!+`\.2?9egc.a
%eL<nn*m<"1Y_o0B!9&_OXchTIRg*bD_j.Xr]ZZD$m>"^6[1t]cW3M`!C/t/n%=uTg6g_\W;?&>>#o-uF_]/Xo/p>++.D!2&9EeO4
%0r&m6-nHBp;.SW?*U*B9Jl)Y:N9Xbf_u6'`.L<!e(G.f!2-)k&C1<](*l;ts85-.@l&Tg\n'D^s(C&kKkQ<U@UN&$E9IMG1#"j)k
%3_[9=&Q\Ob`Int!E)EUe/P_##@.71^Vn+RE?um(KpBU2:8"nYCi1]uF!H#0<:sJG>BNlJqI"piX.8hle+59_g(npcUV_AO$cPrn]
%3=rr5=D2E:X9tnU51uY/FVQ$`QuD3JO,emeK,;+0VuV6b;3DV]g;dn]"P?'nQ"\N',sd4JS!(?blVsrD&SdP`Th-nlKpJ#*Q(K3R
%9j2\$QMQn71'r."Tr:E$&'7el&';sO>:MKc^WD>sYfZN>qm]E=33]J6(uAoRNOcp"qf6(@FXN\Ji9ITVd!$\,45XeR.";6BJu0%m
%Wk#%WL]g]7ZD[>sTD-3j",0>[#Cu)B!Yh(]J/H*i3L#'T$\X<uifA&CJ=G83@I`skPYD`fp-LRp6d<U@l"T[YqHGSCW!t/HB8QCG
%o"cX\#=&E>)])%FDH=#qr0YbVBo<%0(]cf7#Y]iB!B/?g:^!Q5[KuPC@oL3k1Q4X_JIQtg2ft<A`9NE`%O0U20_>f8`Zf/tJn$J`
%cQ4(<QJgE'#KNtZ*4qM4@,Y@U6F8EFNb.aYM5k+RV0=((_271K!0I"HY`Q4jDHgBd#fnk3o,`HRL!p*;SD-)bb9&6@2$i5g9%U1G
%7+!7Z*'L8Lf%VJc`>OXkbD+.7KVKQne.E*L.+e!ck1G4*mCKG+mHd*jo!i#%,'b2^P'CjE4$OZ<mmt<=G-OIX#frNgPc@bJq(XT`
%A<goMX!j1LZDtDu`=E5cPp5'Q5s6IL7IdZ]YmXFd0LA%t8RBp%<OYfT5Ur+T80SfQ[C%^>,6;8RC>rcdmQ=3Yj0Ms00,h0IJEl`#
%A1U0OALt>N"&c8U6nKYqcS]S-gR.Qn5ZH57Ld_ct?/%V)U4sUc'F8NLXJ_5EMpDDmQ"k=ZNKc&o3VJjUW6C;MXtPT!j=!8+NC!rG
%hP7$(`MaEFTun!9^<om2DWEN<V1P%_KoF7[%eS/e`^GVW01(pmR:NlR?S[2047Zs\BY"oi9t+ktVHXL_VHX\/#lr&MW2\eN1o7K-
%663)=)M;L(+_Ae=*?bX(R3H5SJ<W@IgpITUa^@FkqHG\/g*mUF75eeE9Xh/D<I#QVOi9m=7@"+@`'.]HZp$hl0PH+jlSWfq=a!>u
%osBF(N+f@REl"FFXD#T^at"QY_I`6hR;`>Z\?!^0.YKn>WQOL.U2L61F<jJBWItVG-?1T'^r!*&*@BSlT[p5TA(<G>ok^_p1sqG)
%F'YLSQq!9>"Z1Y,WQ5($(!ujc/6!RO<BC1*<%1?J'P".;1]elU%r=/*#1?'9-$:B2('^BKU8g2D<([-;[4;'lU]QX@$A-JI'acQB
%:gX1=bnWau>:Fe#[d[>Y5^mO)Ft5sH#mdY2'ih=h%qn3:<4.FB73aN`ai:dY."NPl%pb)VW/3sf%DbjYTFam"WO1[%J6ZgY8W]42
%`5MVQN&<;$a\ge$V1G5_0!t+##il7nq#KWQg.tF_<;1'\AT9!sqIk/+k)p*/K&Y?[j]i.KHScWk(D1=!"MCCa<Br+R5Z8_L&!JE&
%-Y!M=SYH6@<J;BWp!<k<-PhA,Mje-5SM1=m-nks<:=H(=aVE#PWC>p(61Jt0hu/ek,;D9O\?nL<nj&V*--@uF_N:[8j&P07KToC9
%Ohn!aOS3q5\^Wr;/d4;A:Xn/'(Ou^QP!G1p+Om$c.4?;$1/]c=.>D6rJU!-<P2g_;kP1EIk.!Ccie!ce8<f0DOIS;\:iLqHf4LO.
%KkDC)JXURT"/Ne+%If<$29;<]phFeKF+@MAZ>uDV++SU-6?B[>%<l3hM4CLq6H5He#Z5q3(f:TC&V28@L`lRg2,L)@Pnd+/6]H3X
%8>rFZK+htR>QN4!>U`bh0fcId%rdsW$BZdCT0e'0(*"`%cU*5^lSQ')^3gMdBr`Xu`7bQ@SQK7l4e[oCToG9UPas&2<?r^MTLcIH
%N9sik#3c-gQ+gp+lQbWM]WtO?cE%rL@Z*NPe\)T"_CcRn-F;'(c4H(.cO_(L"%mZ81P]HTSRRKWd2iquLt!M&!Q=;<Z#APh]XCOs
%+6gDoa/#M1m'SZ\8AP#!f[s'4K1gik8C!5n!3"j6HB-'G5,&tU!iWE3<_'8Y-4htGhf\M49F*HU\Z0TI-$"tr-DY#8c;^tSZ0LS3
%gi64bS1M[Y8&nl,;[0Gj)3#&(qc4DgJ;^+1%O`f(7Vf3!2Cej:&m-KR'%pgraJrT4-$$+e$sE\-pK94a"V=,a7lI</-bu_[iZG6q
%\b@(WKg9d,8Xeh%NLTVA1m$*NWP!Zh5TMkj][dET"5._D*e6:leT0+[J-Id!_C8GgWCEDBnf2sq*e4I#V,RPI3c\oEAIh$.fskTH
%5R*tEQ9>4jjM:?A0)uGlMZNoU8+pd,jJODfD^j3:TT8Bl'Z`pE+OBW60*$-*f;:fNM?:>c!kD>8Ef^>'Wfs/B[]`U7.:9"Hn^j`d
%F+29`W<mT;]p,o;%$%]sW7Xs<<6\4#RqMZc8R*p(3c\37&,#)<Fm62X*S%hjNI+DP]Vq2fQ14DZ!m0];+L@*2K>?Y`+%7.?Jf?q@
%dkC95(qn"O+c8;;\DrE9:uX9LFXUEn9:P]k"s#Q/[0ROO>1.<nkeban,o`M(CdS%XfqH#H89XW#4HYhC[T!SJi*3?N.Z+_*4HJ$8
%RXbR8EO@.)8B070rHeeIFAi->"@!"=DjbY`I/s^CNY1)ETUtua@`["dPX%?MADRuSj&7.kC]`ia/q0gX??*h&MTJ7A:m6a='NWFd
%jTR'\<a:0,!S*u9,TQl;7-KRo<,rSN=A]]b6iTtS<57ro@"L-(l4rSf#Y';(PY`Dtk(MT\2_D;qZ)I:"j@EK#.XI/?&62AZ6CQot
%Hsn$Or(9BJ+Ni`F`EM-AdXjVI7Bmmb%Q)[6W913Q/^OULWd-*m$hG(4>bi)Y>,11:7t*u7O\L@F`4T,B5_P+!2mhPdgOHk/(#]Go
%nhPC!/BJbuc,KT\.p@o4J]RYfL8O@5raAR&QH)l0(I3e/h6CXPmPb/V*`cXj/8:%-fjG6Z`i3>]gbpjEY%S2TbmHDb^PuA",Mt!a
%D9_fG3WJs+E%D[]`@3'gBKLctH:L+Abm*/Wjo_LNVjtj2VKe;uYcJA&iXV/VcL;ufV;2kZQr1+P@#F\F@/=sqUeo=a-B1P]%F*Xs
%g,;KqlF/^o-:jhu[l:]H&.M6!#P\@s#[M7DM,K"=SIC9f4ubrKqoMAU1uGej/X,iN,]<Zl'#\$H6AbN\ZW#hrJd=#Sa\W!f99gb+
%kR#dmE!-48:eM?/)?E5Ce4a(6e1.`W7-Ns$KYC#2L4tqZ!L99#0MP`F8K_A3'iSM*?A'O>O<.4#dR3](7S?RP^oUa@<7p8WXHc-A
%ZWmCEF+,gCp7?B4Y&NT2?*]6s'2B`jF?'Q(GSYF7ZVcrc!%/@\MkMhe@&JR(TBTSRR5CJ-:sEGt/XZU;Sg?XqW<A"h4HrnR8.IqA
%a?uO)`sB2KM$]*;kG.C$OK]Og0qX6XF;:@#GQC]lbN0@?J@^#lB[="IiC[dM"M!sO!$Dr'<WLc<^.W+D:0@^H6S*s5AJ':t0T!pX
%JBcHifeiVkB@c]_>#eeuI8i1g`>/s3&?@tn4,@R>"9\CWHEjKJq3\1J]E2'a&eqtOT\),R@[sq01mGHN7*!$o4-mjW-EZKXl_r8N
%&@gaM/PX1N\4Vqu0p,b8K.>]Q=2qJ+2G2adoZ:qeL(rA03$]@akhr@R:kC0qKgSJ.7W?_//I6l`gOR!LJc$ols&:4ud;OD?Lm/-^
%W@0RO'UUXc%dJ-G%#JbAE/=$m8IPtY/H[PK6e7^%l9\Bn1X5+.0"\-G![R=>fn#YuZ_]D*aGEP1a8&YJMd!:6L2&77^hHs;f4_Om
%<;)[HiYS\rC.johXZO5Zb\u<OaP#I^ducH$Ff-I^Id9a=0)KF.>-HUd]@2lu^NQM"B7B5C8'_%dS]5(2p[5D[ZbL^^,A2Jo:.*>+
%hOT[sq7SkL_<`i3kri[.nP2HsqVn'#Re=Y3!iThR-eW,aHpL.:rP3jg1)RDd*g6[&--0KD>0kWG#r3>T70`Y.aNCG=A8/d])2q`d
%:+Vd*$DXKBJc-3\#K7IW=0Q%jXGg=MQM*t5_5K5%BtjcgN*8T7p.LL`W%!@,^DL)k2=2:JQQUoXCWN)9M3Lk9A?]F"XGg=MQM*t5
%_5Jf8@(uh)YU^=<00of;VT@290eO;#7Eo"a$_Ws.MZVMI%18GM)El[#8MFq(YrCZn$8ZPF&,ASl<OZ-<WhO+TW86"Y-+1?&NAG?o
%M:*\gk@2R;#]Bk(j]jkY[NY-XXpp%B5k&Nk*Jj7gn7o*HW.q:e2V.p@k%_UjJH/Z/IA`6E"*FSf(uEfN"&UN^hUT"9;<G_+6oD+f
%M"39L=Of$V&0T[oqN[K`QOSbJ']+PJ!crM@AfS0Q3a:LjlD.]_J:mIGOQ)C0]&fgtnkLmRFVWfn,3L_e31h2K,h;\fa?aVk,liA>
%9Joe1P,KNRka3BHd4Q=t2)NH#!anVE+a`T)MGP_T-MLp[d/ZKD(W\>X$'&k]d#g@6-!7X5<UcM0PaY\`<hpWW$3<Nu)`Mmj6fa(]
%FC]]T!%!8n3Cq3,bD@J0lsk@GE^<"%2NJ2*EY:KSVh4q#;%SPVkZq3M$*(e)Iqs<"R:'>t#[8ZZ1(?Jh)&\&Til2WLO710UEsPd[
%Wf/;BSup"2/7)=W'+=ju]r3*#;@8.D1SfiSR2;Y(C22g<4X!\ZDSSr7*/`^//Q3/L0JQ+'4NAECM"2r('[7fl3)jE%TO\TmQ\$=e
%XNrGdCgA\DE[E2L!n<<C+Z?S2=k0Y#:a-s4>.#1o7nkIg.B8SgMQ)lhd.J6S-*0+qIQ/)X#,'7>-q=UM;l89bILBqY5nG>m;PgFb
%!83'b3NNE'.=m1?!:&RGff0[)b%\>fNC-;J*?I/j"\F6D1ta3]7ul[,NfbWL+t(oOneGWAN^ARc^0:T`rGp2W,YA*"R6u%3V_F')
%YU9`XpVGgQ?X6paaeXQ!1+TXp9I9`gR3Hmu+VS0nVEgV,;qt3!Uu3DdcWQCh3WnbM][]FW#cnY5(2l'aBKu_hC8[k@"boQ+<V()<
%RMVdlanGfaa>5%d;_1<<-tG\1.P"HFCpN&!+D]eiC!5OQ17!<T)/Gj[ZO")n_onW&gnsoqJJIgK,r@"GkF1oU*1^"N/4QQun:LsD
%S3*_f'7a8Y7W[Z>J6f6S^b2'k"[l6GR`@\>i`bGV"\>8#;D8ZZ%lIGTU4Mh#)qFk"U@I#32hU66:UB!!2U+e>>kQ`u<eT/I.JoPc
%ppOSYpQJ2pU@s%DM1b_&/+4%bA<F1.#i?E\)Pg9Z0YP23%0P$8H:<LO6SGC,Pr'"$>n@_l"MKTuY:?@Qo.#q.A.fUg;%&@<[9h#@
%ALB<4=83K'5SGGC&>0;_V$[lN>JHhN*hchZL)TQLee^OmD+hZA-l#.Q&#PRbIV<Vc6/1HH!>=M:!de4SY0?9CA2bf\G&:*UXBW^J
%*b-tDjq9(=qc"D;TYS&E7=G==HL^?;%T">=jPOZ&a<=JK6!'pa,[Ojfm,5G1pfgL%9tUlSRN<0CDR$A8//;G?q<Z6?O,4*a>[sad
%Et59)$>=]P)=&CbRU_YV%%%)H>"dN-itl`%'$?^YOE>,L%Lu)#W?+&s9I5RIR&h_-0j4q0"]b,6%DNpF=B*_:W$@)4@.$tr<"Q!c
%WqD4HSDf;8c%H;K#!=-md]'SsF5j%lo/^6Rq@G-<FnM$=b!O@Hr`NBsl;+(oMJRrDF&WC)3JM?HXi[JNZ`nC=,W>4WVe6S^VB><.
%qI92d<#OGL>To"X!DfsIhc0lFWjReL_f81H)f6<d"QV(D"YW`@$JH2Eb/dItlmmH`Y+S_u.[ZLD5Y3e5)$E?N>d`q,i)sGsa0MA+
%!\7kXRWE@+,pWu]0E=Z?Zo"*Z"#6hrL>km/[Gk.G%'ud<58H@`Imk9PkXn#b%=c7uW[=G(M9OYNSDi/)QlA#Z&pRSF-.M;1$C8'P
%a/=RRaP=\R)["TIdrWf"4)qIi[iLFUA-"Fs/[*4r:e-i/JKXn`TRgo.9a78Nbc`F8JJ2Q#1ls;caT0hQ/!a8t!,*L59IT..!d3SN
%;OS"Z"'N-BMCa9=EaX/]%Y+bhjV9cUlH$[n3mt>;)T\cgq,Sg4/bSK2e<)n`&pYoujB5fO"/(\@g6BZQ;'K'df/5""/62';1luRS
%j4IAP__5+a[_.h@/.$@>FTh#!$ZW,:MQ5:q&._&Z#P2:hmBS=Tq?iQZZEJAmMkB4U.,7\A\OJ&$S"`QOo_,E"Y%g'L`$7e!$/W\'
%q10(%&;"067nL.@.-<XekRETG`#!q6C*KcYOkR`DX0'Ja>bDkK6;'sth,Y>X-E0$s8id,)I_4sBJh(St49`uAJIue!'F;eja]$Vr
%PNT3N2W0^u>SdAt1*7=l_7>$>R_rNjTKf@TMGJ->hoCObH%Y+='&j&$.oc3J6^f<bIT0>&_?a;?*L">UhC!QAJ93.c&b-?pL^&t&
%c3.0*jX0:[?pHU&E_@\%&-d\I%\]&B>lE0VE2`iA4@KPJKj]Kao^DqH=GTCqFGeEc:t@m.k."6T#4qs"#mo=:OS#hB6;T6W#\f)^
%GuD!:R=5:TLj(dbb0n-f5XeNj/-Rl/;lF;JQkn*N.Z3EiPm2=;eLV3Z_Dtch"e,^ihc9$YW[-`C<e4K.E+Lm@ls(UZKN:rmY+3ig
%H#H>t#js734q*Pe=:Irf8,^?$<\7*`&M>=PPmI9EUiAhWF,D\RBeEu):0E9N&$_!#4D#=VZU:sS+Ga%Yhgnd06S5Ah(ofYi=sBQR
%036;`Y-:$Ae#![O/T)qT;")aEW>kuf.cuprI']f(@_.Io3&D84*X-\Qe9Um*'R>L[[mUoFl]YCpZNF68Z$tI/'+%,uM$2>TXCK`Q
%3=8c'Etg+WjT$daj8^[cj3SW"5S^_*/OB]s;kb&$KC(9'F6Mm!QpJMYADi&JTqu>+0VJF@A;>J:/eCX62i)FPWZP3j3gU6hTF^Zc
%Jq?f2P`UkI^`7(qJq<odp`e24&>`L)2XtL'KUtaeL4tqZ!L93!/59#bO;'8.aTP^WLOp6a4![TF47^n&d1R-Ad(eCiBs>_N==XUM
%r@4nI$D6H.k[%N%Ug%i\+R2e5#sU0jBg.?/@Dqf^B=tU1!MCV\_+H/=$J!d*qN_XXi+.C*ZpuI7,r20^!XK3>PVNP9MEm!<,@1XG
%#Ip`B(R@b@7EH2d@F$aI4k*^fR3$[*:&Z:P8q[W\k?.jLcR#T"dOp<!d?i<-RBCS3MB1cgF;Ak#%q9<^0He"Wa!)D>A[-h[C/N?U
%NBIGdb]!l.!Z(*jhc@Wm&?@pIE'eP+JV/9(Sg(deW`U*saKrq(XsFj,mBNlg%Dt&XFj//VBK7MqC0BP17Z+:O4OF:9=Wq[d<l<XZ
%Ltcp*HlVdXJ]-"ukd`2-O"i2mZqPjodWHCgJJ2;oo"]m([>IS)ME\]l\e6[9p1e-I($F'JA"I[5`P.a(n7krj;_`-^WMZ%2&\d:o
%L!geR>$;+Q,=<jlK(o0t#:a!;1<)FbWBo#?;@Bn^*KcG![Zh+cUkU-$EJ6iEe0i-eO*%+qK&b(R1dN^OC.#CoZHtB>CIK,_3G"P7
%o!AC'ln_:'oq!s475a/m;GeGpZW'mo:+[42R*.)seU#Im("JF&91=!abYh:Y3O;[a@kbMo<9lQV<)cB5//?]sZV*`0jNLM!NPXsZ
%;8)/:;Gdl`X&N%cbpjG[J=:X8P&lN?GkdRLfIoMpUNX_rCgb!\)2qbb=kYMp#,A':@)!O])7>2Mm?\rJ;/=70"VXjDe<Dtt?\7R9
%^]O09p5>&u;/=8$IL.bH[>$7"QQUoXCWOqQ#r3>TAJ"2E,:fOd4bN\GA2%a-fs<)h12;[Tp5>&u;/=8$IL.bH2.[?cQQQNV,m*ri
%aC*L3=W0!6"f%rnRB(6iWbK*oC+\56E&juH@m-@cZi1njUZ;,m8(@njI]L@Zro(/4\j;<IaXQcG2P(jgiK?]'-fQ<4Jj![GL(e]o
%L"htF!93AK'Q2ZVY"EFoiO0b_RmZ_S%7j$Q`S4E9hTJ/u[N1/^>>UcZ!`[**Bso%<LkjFF'HeSkQ=a?PQq\u%Yl\odG^7aFbgg<p
%g1r?L(Y@`412hDn)J?"F,t"XW5;Ri1eY9'hAg/]InW=,W3q>W?\R@lk#Nf,HY+YO%@$!tqFtnjoRQ9QmTZL(U7sZFG7$F\beW-%k
%>"&rV:PaB)o$F/ZBH3\p2@dCo%+;636nGiD(/dlFJjpqp?+u&,P=D![POA$q$fB@/5]iru3;2u)PT*,;4W:@<4O^CX,p68X^_S/Q
%UDEpQC")#D=mJ)Int`5DP_gSbUA,QQ[`?E#<K7ANKSL"(Ibtu<A^$;j=i/72S4tiZni^hF`Nfc8bd.AFabJr&Z=+k<><n?(I:0lm
%;[$KdOQssRI7S8c:'FXSY:%RFg->_,p`b\r!Q:MNk(HYn:`cNlGQO+GP3.cbd'7GjM#umu;NoReO9):)97MPqV'8uVD8*lE%G>3t
%0sY:TQ;>/j,%I'MpS)@]cqG;K/b:U<.`o=*:o>J"_]`l]cR[I^j)\q/Fp:Z_Ghb:*L*=>hM%dGPr,l,LYSpP@=S6L3qA*,n9=oj1
%K.9InDQ_0I!)ol&.=mM</f6!If?1:Al./d7KONDrT/9Sm%H're#fe>)\H$<%D)eb%4"!"L2jr`Irg3])<-ko+p.6qrTi'H+V9sB`
%MXVT(q.H_lm=?)kP`<\G&^<lr#(8J6ZQ]W?`C?%^p!VeDX1o3!@)LdY!>/.N!tn9..On[<+Ft:5[ac`j9<&&J(=P)C6Y(_B4!b^p
%Xf>+=/CNOAi!\.ilrk1AP*':+Uf9H@2!i#ER2`dQ111_p@`;82@G.G:-6%]UP:Z$<.8X5OJI=5&_JQ+RCDq_B=-f`A'bm!*M1?a3
%[gIrQW&GMt-L3&1!a02/qt)F3Ua?L/LP`to8R)KE8'SHm5Op1:Y3El^l*='#%7^le-#?Yc(P5pF3VcQ+@EA*nq\'c`THTeh?S<Wt
%\WQ5W+=5'?<UJ1G@Pf]X*$?pnUp64NjXCB0;N"La:\KU"!?!"W!g*%fBb!b630[4C!L%7+!h`A(]@JY?a`Km-R6qe'&+1p/.l[aM
%gdN-&WcNU6$#=(sOWp_a#=\.(XM@h(4QfTSXE+kTkia'6c;7$>SJImX9pn8s[X.LICPjTmHGAAT0J]#U)2^[n0TH=03gJ?tXA1(A
%-nB:oJiTFVH"!@J:;CL'[]M?M%cEVi,dU7eoJC%H+LY!+V@Whe$K]c()$$73;,+,`'bQ.t!&>Z/V6jDp!_*uk@g>PUaOX=3UsWoc
%V9t);T2OpC$>>Sta,2^*0^7NN1$J\6UmhirNKHRh<*1+;KVk"_TKYeqBdF+b+\,P?4'#;KRW/Bp-9Y"4C>&O/e&_;4T\_JI_N,&"
%+XS6CYCuE?2"lf'!KAHnI=)^O4S$aqc&Z81!0mZ/,q9J3D:K.P3d@\DZN8BH'4<[qX!9Hf8k9/L,#AZ@"Hi[79u/F$m)]tREN!I\
%!L7u+G',3<(R>0boq[p(Ue!0N-7g>L6-%\)'6_GBUR?m/<\of<:!GelA=peZQC0p+($!5!WidDO^qG%T=.Yr4)WCoU.%^.A:V$Z(
%X-SkF:pP-3,QP*<0ii$)LKK-"7aeeE0m]0th1UYXB^o^Bkg>]`Eu4r$W+&>&.tWUQ>;BS_\=ucRBqZY^D),Y15l2Kr#0[XL$o(+o
%15*0cVo,$_3\&->F.mf\VMEHN&a1C2VhptiKdiaRja>'/(WWtYHalb9*&d=#Xk;MFX1Xd#=1u\&!RQ`+o/9f@DKNa,\B#DF9m*Do
%4CaI6\hY(i,rBu\rUhp!Jd^nkRu.ugMfk0YdO`.8(ZB"Xj4f-@$b.2_"3A&4"K@jFbBq)[=<28j7O4'l"/sG6/GrujTd)%\.28^q
%66/&ejp&4#TMH^<rRjV+Da7G<h<Ca@=OL;2!!DaV9-bK\<'^ei,m8MgK!NB-egGd3>!_Z&MFcP<LYIt(.C`6Rk2T;=dnm)WJH3K-
%<4tO^5]eih5QG1?C>^mI6$GPF(e]0/0r%`hh&..5DJI(S=5nM'l=15h^/\..-0Gq!(UI13Kj2[c@>LGeWb5Kql6#/qlJSYIE$5Oe
%TP@CsE!9MKOGm1S=EQ(!\8;u2Es&c0Gt>b&gkl;J;6?!heu\A\rS*\C=G:!K(He(G3HG,l)C[5$jJKZr#pS(ui1Sq(:IqsG\BoX'
%nc*Ck>$C=7NUYf_s58k[=U_[elL*-E"==\i0EDEA>qk=p$07,!4XB+GkGZ!6hcHi,a5DYIh3(_jPtGdkWNMa\dd;1)!RbAl,smB"
%b"l;QVHIgugdGLB3qlZNV6S.WVFeKmUs6Y39l-cOR+PfNLrpBWGh]C00sSQ&0^XkI#"_j1%df!lkqn/RVMTIun@]4CKRVdt=iRAU
%WTCZ;1jUAU8J!J]%E5Ea(%[]*cg12Q9nn7O$qaEMf-aA2!TNH3]a5@3O5M3ea&rVrHJ:i@-l`oZ5VL!?Uh+'3%0?pcH80,:L6G2E
%nVG+oARh42TTVWTLQ\r*TgVeN6FL6l4U]7!\bOEtm+FP0\)`E"apN5=;h*YuN+PU?JaTh3f/sM`VLD/oI?@'iK1r)9Ng[Tc$`J3l
%oJK`=9`gAJJVUB+"fh1dT.huq&QS[B-pVS`ctj;qrY24]K!iPlX^[r(LHl:l])#Een*:Oo<Q`oe8CkTbe@ncmM`XRAV1:L^m(G*"
%k'rmebj,loc!M<SO@Q-PNa!Cb5@`8PjYd<1^m@(SZJrCWZiQT9qTY+Fj*$"V]gGS`E>B(-D'G6-e1F%d>I%)79Qp?mL_Chp)!Ws?
%_AXu"-4;dtMao;^SQ"@<MTEt9&*b2PdOB>+Y3-sNNF5E-Z>%(O?-BHcl:'T<GnY:u4^gK?N=$Vm2GOL*o:T*"l&:Z"p]@W."qa_U
%1$=cH?ud0b"k]!FCt*_E<fiP(^n#8MoNZQ9[KL-]Q**YQASe>eOCW!%JP%&A4Ok=MWV4)@!3&o>?u4ALRU''FRdAMlNOul0VY]q%
%0eV@MWBT,+AYK^/?DmTQl=H+hUHVBA#u"X&pe[U7#sO;oRGPi[QcVCLHC<J#(qWQ1Tmj0YHPlE2XbT`VPBn)=18Q?PG+I(!rE^iC
%&F*7V%j>7*o/oHhPXf5&SDK8g'tf"DkN?7nAWu]-a/"t2mKUThEKRFn7:0@^>"J&GEl2F'W=FGDM]MD,'Z^A0MgQ-e2[J1I(m2dh
%Lk#"`du%MQc/fMBq4So^FZP1lSqrNRm3&_3U4B>*LQKb""_<&QT]fDR\+a4S^YJa[$\5s:o&cE(CN0>m0$H]W#>i,L":7.0FQYgB
%2BkCWp%T&J91$Frq%n8tB_FMCNp3HM^aUPqb[?]be]WIoPI!9kA9Vh%PY#3lNij5OHkq!KiJn/31Go3[7G#P)joa_4Zu60Dl;&pU
%&&(mGbU"JK0b(VorRQA>84=b#l.s#9k%J7@3Ep+VCh#rtW6j]c-J:<`oMC'MWIt?>=)?D7e-WPs0VN@>7q<,7!j]!,KP]U45h<?8
%O=_S_jMS\*`T5[PFp$8-Jk*A1)XP)6`gotB!"OHgSht?@4A4O^2`cZ]Kdif&R3=^CfXJ,@Ojo^_WY83VdQ4UeJKBqg\#?06Iu@XZ
%HNoCMaaiXQE%ji`\,Zuh]RaI%D"i4gT$%_qT[3LW$;53mcZ9-?k>Pn>dZ+b+qTB46L()-3%DKMKmbA(2A'+Cko?S=m&`<u;G2,dB
%1erQBg_5;+(?f0GRIY5%EugMSboo)k:f<+mBuX=]c<eLWE('E0S>Wh"iIl$0GsJN(&EU0BE#]dP,I0i&!P)iY/Z=[S51faTLc@80
%7oOS=6nY6$9@"G*@<Lcs87_"On%_FM+Et8f@#`gqJWO(Wp"AbaODRY,aLZpf>h`43lK/$E3U4,*JG%m5)glj=o[)XA@hSWlPV\6/
%]Al>_hN_+7/&t8\/"Qfnpg,oN*(uo>GpAuSZHiCOBUsOU=<p>3"2QsCj)[j)H5%LqBYuss(0EhpfGQVLGGFV%ibI!Z(!gD(Xk-\A
%*^=W&W$'3oCNqDPVY__$]:G*J>'9D)D?*a&ZNO[/_1n0R+M$u,MrS6D6:JgLT[O%]BQ9)q)^^eP'%Ja1![O("%AGLVK=]Y_"@GXI
%<2GTh0u=egoNWVI6kRDhTMt[1^f%*sdadFqOe@<K.?Jf]#1/-nF]0*tSu9BLJNO1\*ftr(=guu@M'aSPUb],+;O`"()>(+O9iaPg
%HlHh*,kOjul,osJ(A.Nf;1p0&j%W5b.G@7hnL7t?AJ1)_cPT/)\ZJp(EklNL0*et2X*M6fMre3gGKk"]<L;#HmVc00O37l3HQ?3N
%d.HJY,^geSVmSqsp3N1_0(\'4`0SEMdpa!5Bn@;k:-GQ0JLJ._>_&SD<EgWNcSkV0TQ_\/9V"A/!KeYSZ)c=XRb`[lNa83q;6!Bk
%dscV%_Mctg^a]!oAP6)!P5'FR:K`<"NYY83i6oL75(Me;JStZ0hqf>fhtTHEGtq7FmRE6#+>dc:fM](gr?5!u:T:l:c7FkJQph*<
%Mq/kNCp'd2(4g]5L?Yd+80XWkc`I%LR#%178#MVG>6otDD:s5_(IS:!k/0K8GMp#a5QN(UpXG+J&jOg+@6b+I")hQ=E)T8Q,9YFA
%HcUt*%(&V;Z<X(,(_D&sNb)NB)f)$_DLVt"#[@TP$]2r#91VGnb#k*rN1UKfP<:Cc^`48labJ$hcSnlX[EsK!F<l8QPs,Xmes*8\
%IY<>H,6E]G4^8#k16VH"A:iQ;RW'N8fHJt":cs:J#h@%%GE=U$!OBfL=YQ%>H4Z)dV%C'rV)LBM1>i@!9g]Vl6b&Zh.17/nm-Km)
%P*nK]fgoPG7?U?O!4PW69X_#GQXoh7`5>4:M;ZJ%P(nc5D@@Ynf`uu8bHDhkn==ql:0mrX?pobHqYj#*?e>ToGQlH?jt$=h%!VCc
%R4mq0o'cu/?/#V&j;#ILESlo;5-cuRk-"dENF_L'c!LLi43<N,Q]_A0OLpI9_S'L#j,;$0%'KXL>OB6WJ9,<`o)mI01Xha6Qk%o]
%FQE;6FD>DKomuAC*B7]94><<]RSHFK#O]D/.U@^[9**-:P2Rl1h&mP/B?Er(NX:u]E2`Nl_SULr+4hHWO&2$e[Ho&'d=/[;7tp?t
%]#SsHFtN-r%[Y))QAV#\ndAc1UMB[(c(2'6a_d/!5p'IiWB7a+A$eMtK2<!&6^4jPb9TZCf]*&J6DQQ_KXM@9X9kTdE:])nEZoiD
%&]mO_iE71`G:'SH8O"OVI[cCo;oY,@0d&1aLsn(NnPbSUM.V%$U*qs?3GHmh3QFMX2[R.bc)1@pm,^e4<m%k"Qm@<jkANP%pX>>G
%QZ[E7;jSi8U6G(]Y2EnCj#[ERo/>EZhq4l-q#[)gWT?6tn*(+":Y`!H*QFLu^or&Qg([ZI3f"NC9n>k1:"!)a!5[8\]%Z41I.6;m
%RM\=d^Y34jGGl;F':X>FrcX^k90S(nG"6E#4'A%S"'t&h!>M=EcGC1T+3lX>n"CNs?L;T%CU\0s*r?3npa2a^KOXQ<K=oTMUdXfp
%6RF*WGVn9A%AA#f[bNIg#`sM&NM,Q;l+LUO'e(+tN>kY2,I4P(8C-09;Np[;N:9N:S`]Ol*W_NfC;,\=Z[7O/Y%glp?+2qd2WX6b
%V*@df@jN6dA1/V@4r4\-&X>_25qRCKE%Q7?]Tgrr7m*:O75D>KTa1.c4<_#A,ZJk_YDe@APAO7n[k$1dTqZB,e<J>n))p9-/#c'#
%*n)NErQ/j\(546#4#D/!OMrHda;@$h3IB'AQLt084f=Ztar<3>.BjhRRO*)HgR(utLoeCBXHsr@Ep/)hPr)2Ao$gQJX(IC59li36
%+p6),Q]NKHZdF^?:0Z_f-J:SEZ4.Y]X,.-X>$R]2ea%BlD$*d3!)pi=&b(q,M:p*G:GlXjVTaX.$YX/lR;Mhm0cR*$!gp!@fpXZX
%C7NLU7$cdK3TF1Ukf^GC=_!q-rkbc4*`pI&E:_\44u&bA:LP=i;@@ro9(C_\eY@'CM+ShYW>(];<"=?aRQmLOl.%3em^fblo0%)L
%b[gB^j;G6<i9+uf,5qVEWBecZ2PpNqd"-.-gr,9V/'%qkZru<ZR6e3hi3cl^V`9O-?q:J5dXbe&=s^G\9NjrTK'\t@C25tY)Jat_
%(1r#b*AjM$9r\>%'V!t-A.(6P$?$ndA"\9Dc80f&`=NefJU).9r89i[q7?C@D[0aD8TT(h8hV'IE^mVm/o$U8d/4$P6#>^e"*Wh\
%5bR?N)k2R48S"X9S"k^Dm=WED0iM5Tg^RbL?FPC9\66q!'"\6_,eYsp:@H/24YUHLWK/j'aKRAQa0X,55`csn6stf]"3k/if75P<
%4qXbPqNAdFJpIVeKUTkK;O]i;K8p^n7YL>TTZQp<3g];/^.id)7Y_G,dW(pOd0:eG"mDG:&1*u;,pNZEq*lAEW4",cW,\ZtaE,'E
%Z\m3UWWRBFVm-&T?(5u7\1LMpIgX$ZJF&6J\\_:p3UTiM[;KD**QYNZ@FVTD[;9$S8jK(WgB0JCZ4fR4>+^gU$Z2*85ML-;@f2Pb
%G\@2-#O7KB?45$O9>n'V2ai[=Z6%3Qf+&t30\JO.agW2%XtifI"5+/R6I3++1.s41!?k)fG+\r'>2fa)5W739RO]LHSbCR6=CLCl
%Ti=6*8QFcSo:5Q3]ZPd2HEerXHds7^Mt?RM_.%,?J$RhK(S2(Wi5@3UAb.WAs%X$A*DSIJ52VZ>.?Qn68']>?60!Y:'XEk;2P,*o
%E8m2%TQ,r"ehOC$)0G9jf3=d7%Z73#SAbsFW*1h)Gji^Xh!K6qc9e!GNgoE0$dc)Tl4=n;SR7>8r"B2amf3LT=e@+UD'(pNQ+U\d
%WdS@J,uKk__^7HqYfEQEh0*jOh)@<#DP7R2!+9UoJi8<lmGJOp=VY<IR4bbDBcRBq9S"$,;cq)X#I"`B-Ood#VI8"3/kr%/kM!f3
%`F5?0(^iU\>YP=6o-9k"luPQf^XGMbF^Pe9%lUPM/>Hf6oT+ijJ%"B-R,d5PG?'=`Y@@,LZ2Ql*nR;DkkYUb3`jqXeWWDdg6a%=K
%nX,sfllQ&#W:PgkO8RpuA+.5e3uA!XmQ0QSB'\CW2%J27ji6Hel9N.t+DTNHrSRV52o#=\f>"tJp[\4Umlpa=O3?F0r8mB#TE"Z^
%onOXWJ<,3Vr:B6H^OH1F^L"[hJ+rQDci8:hnG/DX^ARj'f@PN0s7G:5YHQi4rUTXS_mb,Cq/;&\7b6MX`ufg-_u"ZX#>1^h70~>
%AI9_PrivateDataEnd
%%EndDocument
 @endspecial 1937 33 a
SDict begin [ /Page 1 /View [ /FitH 1000 ] /PageMode /UseNone /DOCVIEW
pdfmark end
 1937 33 a 1937 33 a
SDict begin [ {Catalog} << >> /PUT pdfmark end
 1937 33 a
1937 33 a
SDict begin H.S end
 1937 33 a 1937 33 a
SDict begin 11 H.A end
 1937 33 a 1937 33 a
SDict begin [ /View [/XYZ H.V] /Dest (Doc-Start) cvn H.B /DEST pdfmark
end
 1937
33 a eop end
%%Trailer
userdict /end-hook known{end-hook}if
%%Trailer
cleartomark
countdictstack
exch sub { end } repeat
restore
%%EOF
